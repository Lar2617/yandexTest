.header {
  background: url("./images/city1920x2.png"), linear-gradient(rgba(233, 222, 212, 0.8), rgba(233, 222, 212, 0.8)), url("./images/header_back1920x2.png");
  background-size: 100% 100%, cover, cover;
  background-position: 55% 0, center, center;
  background-repeat: no-repeat, no-repeat, no-repeat;
}
.header__container {
  display: flex;
  align-items: start;
  justify-content: start;
  flex-direction: column;
  padding: 27px 304px;
}
.header__logo {
  margin-left: 45px;
  margin-bottom: 60px;
}
.header__logo svg {
  width: 245px;
  height: 36px;
}
.header__title {
  margin-left: 45px;
  color: #060606;
  font-size: 60px;
  font-family: "Merriweather";
  font-weight: 400;
  text-transform: uppercase;
  line-height: 66px;
  word-wrap: break-word;
}
.header__title-cap {
  margin-left: 135px;
  color: #060606;
  font-size: 60px;
  font-family: "Merriweather";
  font-weight: 400;
  text-transform: uppercase;
  line-height: 66px;
  word-wrap: break-word;
}
.header__title-earth {
  margin-left: 76px;
  margin-bottom: 24px;
  color: #060606;
  font-size: 60px;
  font-family: "Merriweather";
  font-weight: 400;
  text-transform: uppercase;
  line-height: 66px;
}
.header__descr {
  margin-left: 55px;
  color: #151515;
  font-size: 18px;
  font-family: "Montserrat";
  font-weight: 500;
  line-height: 23.4px;
  word-wrap: break-word;
  text-align: center;
}
.header__descr-text:last-child {
  margin-bottom: 35px;
}
.header__btns {
  display: flex;
  justify-content: space-between;
  align-items: center;
  justify-content: start;
  margin-bottom: 100px;
  margin-left: 45px;
}
.header__btns .black-btn {
  width: 42%;
  margin-right: 10px;
  color: #fff;
  text-align: center;
  border-color: #060606;
  background-color: #060606;
}
.header__btns .black-btn:hover {
  color: #1F1F1F;
  border-color: #FBCE51;
  background-color: #FBCE51;
}
.header__btns .transp-btn {
  width: 43%;
  padding-right: 50px;
  padding-left: 50px;
  color: #303030;
  text-align: center;
  border-color: #303030;
  word-wrap: break-word;
  background-color: transparent;
}
.header__btns .transp-btn:hover {
  background-color: #1F1F1F;
  color: #fff;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}

*:focus-visible {
  outline: 0;
}

* {
  box-sizing: border-box;
}

@font-face {
  font-family: "Golos Text";
  src: local("fonts/GolosText-Regular"), url("fonts/GolosText-Regular.woff2") format("woff2"), url("fonts/GolosText-Regular.woff") format("woff");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Golos Text";
  src: local("fonts/GolosText-Medium"), url("fonts/GolosText-Medium.woff2") format("woff2"), url("fonts/GolosText-Medium.woff") format("woff");
  font-weight: 500;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Golos Text";
  src: local("fonts/GolosText-DemiBold"), url("fonts/GolosText-DemiBold.woff2") format("woff2"), url("fonts/GolosText-DemiBold.woff") format("woff");
  font-weight: 600;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Golos Text";
  src: local("fonts/GolosText-Bold"), url("fonts/GolosText-Bold.woff2") format("woff2"), url("fonts/GolosText-Bold.woff") format("woff");
  font-weight: 700;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Merriweather";
  src: local("fonts/Merriweather Regular"), local("fonts/Merriweather-Regular"), url("fonts/Merriweather-Regular.woff2") format("woff2"), url("fonts/Merriweather-Regular.woff") format("woff");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Merriweather";
  src: local("fonts/Merriweather Bold"), local("fonts/Merriweather-Bold"), url("fonts/Merriweather-Bold.woff2") format("woff2"), url("fonts/Merriweather-Bold.woff") format("woff");
  font-weight: bold;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Montserrat";
  src: local("fonts/Montserrat Medium"), local("fonts/Montserrat-Medium"), url("fonts/Montserrat-Medium.woff2") format("woff2"), url("fonts/Montserrat-Medium.woff") format("woff");
  font-weight: 500;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Montserrat";
  src: local("fonts/Montserrat SemiBold"), local("fonts/Montserrat-SemiBold"), url("fonts/Montserrat-SemiBold.woff2") format("woff2"), url("fonts/Montserrat-SemiBold.woff") format("woff");
  font-weight: 600;
  font-style: normal;
  font-display: swap;
}
body {
  min-width: 320px;
  padding: 0;
  margin: 0;
  font-family: "Golos Text", "Merriweather", "Montserrat", sans-serif;
  font-weight: 400;
  background-color: #fff;
  overflow-x: hidden;
}

.container {
  max-width: 1920px;
  margin: 0 auto;
}

section {
  padding: 27px 349px;
}

ul {
  list-style: none;
  margin: 0;
  padding: 0;
}

a {
  padding: 0;
  margin: 0;
  cursor: pointer;
  color: inherit;
  text-decoration: none;
}

p,
h1,
h2,
h3 {
  margin: 0;
  padding: 0;
}

button {
  margin: 0;
  padding: 0;
  border: inherit;
  outline: inherit;
  background: inherit;
  cursor: pointer;
}

img {
  max-width: 100%;
}

.visually-hidden {
  overflow: hidden;
  opacity: 0;
}

.hidden-big-dev {
  display: none;
}

.btn {
  font-family: "Golos Text";
  align-items: center;
  font-size: 16px;
  font-style: normal;
  font-weight: 500;
  line-height: 19px;
  transition: all 0.3s ease-in-out;
}

.btn-big {
  padding: 16px 45px;
  border: 2px solid;
  border-radius: 66px;
}

.btn-small {
  padding: 8px 10px;
  border: 1px solid;
  border-radius: 62px;
}

.line {
  min-height: 60px;
  padding: 18px 12px;
  background: #F54932;
  overflow: hidden;
}

.line__stroke {
  width: 190%;
  animation: marquee 15s linear infinite;
}

.line__stroke svg {
  width: 6px;
  height: 6px;
  margin: 7px 12px;
}

.line__stroke-text {
  font-size: 22px;
  font-family: "Merriweather";
  font-weight: 400;
  text-transform: uppercase;
  line-height: 24.2px;
  word-wrap: break-word;
  color: #fff;
}

@keyframes marquee {
  0% {
    transform: translateX(100%);
  }
  100% {
    transform: translateX(-100%);
  }
}
@media (max-width: 1366px) {
  .hidden-big-dev {
    display: block;
  }
  section {
    padding: 0;
  }
  .container {
    display: flex;
    align-items: start;
    justify-content: start;
    flex-direction: column;
    padding: 26px 30px;
  }
  .header {
    background: url("./images/city1366x2.png"), linear-gradient(rgba(233, 222, 212, 0.8), rgba(233, 222, 212, 0.8)), url("./images/header_back1920x2.png");
    background-size: cover, cover, cover;
    background-position: right, center, center;
    background-repeat: no-repeat, no-repeat, no-repeat;
  }
  .header__title-earth {
    margin-bottom: 20px;
  }
  .header__descr {
    width: 40%;
    margin-left: 55px;
    margin-bottom: 40px;
    font-family: "Golos Text";
  }
  .header__descr-text:last-child {
    margin-bottom: 0;
  }
  .header__btns {
    margin-bottom: 105px;
  }
  .header .btn-big {
    padding: 15px 45px;
  }
  .line__stroke {
    width: 315%;
  }
  .help {
    background: #fff;
  }
  .help .container {
    padding: 105px 70px 140px;
  }
  .help__lection {
    margin: -28px 0 70px;
    padding-top: 28px;
    padding-bottom: 28px;
    padding-right: 26vw;
    background: url("./images/turnir1366x2.png") right 0%/32% 100% no-repeat;
  }
  .help__play {
    padding: 30px 0;
    padding-left: 40.5vw;
    margin: -30px 0;
    margin-left: -35px;
    background: url("./images/onePlayerGame1366x2.png") left 5%/43% 112% no-repeat;
  }
  .help__play .play-info {
    position: relative;
    padding-top: 45px;
    width: 100%;
    display: flex;
    align-items: start;
    justify-content: start;
    flex-direction: column;
    margin-bottom: 35px;
  }
  .help__play .play-info .play-info__item {
    width: 100%;
    display: flex;
    align-items: start;
    justify-content: start;
    border-bottom: 2px solid #D0D0D0;
  }
  .help__play .play-info .play-info__item:first-child {
    padding-top: 0;
  }
  .help__play .play-info .play-info__item:last-child {
    border-bottom: transparent;
  }
  .help__play .play-info .info-descr {
    width: 22.5vw;
    padding: 15px;
    padding-left: 0;
    color: #313131;
    font-size: 20px;
    font-family: "Golos Text";
    font-weight: 400;
    line-height: 24px;
    word-wrap: break-word;
    border-right: 2px solid #D0D0D0;
  }
  .help__play .play-info .info-info {
    width: 25vw;
    padding: 15px;
    padding-right: 0;
    color: #313131;
    font-size: 20px;
    font-family: "Golos Text";
    font-weight: 600;
    line-height: 24px;
    word-wrap: break-word;
  }
  .help__play .play-info .crossed {
    -webkit-text-decoration: line-through #F54932;
            text-decoration: line-through #F54932;
    margin-right: 15px;
  }
  .help .event-descr {
    color: #313131;
    font-size: 36px;
    font-family: "Merriweather";
    font-weight: 400;
    text-transform: uppercase;
    line-height: 48.6px;
    word-wrap: break-word;
  }
  .help .event-name {
    color: #F54932;
    font-size: 36px;
    font-family: "Merriweather";
    font-weight: 700;
    text-transform: uppercase;
  }
  .help .event-contact {
    color: #3057A2;
    font-size: 20px;
    font-family: "Golos Text";
    font-weight: 400;
    line-height: 24px;
    word-wrap: break-word;
  }
  .tournament {
    background: #fff;
  }
  .tournament .container {
    padding: 56px 72px;
  }
  .tournament .vasiuky-steps {
    margin-bottom: 54px;
  }
  .tournament .vasiuky-steps-header {
    color: #313131;
    font-size: 54px;
    font-family: "Merriweather";
    font-weight: 400;
    text-transform: uppercase;
    line-height: 64.8px;
    word-wrap: break-word;
  }
  .tournament .vasiuki-steps-text {
    display: inline-block;
    width: 42.5%;
    padding-left: 20px;
    color: #3057A2;
    font-size: 20px;
    font-family: "Golos Text";
    font-weight: 400;
    line-height: 24px;
    word-wrap: break-word;
    text-transform: none;
  }
  .stages {
    position: relative;
    width: 100%;
    margin-bottom: 157px;
  }
  .stages::after {
    content: "";
    position: absolute;
    right: -8%;
    bottom: 7%;
    width: 480px;
    height: 240px;
    z-index: 10;
    background: url("./images/plane1366x2.png") center/contain no-repeat;
  }
  .stages .swiper .swiper-wrapper {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: minmax(114px, auto) minmax(114px, auto) minmax(138px, auto);
    gap: 19px;
    margin-bottom: 40px;
  }
  .stages .swiper .swiper-wrapper .swiper-slide {
    width: 100% !important;
    padding: 22px 20px 5px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    align-items: start;
    background: linear-gradient(rgba(233, 222, 212, 0.8), rgba(233, 222, 212, 0.8)), url("./images/slideback1366.png");
    background-size: cover, cover;
    background-position: center, center;
    background-repeat: no-repeat, no-repeat;
  }
  .stages .swiper .swiper-wrapper .swiper-slide .slide-number {
    margin-right: 15px;
    padding: 7px 12px;
    color: #313131;
    font-size: 20px;
    font-family: "Golos Text";
    font-weight: 600;
    line-height: 24px;
    word-wrap: break-word;
    background-color: #fff;
    border-radius: 50%;
  }
  .stages .swiper .swiper-wrapper .swiper-slide .slide-content {
    color: #313131;
    font-size: 20px;
    font-family: "Golos Text";
    font-weight: 500;
    line-height: 24px;
    word-wrap: break-word;
  }
  .stages .swiper .swiper-wrapper .slide3 {
    grid-row: 1/3;
    grid-column: 3;
  }
  .stages .swiper .swiper-wrapper .slide7 {
    grid-row: 3;
    grid-column: 2/4;
  }
  .stages .swiper .swiper-wrapper .slide7 .slide-content {
    padding-right: 20vw;
    padding-left: 7px;
  }
  .stages__swiper-navi {
    display: none;
  }
  .participants {
    width: 100%;
    margin-bottom: 65px;
  }
  .participants .swiper {
    width: 100%;
    min-height: 482px;
    overflow-x: hidden !important;
  }
  .participants .swiper .swiper-wrapper {
    min-height: 482px;
  }
  .participants .swiper .swiper-wrapper .swiper-slide {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-end;
    min-height: 462px;
    padding: 348px 10px 0;
    background: url("./images/carousel1366x2.png") top center/80% 70% no-repeat;
  }
  .participants .swiper .swiper-wrapper .swiper-slide .participant-name {
    margin-bottom: 6px;
    color: #313131;
    font-size: 24px;
    font-family: "Golos Text";
    font-weight: 600;
    line-height: 28.8px;
    word-wrap: break-word;
  }
  .participants .swiper .swiper-wrapper .swiper-slide .participant-status {
    margin-bottom: 20px;
    color: #313131;
    font-size: 20px;
    font-family: "Golos Text";
    font-weight: 400;
    line-height: 24px;
    word-wrap: break-word;
  }
  .participants .swiper .swiper-wrapper .swiper-slide .participant-link {
    color: #3057A2;
    font-size: 16px;
    font-family: "Golos Text";
    font-weight: 500;
    line-height: 19.2px;
    word-wrap: break-word;
    background-color: transparent;
    border-color: #3057A2;
    transition: all 0.3s ease-in-out;
  }
  .participants .swiper .swiper-wrapper .swiper-slide .participant-link:hover {
    background-color: #3057A2;
    color: #fff;
  }
  .participants__swiper-head {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 62px;
  }
  .participants__swiper-head .swiper-title {
    flex-grow: 2;
    color: #313131;
    font-size: 54px;
    font-family: "Merriweather";
    font-weight: 400;
    text-transform: uppercase;
    line-height: 64.8px;
    word-wrap: break-word;
  }
  .participants__swiper-navi {
    width: 152px;
    padding-top: 3px;
    padding-left: 3px;
  }
  .participants__swiper-btns {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 152px;
  }
  .participants-swiper-button-prev svg,
  .participants-swiper-button-next svg {
    width: 44px;
    height: 44px;
  }
  .participants-swiper-button-prev svg circle,
  .participants-swiper-button-next svg circle {
    fill: #313131;
  }
  .participants-swiper-button-prev:hover svg circle,
  .participants-swiper-button-next:hover svg circle {
    fill: #FBCE51;
  }
  .participants-swiper-button-prev .swiper-navigation-disabled svg circle,
  .participants-swiper-button-next .swiper-navigation-disabled svg circle {
    fill: #D6D6D6;
  }
  .participants-swiper-pagination {
    padding: 0 9%;
    font-size: 16px;
  }
  .footer {
    padding: 40px 72px 72px;
    background-color: #E9DED4;
  }
  .footer .container {
    padding: 0;
  }
  .footer .container .footer-text {
    color: #313131;
    font-size: 16px;
    font-family: "Golos Text";
    font-weight: 400;
    line-height: 19.2px;
    word-wrap: break-word;
  }
}
@media (max-width: 768px) {
  .container {
    padding: 20px;
  }
  .header {
    background: url("./images/city375x2.png"), linear-gradient(rgba(233, 222, 212, 0.8), rgba(233, 222, 212, 0.8)), url("./images/header_back375x2.png");
    background-size: 100% 50%, cover, cover;
    background-position: bottom, center, center;
    background-repeat: no-repeat, no-repeat, no-repeat;
  }
  .header__logo {
    margin-bottom: 30px;
    margin-left: 0;
  }
  .header__logo svg {
    width: 213px;
  }
  .header__title {
    width: 100%;
    margin-left: 0;
    font-size: 36px;
    line-height: 39.6px;
  }
  .header__title-cap {
    margin-left: 63px;
    font-size: 36px;
    line-height: 39.6px;
  }
  .header__title-earth {
    margin-left: 30px;
    margin-bottom: 24px;
    font-size: 36px;
    line-height: 39.6px;
  }
  .header__descr {
    width: 100%;
    margin-left: -5px;
    margin-bottom: 30px;
    font-size: 18px;
    line-height: 23.4px;
  }
  .header__descr-text {
    display: inline;
  }
  .header__btns {
    width: 100%;
    margin-left: 0;
    flex-direction: column;
    margin-bottom: 265px;
  }
  .header__btns .black-btn {
    width: 100%;
    margin-right: 0;
    margin-bottom: 13px;
    padding: 14px 20px;
  }
  .header__btns .transp-btn {
    width: 100%;
    padding: 14px 20px;
  }
  .line {
    min-height: 38px;
    padding: 10px 12px;
  }
  .line__stroke {
    width: 545%;
  }
  .line__stroke svg {
    margin: 3px 12px;
  }
  .line__stroke-text {
    font-size: 16px;
    line-height: 17.6px;
  }
  .help .container {
    padding: 48px 20px;
  }
  .help__lection {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: space-between;
    min-height: 536px;
    padding: 0;
    margin: 0;
    margin-bottom: 20px;
    background: url("./images/turnir375x2.png") center 50%/100% 38% no-repeat;
  }
  .help .event-descr:nth-child(2) {
    margin-bottom: 260px;
  }
  .help .event-descr {
    font-size: 28px;
    line-height: 37.8px;
  }
  .help .event-name {
    font-size: 28px;
    line-height: 37.8px;
  }
  .help .event-contact {
    font-size: 18px;
    line-height: 21.6px;
  }
  .help__play {
    padding: 0 20px;
    padding-top: 460px;
    margin: -20px;
    background: url("./images/onePlayerGame375x2.png") center 5%/100% 38% no-repeat;
  }
  .help__play .play-info {
    margin-bottom: 23px;
  }
  .help__play .play-info .play-info__item {
    flex-direction: column;
  }
  .help__play .play-info .play-info__item:not(:first-child) {
    padding-top: 13px;
  }
  .help__play .play-info .play-info__item:nth-child(4) {
    flex-direction: row;
  }
  .help__play .play-info .play-info__item:nth-child(4) .info-descr {
    width: 47%;
  }
  .help__play .play-info .play-info__item:nth-child(4) .info-info {
    width: 47%;
  }
  .help__play .play-info .info-descr {
    width: 100%;
    padding-top: 0;
    border: transparent;
  }
  .help__play .play-info .info-info {
    width: 100%;
    padding-top: 0;
    padding-left: 0;
  }
  .tournament .container {
    padding: 95px 20px;
    padding-bottom: 80px;
  }
  .tournament .vasiuky-steps {
    margin-bottom: 150px;
  }
  .tournament .vasiuky-steps-header {
    font-size: 36px;
    line-height: 39.6px;
  }
  .tournament .vasiuki-steps-text {
    width: 100%;
    margin-top: 10px;
    padding-left: 0;
    font-size: 18px;
    line-height: 21.6px;
  }
  .stages {
    margin-bottom: 115px;
  }
  .stages::after {
    right: 0%;
    top: -35%;
    width: 327px;
    height: 182px;
    background: url("./images/plane375x2.png") center/contain no-repeat;
  }
  .stages .swiper .swiper-wrapper {
    grid-template-columns: repeat(5, 1fr);
    grid-template-rows: minmax(150px, auto) minmax(150px, auto);
    gap: 0;
    margin-bottom: 30px;
  }
  .stages .swiper .swiper-wrapper .swiper-slide {
    width: 335px !important;
    padding: 0 20px;
  }
  .stages .swiper .swiper-wrapper .swiper-slide .slide-content {
    font-size: 18px;
    line-height: 22px;
  }
  .stages .swiper .swiper-wrapper .slide1 {
    padding-top: 62px;
    grid-row: 1/2;
    grid-column: 1/2;
  }
  .stages .swiper .swiper-wrapper .slide2 {
    padding-top: 27px;
    grid-row: 2/3;
    grid-column: 1/2;
  }
  .stages .swiper .swiper-wrapper .slide3 {
    padding-top: 62px;
    grid-row: 1/3;
    grid-column: 2/3;
  }
  .stages .swiper .swiper-wrapper .slide4 {
    padding-top: 62px;
    grid-row: 1/2;
    grid-column: 3/4;
  }
  .stages .swiper .swiper-wrapper .slide5 {
    padding-top: 27px;
    grid-row: 2/3;
    grid-column: 3/4;
  }
  .stages .swiper .swiper-wrapper .slide6 {
    padding-top: 62px;
    grid-row: 1/3;
    grid-column: 4/5;
  }
  .stages .swiper .swiper-wrapper .slide7 {
    padding-top: 62px;
    grid-row: 1/3;
    grid-column: 5/6;
  }
  .stages .swiper .swiper-wrapper .slide7 .slide-content {
    padding-right: 0;
  }
  .stages__swiper-navi {
    display: block;
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 185px;
    margin: 0 auto;
  }
  .stages-swiper-button-prev svg,
  .stages-swiper-button-next svg {
    width: 36px;
    height: 36px;
    transition: all 0.3s ease-in-out;
  }
  .stages-swiper-button-prev svg circle,
  .stages-swiper-button-next svg circle {
    fill: #313131;
  }
  .stages-swiper-button-prev .swiper-button-disabled svg circle,
  .stages-swiper-button-next .swiper-button-disabled svg circle {
    fill: #D6D6D6;
  }
  .stages-swiper-button-prev:hover svg circle,
  .stages-swiper-button-next:hover svg circle {
    fill: #FBCE51;
  }
  .participants {
    position: relative;
  }
  .participants .swiper {
    min-height: 435px;
  }
  .participants .swiper .swiper-wrapper {
    min-height: 435px;
  }
  .participants .swiper .swiper-wrapper .swiper-slide {
    min-height: 409px;
    padding: 260px 10px 0;
    background: url("./images/carousel375x2.png") 50% 10%/74% 60% no-repeat;
  }
  .participants__swiper-navi {
    position: absolute;
    bottom: -9%;
    left: 0;
    width: 100%;
  }
  .participants__swiper-btns {
    width: 130px;
    margin: 0 auto;
  }
  .participants-swiper-button-prev svg,
  .participants-swiper-button-next svg {
    width: 36px;
    height: 36px;
  }
  .participants-swiper-pagination {
    padding: 0 8%;
  }
  .participants__swiper-head {
    margin-bottom: 23px;
  }
  .participants__swiper-head .swiper-title {
    font-size: 36px;
    line-height: 39.6px;
  }
  .footer {
    padding: 40px 18px 60px;
  }
}/*# sourceMappingURL=styles.css.map */
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy5jc3MiLCJzdHlsZXMuY3NzIiwic3R5bGVzLmNzcyIsInN0eWxlcy5jc3MiLCJzdHlsZXMuY3NzIiwic3R5bGVzLmNzcyIsInN0eWxlcy5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0E7RUFDRSxzSkFBQTtFQUNBLHdDQUFBO0VBQ0EsMENBQUE7RUFDQSxrREFBQTtBQ0ZGO0FESUU7RUFDRSxhQUFBO0VBQ0Esa0JBQUE7RUFDQSxzQkFBQTtFQUNBLHNCQUFBO0VBQ0EsbUJBQUE7QUNGSjtBREtFO0VBQ0UsaUJBQUE7RUFDQSxtQkFBQTtBQ0hKO0FET0U7RUFDRSxZQUFBO0VBQ0EsWUFBQTtBQ0xKO0FEUUU7RUFDRSxpQkFBQTtFQUNBLGNFdEJLO0VGdUJMLGVBQUE7RUFDQSwyQkFBQTtFQUNBLGdCQUFBO0VBQ0EseUJBQUE7RUFDQSxpQkFBQTtFQUNBLHFCQUFBO0FDTko7QURRSTtFQUNFLGtCQUFBO0VBQ0EsY0VoQ0c7RUZpQ0gsZUFBQTtFQUNBLDJCQUFBO0VBQ0EsZ0JBQUE7RUFDQSx5QkFBQTtFQUNBLGlCQUFBO0VBQ0EscUJBQUE7QUNOTjtBRFNJO0VBQ0UsaUJBQUE7RUFDQSxtQkFBQTtFQUNBLGNFNUNHO0VGNkNILGVBQUE7RUFDQSwyQkFBQTtFQUNBLGdCQUFBO0VBQ0EseUJBQUE7RUFDQSxpQkFBQTtBQ1BOO0FEV0U7RUFDRSxpQkFBQTtFQUNBLGNFcERLO0VGcURMLGVBQUE7RUFDQSx5QkFBQTtFQUNBLGdCQUFBO0VBQ0EsbUJBQUE7RUFDQSxxQkFBQTtFQUNBLGtCQUFBO0FDVEo7QURZRTtFQUNFLG1CQUFBO0FDVko7QURhRTtFRzNFQSxhQUFBO0VBQ0EsOEJBQUE7RUFDQSxtQkFBQTtFSDJFRSxzQkFBQTtFQUNBLG9CQUFBO0VBQ0EsaUJBQUE7QUNUSjtBRFdJO0VBQ0UsVUFBQTtFQUNBLGtCQUFBO0VBQ0EsV0VoRkU7RUZpRkYsa0JBQUE7RUFDQSxxQkUvRUc7RUZnRkgseUJFaEZHO0FEdUVUO0FEWUk7RUFDRSxjRWhGRztFRmlGSCxxQkUzRks7RUY0RkwseUJFNUZLO0FEa0ZYO0FEYUk7RUFDRSxVQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtFQUNBLGNFNUZHO0VGNkZILGtCQUFBO0VBQ0EscUJFOUZHO0VGK0ZILHFCQUFBO0VBQ0EsNkJBQUE7QUNYTjtBRGNJO0VBQ0UseUJFakdHO0VGa0dILFdFekdFO0FENkZSOztBRzNGQTs7O0VBSUUsbUJBQUE7QUg4RkY7O0FHM0ZBO0VBQ0UsVUFBQTtBSDhGRjs7QUczRkE7RUFDRSxzQkFBQTtBSDhGRjs7QUczRkE7RUFDRSx5QkFBQTtFQUNBLCtJQUFBO0VBR0EsZ0JBQUE7RUFDQSxrQkFBQTtFQUNBLGtCQUFBO0FINEZGO0FHekZBO0VBQ0UseUJBQUE7RUFDQSw0SUFBQTtFQUdBLGdCQUFBO0VBQ0Esa0JBQUE7RUFDQSxrQkFBQTtBSHlGRjtBR3RGQTtFQUNFLHlCQUFBO0VBQ0Esa0pBQUE7RUFHQSxnQkFBQTtFQUNBLGtCQUFBO0VBQ0Esa0JBQUE7QUhzRkY7QUduRkE7RUFDRSx5QkFBQTtFQUNBLHNJQUFBO0VBR0EsZ0JBQUE7RUFDQSxrQkFBQTtFQUNBLGtCQUFBO0FIbUZGO0FHaEZBO0VBQ0UsMkJBQUE7RUFDQSw2TEFBQTtFQUdBLG1CQUFBO0VBQ0Esa0JBQUE7RUFDQSxrQkFBQTtBSGdGRjtBRzdFQTtFQUNFLDJCQUFBO0VBQ0EsaUxBQUE7RUFHQSxpQkFBQTtFQUNBLGtCQUFBO0VBQ0Esa0JBQUE7QUg2RUY7QUcxRUE7RUFDRSx5QkFBQTtFQUNBLGlMQUFBO0VBR0EsZ0JBQUE7RUFDQSxrQkFBQTtFQUNBLGtCQUFBO0FIMEVGO0FHdkVBO0VBQ0UseUJBQUE7RUFDQSx5TEFBQTtFQUdBLGdCQUFBO0VBQ0Esa0JBQUE7RUFDQSxrQkFBQTtBSHVFRjtBR25FQTtFQUNFLGdCQUFBO0VBQ0EsVUFBQTtFQUNBLFNBQUE7RUFDQSxtRUFBQTtFQUNBLGdCQUFBO0VBQ0Esc0JGeEdNO0VFeUdOLGtCQUFBO0FIcUVGOztBR2xFQTtFQUNFLGlCRmxIc0I7RUVtSHRCLGNBQUE7QUhxRUY7O0FHbEVBO0VBQ0UsbUJBQUE7QUhxRUY7O0FHbEVBO0VBQ0UsZ0JBQUE7RUFDQSxTQUFBO0VBQ0EsVUFBQTtBSHFFRjs7QUdsRUE7RUFDRSxVQUFBO0VBQ0EsU0FBQTtFQUNBLGVBQUE7RUFDQSxjQUFBO0VBQ0EscUJBQUE7QUhxRUY7O0FHbEVBOzs7O0VBSUUsU0FBQTtFQUNBLFVBQUE7QUhxRUY7O0FHbEVBO0VBQ0UsU0FBQTtFQUNBLFVBQUE7RUFDQSxlQUFBO0VBQ0EsZ0JBQUE7RUFDQSxtQkFBQTtFQUNBLGVBQUE7QUhxRUY7O0FHbEVBO0VBQ0UsZUFBQTtBSHFFRjs7QUdqRUE7RUFDRSxnQkFBQTtFQUNBLFVBQUE7QUhvRUY7O0FHakVBO0VBQ0UsYUFBQTtBSG9FRjs7QUdqRUE7RUFDRSx5QkFBQTtFQUNBLG1CQUFBO0VBQ0EsZUFBQTtFQUNBLGtCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxpQkFBQTtFQUNBLGdDQUFBO0FIb0VGOztBR2pFQTtFQUNFLGtCQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtBSG9FRjs7QUdqRUE7RUFDRSxpQkFBQTtFQUNBLGlCQUFBO0VBQ0EsbUJBQUE7QUhvRUY7O0FHakVBO0VBQ0UsZ0JBQUE7RUFDQSxrQkFBQTtFQUNBLG1CRi9MTTtFRWdNTixnQkFBQTtBSG9FRjs7QUdqRUE7RUFDRSxXQUFBO0VBQ0Esc0NBQUE7QUhvRUY7O0FHakVBO0VBQ0UsVUFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtBSG9FRjs7QUdqRUE7RUFDRSxlQUFBO0VBQ0EsMkJBQUE7RUFDQSxnQkFBQTtFQUNBLHlCQUFBO0VBQ0EsbUJBQUE7RUFDQSxxQkFBQTtFQUNBLFdBQUE7QUhvRUY7O0FHakVBO0VBQ0U7SUFDRSwyQkFBQTtFSG9FRjtFR2pFQTtJQUNFLDRCQUFBO0VIbUVGO0FBQ0Y7QUloU0E7RUFFRTtJQUNFLGNBQUE7RUppU0Y7RUk5UkE7SUFDRSxVQUFBO0VKZ1NGO0VJN1JBO0lBQ0UsYUFBQTtJQUNBLGtCQUFBO0lBQ0Esc0JBQUE7SUFDQSxzQkFBQTtJQUNBLGtCQUFBO0VKK1JGO0VJM1JBO0lBQ0Usc0pBQUE7SUFDQSxvQ0FBQTtJQUNBLDBDQUFBO0lBQ0Esa0RBQUE7RUo2UkY7RUkzUkU7SUFDRSxtQkFBQTtFSjZSSjtFSXpSRTtJQUNFLFVBQUE7SUFDQSxpQkFBQTtJQUNBLG1CQUFBO0lBQ0EseUJBQUE7RUoyUko7RUl4UkU7SUFDRSxnQkFBQTtFSjBSSjtFSXZSRTtJQUNFLG9CQUFBO0VKeVJKO0VJdFJFO0lBQ0Usa0JBQUE7RUp3Uko7RUlwUkE7SUFDRSxXQUFBO0VKc1JGO0VJbFJBO0lBQ0UsZ0JIdERJO0VEMFVOO0VJalJFO0lBQ0UseUJBQUE7RUptUko7RUloUkU7SUFDRSxvQkFBQTtJQUNBLGlCQUFBO0lBQ0Esb0JBQUE7SUFDQSxtQkFBQTtJQUNBLHdFQUFBO0VKa1JKO0VJL1FFO0lBQ0UsZUFBQTtJQUNBLG9CQUFBO0lBQ0EsZUFBQTtJQUNBLGtCQUFBO0lBQ0EsOEVBQUE7RUppUko7RUkvUUk7SUFDRSxrQkFBQTtJQUNBLGlCQUFBO0lBQ0EsV0FBQTtJQUNBLGFBQUE7SUFDQSxrQkFBQTtJQUNBLHNCQUFBO0lBQ0Esc0JBQUE7SUFDQSxtQkFBQTtFSmlSTjtFSTlRTTtJQUNFLFdBQUE7SUFDQSxhQUFBO0lBQ0Esa0JBQUE7SUFDQSxzQkFBQTtJQUNBLGdDQUFBO0VKZ1JSO0VJN1FNO0lBQ0UsY0FBQTtFSitRUjtFSTVRTTtJQUNFLDBCQUFBO0VKOFFSO0VJM1FNO0lBQ0UsYUFBQTtJQUNBLGFBQUE7SUFDQSxlQUFBO0lBQ0EsY0huR0Q7SUdvR0MsZUFBQTtJQUNBLHlCQUFBO0lBQ0EsZ0JBQUE7SUFDQSxpQkFBQTtJQUNBLHFCQUFBO0lBQ0EsK0JBQUE7RUo2UVI7RUkxUU07SUFDRSxXQUFBO0lBQ0EsYUFBQTtJQUNBLGdCQUFBO0lBQ0EsY0hoSEQ7SUdpSEMsZUFBQTtJQUNBLHlCQUFBO0lBQ0EsZ0JBQUE7SUFDQSxpQkFBQTtJQUNBLHFCQUFBO0VKNFFSO0VJelFNO0lBQ0UsNkNBQUE7WUFBQSxxQ0FBQTtJQUNBLGtCQUFBO0VKMlFSO0VJdFFFO0lBQ0UsY0hoSUc7SUdpSUgsZUFBQTtJQUNBLDJCQUFBO0lBQ0EsZ0JBQUE7SUFDQSx5QkFBQTtJQUNBLG1CQUFBO0lBQ0EscUJBQUE7RUp3UUo7RUlyUUU7SUFDRSxjSHRKRTtJR3VKRixlQUFBO0lBQ0EsMkJBQUE7SUFDQSxnQkFBQTtJQUNBLHlCQUFBO0VKdVFKO0VJcFFFO0lBQ0UsY0gzSkM7SUc0SkQsZUFBQTtJQUNBLHlCQUFBO0lBQ0EsZ0JBQUE7SUFDQSxpQkFBQTtJQUNBLHFCQUFBO0VKc1FKO0VJalFBO0lBQ0UsZ0JIcktJO0VEd2FOO0VJaFFFO0lBQ0Usa0JBQUE7RUprUUo7RUkvUEU7SUFDRSxtQkFBQTtFSmlRSjtFSTlQRTtJQUNFLGNIektHO0lHMEtILGVBQUE7SUFDQSwyQkFBQTtJQUNBLGdCQUFBO0lBQ0EseUJBQUE7SUFDQSxtQkFBQTtJQUNBLHFCQUFBO0VKZ1FKO0VJN1BFO0lBQ0UscUJBQUE7SUFDQSxZQUFBO0lBQ0Esa0JBQUE7SUFDQSxjSC9MQztJR2dNRCxlQUFBO0lBQ0EseUJBQUE7SUFDQSxnQkFBQTtJQUNBLGlCQUFBO0lBQ0EscUJBQUE7SUFDQSxvQkFBQTtFSitQSjtFSTFQQTtJQUNFLGtCQUFBO0lBQ0EsV0FBQTtJQUNBLG9CQUFBO0VKNFBGO0VJelBBO0lBQ0UsV0FBQTtJQUNBLGtCQUFBO0lBQ0EsVUFBQTtJQUNBLFVBQUE7SUFDQSxZQUFBO0lBQ0EsYUFBQTtJQUNBLFdBQUE7SUFDQSxvRUFBQTtFSjJQRjtFSXhQQTtJQUNFLGFBQUE7SUFDQSxxQ0FBQTtJQUNBLCtFQUFBO0lBQ0EsU0FBQTtJQUNBLG1CQUFBO0VKMFBGO0VJeFBFO0lBQ0Usc0JBQUE7SUFDQSwyQkFBQTtJRnZPSixhQUFBO0lBQ0EsOEJBQUE7SUFDQSxtQkFBQTtJRXVPSSxrQkFBQTtJQUNBLGtIQUFBO0lBQ0EsNkJBQUE7SUFDQSxtQ0FBQTtJQUNBLHVDQUFBO0VKNFBKO0VJMVBJO0lBQ0Usa0JBQUE7SUFDQSxpQkFBQTtJQUNBLGNIdE9DO0lHdU9ELGVBQUE7SUFDQSx5QkFBQTtJQUNBLGdCQUFBO0lBQ0EsaUJBQUE7SUFDQSxxQkFBQTtJQUNBLHNCSHBQQTtJR3FQQSxrQkFBQTtFSjRQTjtFSXpQSTtJQUNFLGNIalBDO0lHa1BELGVBQUE7SUFDQSx5QkFBQTtJQUNBLGdCQUFBO0lBQ0EsaUJBQUE7SUFDQSxxQkFBQTtFSjJQTjtFSXZQRTtJQUNFLGFBQUE7SUFDQSxjQUFBO0VKeVBKO0VJdFBFO0lBQ0UsV0FBQTtJQUNBLGdCQUFBO0VKd1BKO0VJdFBJO0lBQ0UsbUJBQUE7SUFDQSxpQkFBQTtFSndQTjtFSWxQQTtJQUNFLGFBQUE7RUpvUEY7RUloUEE7SUFDRSxXQUFBO0lBQ0EsbUJBQUE7RUprUEY7RUloUEU7SUFDRSxXQUFBO0lBQ0EsaUJBQUE7SUFDQSw2QkFBQTtFSmtQSjtFSS9PSTtJQUNFLGlCQUFBO0VKaVBOO0VJL09NO0lBQ0UsYUFBQTtJQUNBLHNCQUFBO0lBQ0EsbUJBQUE7SUFDQSx5QkFBQTtJQUNBLGlCQUFBO0lBQ0EscUJBQUE7SUFDQSwyRUFBQTtFSmlQUjtFSS9PUTtJQUNFLGtCQUFBO0lBQ0EsY0h4U0g7SUd5U0csZUFBQTtJQUNBLHlCQUFBO0lBQ0EsZ0JBQUE7SUFDQSxtQkFBQTtJQUNBLHFCQUFBO0VKaVBWO0VJN09RO0lBQ0UsbUJBQUE7SUFDQSxjSG5USDtJR29URyxlQUFBO0lBQ0EseUJBQUE7SUFDQSxnQkFBQTtJQUNBLGlCQUFBO0lBQ0EscUJBQUE7RUorT1Y7RUk1T1E7SUFDRSxjSHJVTDtJR3NVSyxlQUFBO0lBQ0EseUJBQUE7SUFDQSxnQkFBQTtJQUNBLG1CQUFBO0lBQ0EscUJBQUE7SUFDQSw2QkFBQTtJQUNBLHFCSDVVTDtJRzZVSyxnQ0FBQTtFSjhPVjtFSTNPUTtJQUNFLHlCSGpWTDtJR2tWSyxXSGpWSjtFRDhqQk47RUlyT0E7SUY3VkEsYUFBQTtJQUNBLDhCQUFBO0lBQ0EsbUJBQUE7SUU2VkUsbUJBQUE7RUp5T0Y7RUl2T0U7SUFDRSxZQUFBO0lBQ0EsY0h2Vkc7SUd3VkgsZUFBQTtJQUNBLDJCQUFBO0lBQ0EsZ0JBQUE7SUFDQSx5QkFBQTtJQUNBLG1CQUFBO0lBQ0EscUJBQUE7RUp5T0o7RUlyT0E7SUFDRSxZQUFBO0lBQ0EsZ0JBQUE7SUFDQSxpQkFBQTtFSnVPRjtFSXBPQTtJRm5YQSxhQUFBO0lBQ0EsOEJBQUE7SUFDQSxtQkFBQTtJRW1YRSxZQUFBO0VKd09GO0VJck9BOztJQUVFLFdBQUE7SUFDQSxZQUFBO0VKdU9GO0VJck9FOztJQUNFLGFIbFhHO0VEMGxCUDtFSXBPQTs7SUFFRSxhSG5ZTztFRHltQlQ7RUluT0E7O0lBRUUsYUgzWEs7RURnbUJQO0VJbE9BO0lBQ0UsYUFBQTtJQUNBLGVBQUE7RUpvT0Y7RUloT0E7SUFDRSx1QkFBQTtJQUNBLHlCSGxaTztFRG9uQlQ7RUloT0U7SUFDRSxVQUFBO0VKa09KO0VJaE9JO0lBQ0UsY0g5WUM7SUcrWUQsZUFBQTtJQUNBLHlCQUFBO0lBQ0EsZ0JBQUE7SUFDQSxtQkFBQTtJQUNBLHFCQUFBO0VKa09OO0FBQ0Y7QUtob0JBO0VBRUU7SUFDRSxhQUFBO0VMaW9CRjtFSzluQkE7SUFDRSxvSkFBQTtJQUNBLHVDQUFBO0lBQ0EsMkNBQUE7SUFDQSxrREFBQTtFTGdvQkY7RUs5bkJFO0lBQ0UsbUJBQUE7SUFDQSxjQUFBO0VMZ29CSjtFSzduQkU7SUFDRSxZQUFBO0VMK25CSjtFSzVuQkU7SUFDRSxXQUFBO0lBQ0EsY0FBQTtJQUNBLGVBQUE7SUFDQSxtQkFBQTtFTDhuQko7RUs1bkJJO0lBQ0UsaUJBQUE7SUFDQSxlQUFBO0lBQ0EsbUJBQUE7RUw4bkJOO0VLM25CSTtJQUNFLGlCQUFBO0lBQ0EsbUJBQUE7SUFDQSxlQUFBO0lBQ0EsbUJBQUE7RUw2bkJOO0VLem5CRTtJQUNFLFdBQUE7SUFDQSxpQkFBQTtJQUNBLG1CQUFBO0lBQ0EsZUFBQTtJQUNBLG1CQUFBO0VMMm5CSjtFS3puQkk7SUFDRSxlQUFBO0VMMm5CTjtFS3ZuQkU7SUFDRSxXQUFBO0lBQ0EsY0FBQTtJQUNBLHNCQUFBO0lBQ0Esb0JBQUE7RUx5bkJKO0VLdm5CSTtJQUNFLFdBQUE7SUFDQSxlQUFBO0lBQ0EsbUJBQUE7SUFDQSxrQkFBQTtFTHluQk47RUt0bkJJO0lBQ0UsV0FBQTtJQUNBLGtCQUFBO0VMd25CTjtFS25uQkE7SUFDRSxnQkFBQTtJQUNBLGtCQUFBO0VMcW5CRjtFS2xuQkE7SUFDRSxXQUFBO0VMb25CRjtFS2huQkE7SUFDRSxnQkFBQTtFTGtuQkY7RUsvbUJBO0lBQ0UsZUFBQTtJQUNBLG1CQUFBO0VMaW5CRjtFSzdtQkU7SUFDRSxrQkFBQTtFTCttQko7RUs1bUJFO0lBQ0UsYUFBQTtJQUNBLHNCQUFBO0lBQ0EsdUJBQUE7SUFDQSw4QkFBQTtJQUNBLGlCQUFBO0lBQ0EsVUFBQTtJQUNBLFNBQUE7SUFDQSxtQkFBQTtJQUNBLHlFQUFBO0VMOG1CSjtFSzNtQkU7SUFDRSxvQkFBQTtFTDZtQko7RUsxbUJFO0lBQ0UsZUFBQTtJQUNBLG1CQUFBO0VMNG1CSjtFS3ptQkU7SUFDRSxlQUFBO0lBQ0EsbUJBQUE7RUwybUJKO0VLeG1CRTtJQUNFLGVBQUE7SUFDQSxtQkFBQTtFTDBtQko7RUt2bUJFO0lBQ0UsZUFBQTtJQUNBLGtCQUFBO0lBQ0EsYUFBQTtJQUNBLCtFQUFBO0VMeW1CSjtFS3ZtQkk7SUFDRSxtQkFBQTtFTHltQk47RUt2bUJNO0lBQ0Usc0JBQUE7RUx5bUJSO0VLcm1CTTtJQUNFLGlCQUFBO0VMdW1CUjtFS3BtQk07SUFDRSxtQkFBQTtFTHNtQlI7RUtwbUJRO0lBQ0UsVUFBQTtFTHNtQlY7RUtubUJRO0lBQ0UsVUFBQTtFTHFtQlY7RUtqbUJNO0lBQ0UsV0FBQTtJQUNBLGNBQUE7SUFDQSxtQkFBQTtFTG1tQlI7RUtobUJNO0lBQ0UsV0FBQTtJQUNBLGNBQUE7SUFDQSxlQUFBO0VMa21CUjtFSzFsQkU7SUFDRSxrQkFBQTtJQUNBLG9CQUFBO0VMNGxCSjtFS3psQkU7SUFDRSxvQkFBQTtFTDJsQko7RUt4bEJFO0lBQ0UsZUFBQTtJQUNBLG1CQUFBO0VMMGxCSjtFS3ZsQkU7SUFDRSxXQUFBO0lBQ0EsZ0JBQUE7SUFDQSxlQUFBO0lBQ0EsZUFBQTtJQUNBLG1CQUFBO0VMeWxCSjtFS3JsQkE7SUFDRSxvQkFBQTtFTHVsQkY7RUtwbEJBO0lBQ0UsU0FBQTtJQUNBLFNBQUE7SUFDQSxZQUFBO0lBQ0EsYUFBQTtJQUNBLG1FQUFBO0VMc2xCRjtFS25sQkE7SUFDRSxxQ0FBQTtJQUNBLDJEQUFBO0lBQ0EsTUFBQTtJQUNBLG1CQUFBO0VMcWxCRjtFS25sQkU7SUFDRSx1QkFBQTtJQUNBLGVBQUE7RUxxbEJKO0VLbmxCSTtJQUNFLGVBQUE7SUFDQSxpQkFBQTtFTHFsQk47RUtqbEJFO0lBQ0UsaUJBQUE7SUFDQSxhQUFBO0lBQ0EsZ0JBQUE7RUxtbEJKO0VLaGxCRTtJQUNFLGlCQUFBO0lBQ0EsYUFBQTtJQUNBLGdCQUFBO0VMa2xCSjtFSy9rQkU7SUFDRSxpQkFBQTtJQUNBLGFBQUE7SUFDQSxnQkFBQTtFTGlsQko7RUs5a0JFO0lBQ0UsaUJBQUE7SUFDQSxhQUFBO0lBQ0EsZ0JBQUE7RUxnbEJKO0VLN2tCRTtJQUNFLGlCQUFBO0lBQ0EsYUFBQTtJQUNBLGdCQUFBO0VMK2tCSjtFSzVrQkU7SUFDRSxpQkFBQTtJQUNBLGFBQUE7SUFDQSxnQkFBQTtFTDhrQko7RUsza0JFO0lBQ0UsaUJBQUE7SUFDQSxhQUFBO0lBQ0EsZ0JBQUE7RUw2a0JKO0VLM2tCSTtJQUNFLGdCQUFBO0VMNmtCTjtFS3ZrQkE7SUFDRSxjQUFBO0lIclJGLGFBQUE7SUFDQSw4QkFBQTtJQUNBLG1CQUFBO0lHcVJFLFlBQUE7SUFDQSxjQUFBO0VMMmtCRjtFS3RrQkE7O0lBRUUsV0FBQTtJQUNBLFlBQUE7SUFDQSxnQ0FBQTtFTHdrQkY7RUt0a0JFOztJQUNFLGFKeFJHO0VEaTJCUDtFS3JrQkE7O0lBRUUsYUo1Uks7RURtMkJQO0VLcGtCQTs7SUFFRSxhSjlTTztFRG8zQlQ7RUtsa0JBO0lBQ0Usa0JBQUE7RUxva0JGO0VLbGtCRTtJQUNFLGlCQUFBO0VMb2tCSjtFS2xrQkk7SUFDRSxpQkFBQTtFTG9rQk47RUtsa0JNO0lBRUUsaUJBQUE7SUFDQSxxQkFBQTtJQUNBLHVFQUFBO0VMbWtCUjtFSzdqQkE7SUFDRSxrQkFBQTtJQUNBLFdBQUE7SUFDQSxPQUFBO0lBQ0EsV0FBQTtFTCtqQkY7RUszakJBO0lBQ0UsWUFBQTtJQUNBLGNBQUE7RUw2akJGO0VLMWpCQTs7SUFFRSxXQUFBO0lBQ0EsWUFBQTtFTDRqQkY7RUt6akJBO0lBQ0UsYUFBQTtFTDJqQkY7RUt4akJBO0lBQ0UsbUJBQUE7RUwwakJGO0VLeGpCRTtJQUNFLGVBQUE7SUFDQSxtQkFBQTtFTDBqQko7RUt0akJBO0lBQ0UsdUJBQUE7RUx3akJGO0FBQ0YsQ0FBQSxxQ0FBQSIsImZpbGUiOiJzdHlsZXMuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmhlYWRlciB7XG4gIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL2NpdHkxOTIweDIucG5nXCIpLCBsaW5lYXItZ3JhZGllbnQocmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpLCByZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCkpLCB1cmwoXCIuL2ltYWdlcy9oZWFkZXJfYmFjazE5MjB4Mi5wbmdcIik7XG4gIGJhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlLCBjb3ZlciwgY292ZXI7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IDU1JSAwLCBjZW50ZXIsIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdCwgbm8tcmVwZWF0LCBuby1yZXBlYXQ7XG59XG4uaGVhZGVyX19jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogc3RhcnQ7XG4gIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBhZGRpbmc6IDI3cHggMzA0cHg7XG59XG4uaGVhZGVyX19sb2dvIHtcbiAgbWFyZ2luLWxlZnQ6IDQ1cHg7XG4gIG1hcmdpbi1ib3R0b206IDYwcHg7XG59XG4uaGVhZGVyX19sb2dvIHN2ZyB7XG4gIHdpZHRoOiAyNDVweDtcbiAgaGVpZ2h0OiAzNnB4O1xufVxuLmhlYWRlcl9fdGl0bGUge1xuICBtYXJnaW4tbGVmdDogNDVweDtcbiAgY29sb3I6ICMwNjA2MDY7XG4gIGZvbnQtc2l6ZTogNjBweDtcbiAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGxpbmUtaGVpZ2h0OiA2NnB4O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG59XG4uaGVhZGVyX190aXRsZS1jYXAge1xuICBtYXJnaW4tbGVmdDogMTM1cHg7XG4gIGNvbG9yOiAjMDYwNjA2O1xuICBmb250LXNpemU6IDYwcHg7XG4gIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICBmb250LXdlaWdodDogNDAwO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsaW5lLWhlaWdodDogNjZweDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xufVxuLmhlYWRlcl9fdGl0bGUtZWFydGgge1xuICBtYXJnaW4tbGVmdDogNzZweDtcbiAgbWFyZ2luLWJvdHRvbTogMjRweDtcbiAgY29sb3I6ICMwNjA2MDY7XG4gIGZvbnQtc2l6ZTogNjBweDtcbiAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGxpbmUtaGVpZ2h0OiA2NnB4O1xufVxuLmhlYWRlcl9fZGVzY3Ige1xuICBtYXJnaW4tbGVmdDogNTVweDtcbiAgY29sb3I6ICMxNTE1MTU7XG4gIGZvbnQtc2l6ZTogMThweDtcbiAgZm9udC1mYW1pbHk6IFwiTW9udHNlcnJhdFwiO1xuICBmb250LXdlaWdodDogNTAwO1xuICBsaW5lLWhlaWdodDogMjMuNHB4O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbi5oZWFkZXJfX2Rlc2NyLXRleHQ6bGFzdC1jaGlsZCB7XG4gIG1hcmdpbi1ib3R0b206IDM1cHg7XG59XG4uaGVhZGVyX19idG5zIHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xuICBtYXJnaW4tYm90dG9tOiAxMDBweDtcbiAgbWFyZ2luLWxlZnQ6IDQ1cHg7XG59XG4uaGVhZGVyX19idG5zIC5ibGFjay1idG4ge1xuICB3aWR0aDogNDIlO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGNvbG9yOiAjZmZmO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGJvcmRlci1jb2xvcjogIzA2MDYwNjtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzA2MDYwNjtcbn1cbi5oZWFkZXJfX2J0bnMgLmJsYWNrLWJ0bjpob3ZlciB7XG4gIGNvbG9yOiAjMUYxRjFGO1xuICBib3JkZXItY29sb3I6ICNGQkNFNTE7XG4gIGJhY2tncm91bmQtY29sb3I6ICNGQkNFNTE7XG59XG4uaGVhZGVyX19idG5zIC50cmFuc3AtYnRuIHtcbiAgd2lkdGg6IDQzJTtcbiAgcGFkZGluZy1yaWdodDogNTBweDtcbiAgcGFkZGluZy1sZWZ0OiA1MHB4O1xuICBjb2xvcjogIzMwMzAzMDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBib3JkZXItY29sb3I6ICMzMDMwMzA7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG4uaGVhZGVyX19idG5zIC50cmFuc3AtYnRuOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFGMUYxRjtcbiAgY29sb3I6ICNmZmY7XG59XG5cbiosXG4qOjpiZWZvcmUsXG4qOjphZnRlciB7XG4gIGJveC1zaXppbmc6IGluaGVyaXQ7XG59XG5cbio6Zm9jdXMtdmlzaWJsZSB7XG4gIG91dGxpbmU6IDA7XG59XG5cbioge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvR29sb3NUZXh0LVJlZ3VsYXJcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1SZWd1bGFyLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtUmVndWxhci53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL0dvbG9zVGV4dC1NZWRpdW1cIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1NZWRpdW0ud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1NZWRpdW0ud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogNTAwO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9Hb2xvc1RleHQtRGVtaUJvbGRcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1EZW1pQm9sZC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LURlbWlCb2xkLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvR29sb3NUZXh0LUJvbGRcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1Cb2xkLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtQm9sZC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvTWVycml3ZWF0aGVyIFJlZ3VsYXJcIiksIGxvY2FsKFwiZm9udHMvTWVycml3ZWF0aGVyLVJlZ3VsYXJcIiksIHVybChcImZvbnRzL01lcnJpd2VhdGhlci1SZWd1bGFyLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9NZXJyaXdlYXRoZXItUmVndWxhci53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvTWVycml3ZWF0aGVyIEJvbGRcIiksIGxvY2FsKFwiZm9udHMvTWVycml3ZWF0aGVyLUJvbGRcIiksIHVybChcImZvbnRzL01lcnJpd2VhdGhlci1Cb2xkLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9NZXJyaXdlYXRoZXItQm9sZC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJNb250c2VycmF0XCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9Nb250c2VycmF0IE1lZGl1bVwiKSwgbG9jYWwoXCJmb250cy9Nb250c2VycmF0LU1lZGl1bVwiKSwgdXJsKFwiZm9udHMvTW9udHNlcnJhdC1NZWRpdW0ud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL01vbnRzZXJyYXQtTWVkaXVtLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiTW9udHNlcnJhdFwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvTW9udHNlcnJhdCBTZW1pQm9sZFwiKSwgbG9jYWwoXCJmb250cy9Nb250c2VycmF0LVNlbWlCb2xkXCIpLCB1cmwoXCJmb250cy9Nb250c2VycmF0LVNlbWlCb2xkLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9Nb250c2VycmF0LVNlbWlCb2xkLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5ib2R5IHtcbiAgbWluLXdpZHRoOiAzMjBweDtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCIsIFwiTWVycml3ZWF0aGVyXCIsIFwiTW9udHNlcnJhdFwiLCBzYW5zLXNlcmlmO1xuICBmb250LXdlaWdodDogNDAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG59XG5cbi5jb250YWluZXIge1xuICBtYXgtd2lkdGg6IDE5MjBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG59XG5cbnNlY3Rpb24ge1xuICBwYWRkaW5nOiAyN3B4IDM0OXB4O1xufVxuXG51bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuYSB7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogaW5oZXJpdDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuXG5wLFxuaDEsXG5oMixcbmgzIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xufVxuXG5idXR0b24ge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlcjogaW5oZXJpdDtcbiAgb3V0bGluZTogaW5oZXJpdDtcbiAgYmFja2dyb3VuZDogaW5oZXJpdDtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG5pbWcge1xuICBtYXgtd2lkdGg6IDEwMCU7XG59XG5cbi52aXN1YWxseS1oaWRkZW4ge1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBvcGFjaXR5OiAwO1xufVxuXG4uaGlkZGVuLWJpZy1kZXYge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4uYnRuIHtcbiAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgbGluZS1oZWlnaHQ6IDE5cHg7XG4gIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UtaW4tb3V0O1xufVxuXG4uYnRuLWJpZyB7XG4gIHBhZGRpbmc6IDE2cHggNDVweDtcbiAgYm9yZGVyOiAycHggc29saWQ7XG4gIGJvcmRlci1yYWRpdXM6IDY2cHg7XG59XG5cbi5idG4tc21hbGwge1xuICBwYWRkaW5nOiA4cHggMTBweDtcbiAgYm9yZGVyOiAxcHggc29saWQ7XG4gIGJvcmRlci1yYWRpdXM6IDYycHg7XG59XG5cbi5saW5lIHtcbiAgbWluLWhlaWdodDogNjBweDtcbiAgcGFkZGluZzogMThweCAxMnB4O1xuICBiYWNrZ3JvdW5kOiAjRjU0OTMyO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4ubGluZV9fc3Ryb2tlIHtcbiAgd2lkdGg6IDE5MCU7XG4gIGFuaW1hdGlvbjogbWFycXVlZSAxNXMgbGluZWFyIGluZmluaXRlO1xufVxuXG4ubGluZV9fc3Ryb2tlIHN2ZyB7XG4gIHdpZHRoOiA2cHg7XG4gIGhlaWdodDogNnB4O1xuICBtYXJnaW46IDdweCAxMnB4O1xufVxuXG4ubGluZV9fc3Ryb2tlLXRleHQge1xuICBmb250LXNpemU6IDIycHg7XG4gIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICBmb250LXdlaWdodDogNDAwO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsaW5lLWhlaWdodDogMjQuMnB4O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIGNvbG9yOiAjZmZmO1xufVxuXG5Aa2V5ZnJhbWVzIG1hcnF1ZWUge1xuICAwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpO1xuICB9XG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSk7XG4gIH1cbn1cbkBtZWRpYSAobWF4LXdpZHRoOiAxMzY2cHgpIHtcbiAgLmhpZGRlbi1iaWctZGV2IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxuICBzZWN0aW9uIHtcbiAgICBwYWRkaW5nOiAwO1xuICB9XG4gIC5jb250YWluZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IHN0YXJ0O1xuICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBwYWRkaW5nOiAyNnB4IDMwcHg7XG4gIH1cbiAgLmhlYWRlciB7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvY2l0eTEzNjZ4Mi5wbmdcIiksIGxpbmVhci1ncmFkaWVudChyZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCksIHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSksIHVybChcIi4vaW1hZ2VzL2hlYWRlcl9iYWNrMTkyMHgyLnBuZ1wiKTtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyLCBjb3ZlciwgY292ZXI7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogcmlnaHQsIGNlbnRlciwgY2VudGVyO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQsIG5vLXJlcGVhdCwgbm8tcmVwZWF0O1xuICB9XG4gIC5oZWFkZXJfX3RpdGxlLWVhcnRoIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICB9XG4gIC5oZWFkZXJfX2Rlc2NyIHtcbiAgICB3aWR0aDogNDAlO1xuICAgIG1hcmdpbi1sZWZ0OiA1NXB4O1xuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICB9XG4gIC5oZWFkZXJfX2Rlc2NyLXRleHQ6bGFzdC1jaGlsZCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgfVxuICAuaGVhZGVyX19idG5zIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxMDVweDtcbiAgfVxuICAuaGVhZGVyIC5idG4tYmlnIHtcbiAgICBwYWRkaW5nOiAxNXB4IDQ1cHg7XG4gIH1cbiAgLmxpbmVfX3N0cm9rZSB7XG4gICAgd2lkdGg6IDMxNSU7XG4gIH1cbiAgLmhlbHAge1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gIH1cbiAgLmhlbHAgLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogMTA1cHggNzBweCAxNDBweDtcbiAgfVxuICAuaGVscF9fbGVjdGlvbiB7XG4gICAgbWFyZ2luOiAtMjhweCAwIDcwcHg7XG4gICAgcGFkZGluZy10b3A6IDI4cHg7XG4gICAgcGFkZGluZy1ib3R0b206IDI4cHg7XG4gICAgcGFkZGluZy1yaWdodDogMjZ2dztcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy90dXJuaXIxMzY2eDIucG5nXCIpIHJpZ2h0IDAlLzMyJSAxMDAlIG5vLXJlcGVhdDtcbiAgfVxuICAuaGVscF9fcGxheSB7XG4gICAgcGFkZGluZzogMzBweCAwO1xuICAgIHBhZGRpbmctbGVmdDogNDAuNXZ3O1xuICAgIG1hcmdpbjogLTMwcHggMDtcbiAgICBtYXJnaW4tbGVmdDogLTM1cHg7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvb25lUGxheWVyR2FtZTEzNjZ4Mi5wbmdcIikgbGVmdCA1JS80MyUgMTEyJSBuby1yZXBlYXQ7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHBhZGRpbmctdG9wOiA0NXB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IHN0YXJ0O1xuICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBtYXJnaW4tYm90dG9tOiAzNXB4O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogc3RhcnQ7XG4gICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgI0QwRDBEMDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW06Zmlyc3QtY2hpbGQge1xuICAgIHBhZGRpbmctdG9wOiAwO1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbTpsYXN0LWNoaWxkIHtcbiAgICBib3JkZXItYm90dG9tOiB0cmFuc3BhcmVudDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5pbmZvLWRlc2NyIHtcbiAgICB3aWR0aDogMjIuNXZ3O1xuICAgIHBhZGRpbmc6IDE1cHg7XG4gICAgcGFkZGluZy1sZWZ0OiAwO1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gICAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgI0QwRDBEMDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5pbmZvLWluZm8ge1xuICAgIHdpZHRoOiAyNXZ3O1xuICAgIHBhZGRpbmc6IDE1cHg7XG4gICAgcGFkZGluZy1yaWdodDogMDtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLmNyb3NzZWQge1xuICAgIC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2ggI0Y1NDkzMjtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoICNGNTQ5MzI7XG4gICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xuICB9XG4gIC5oZWxwIC5ldmVudC1kZXNjciB7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBsaW5lLWhlaWdodDogNDguNnB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAuaGVscCAuZXZlbnQtbmFtZSB7XG4gICAgY29sb3I6ICNGNTQ5MzI7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgfVxuICAuaGVscCAuZXZlbnQtY29udGFjdCB7XG4gICAgY29sb3I6ICMzMDU3QTI7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAudG91cm5hbWVudCB7XG4gICAgYmFja2dyb3VuZDogI2ZmZjtcbiAgfVxuICAudG91cm5hbWVudCAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiA1NnB4IDcycHg7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLnZhc2l1a3ktc3RlcHMge1xuICAgIG1hcmdpbi1ib3R0b206IDU0cHg7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLnZhc2l1a3ktc3RlcHMtaGVhZGVyIHtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDU0cHg7XG4gICAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGxpbmUtaGVpZ2h0OiA2NC44cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC50b3VybmFtZW50IC52YXNpdWtpLXN0ZXBzLXRleHQge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB3aWR0aDogNDIuNSU7XG4gICAgcGFkZGluZy1sZWZ0OiAyMHB4O1xuICAgIGNvbG9yOiAjMzA1N0EyO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gIH1cbiAgLnN0YWdlcyB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1ib3R0b206IDE1N3B4O1xuICB9XG4gIC5zdGFnZXM6OmFmdGVyIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogLTglO1xuICAgIGJvdHRvbTogNyU7XG4gICAgd2lkdGg6IDQ4MHB4O1xuICAgIGhlaWdodDogMjQwcHg7XG4gICAgei1pbmRleDogMTA7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvcGxhbmUxMzY2eDIucG5nXCIpIGNlbnRlci9jb250YWluIG5vLXJlcGVhdDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDMsIDFmcik7XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBtaW5tYXgoMTE0cHgsIGF1dG8pIG1pbm1heCgxMTRweCwgYXV0bykgbWlubWF4KDEzOHB4LCBhdXRvKTtcbiAgICBnYXA6IDE5cHg7XG4gICAgbWFyZ2luLWJvdHRvbTogNDBweDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUge1xuICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG4gICAgcGFkZGluZzogMjJweCAyMHB4IDVweCAyMHB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IHN0YXJ0O1xuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChyZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCksIHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSksIHVybChcIi4vaW1hZ2VzL3NsaWRlYmFjazEzNjYucG5nXCIpO1xuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXIsIGNvdmVyO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciwgY2VudGVyO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQsIG5vLXJlcGVhdDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnNsaWRlLW51bWJlciB7XG4gICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xuICAgIHBhZGRpbmc6IDdweCAxMnB4O1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIC5zbGlkZS1jb250ZW50IHtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlMyB7XG4gICAgZ3JpZC1yb3c6IDEvMztcbiAgICBncmlkLWNvbHVtbjogMztcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTcge1xuICAgIGdyaWQtcm93OiAzO1xuICAgIGdyaWQtY29sdW1uOiAyLzQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU3IC5zbGlkZS1jb250ZW50IHtcbiAgICBwYWRkaW5nLXJpZ2h0OiAyMHZ3O1xuICAgIHBhZGRpbmctbGVmdDogN3B4O1xuICB9XG4gIC5zdGFnZXNfX3N3aXBlci1uYXZpIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1ib3R0b206IDY1cHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtaW4taGVpZ2h0OiA0ODJweDtcbiAgICBvdmVyZmxvdy14OiBoaWRkZW4gIWltcG9ydGFudDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIHtcbiAgICBtaW4taGVpZ2h0OiA0ODJweDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgbWluLWhlaWdodDogNDYycHg7XG4gICAgcGFkZGluZzogMzQ4cHggMTBweCAwO1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL2Nhcm91c2VsMTM2NngyLnBuZ1wiKSB0b3AgY2VudGVyLzgwJSA3MCUgbm8tcmVwZWF0O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSAucGFydGljaXBhbnQtbmFtZSB7XG4gICAgbWFyZ2luLWJvdHRvbTogNnB4O1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICBsaW5lLWhlaWdodDogMjguOHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnBhcnRpY2lwYW50LXN0YXR1cyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSAucGFydGljaXBhbnQtbGluayB7XG4gICAgY29sb3I6ICMzMDU3QTI7XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxOS4ycHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlci1jb2xvcjogIzMwNTdBMjtcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLWluLW91dDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnBhcnRpY2lwYW50LWxpbms6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMzMDU3QTI7XG4gICAgY29sb3I6ICNmZmY7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLWhlYWQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgbWFyZ2luLWJvdHRvbTogNjJweDtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItaGVhZCAuc3dpcGVyLXRpdGxlIHtcbiAgICBmbGV4LWdyb3c6IDI7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiA1NHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBsaW5lLWhlaWdodDogNjQuOHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItbmF2aSB7XG4gICAgd2lkdGg6IDE1MnB4O1xuICAgIHBhZGRpbmctdG9wOiAzcHg7XG4gICAgcGFkZGluZy1sZWZ0OiAzcHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLWJ0bnMge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgd2lkdGg6IDE1MnB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1wcmV2IHN2ZyxcbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLW5leHQgc3ZnIHtcbiAgICB3aWR0aDogNDRweDtcbiAgICBoZWlnaHQ6IDQ0cHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLXByZXYgc3ZnIGNpcmNsZSxcbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLW5leHQgc3ZnIGNpcmNsZSB7XG4gICAgZmlsbDogIzMxMzEzMTtcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tcHJldjpob3ZlciBzdmcgY2lyY2xlLFxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tbmV4dDpob3ZlciBzdmcgY2lyY2xlIHtcbiAgICBmaWxsOiAjRkJDRTUxO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1wcmV2IC5zd2lwZXItbmF2aWdhdGlvbi1kaXNhYmxlZCBzdmcgY2lyY2xlLFxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tbmV4dCAuc3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWQgc3ZnIGNpcmNsZSB7XG4gICAgZmlsbDogI0Q2RDZENjtcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1wYWdpbmF0aW9uIHtcbiAgICBwYWRkaW5nOiAwIDklO1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgfVxuICAuZm9vdGVyIHtcbiAgICBwYWRkaW5nOiA0MHB4IDcycHggNzJweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTlERUQ0O1xuICB9XG4gIC5mb290ZXIgLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogMDtcbiAgfVxuICAuZm9vdGVyIC5jb250YWluZXIgLmZvb3Rlci10ZXh0IHtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGluZS1oZWlnaHQ6IDE5LjJweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbn1cbkBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiAyMHB4O1xuICB9XG4gIC5oZWFkZXIge1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL2NpdHkzNzV4Mi5wbmdcIiksIGxpbmVhci1ncmFkaWVudChyZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCksIHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSksIHVybChcIi4vaW1hZ2VzL2hlYWRlcl9iYWNrMzc1eDIucG5nXCIpO1xuICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJSA1MCUsIGNvdmVyLCBjb3ZlcjtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBib3R0b20sIGNlbnRlciwgY2VudGVyO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQsIG5vLXJlcGVhdCwgbm8tcmVwZWF0O1xuICB9XG4gIC5oZWFkZXJfX2xvZ28ge1xuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gIH1cbiAgLmhlYWRlcl9fbG9nbyBzdmcge1xuICAgIHdpZHRoOiAyMTNweDtcbiAgfVxuICAuaGVhZGVyX190aXRsZSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzOS42cHg7XG4gIH1cbiAgLmhlYWRlcl9fdGl0bGUtY2FwIHtcbiAgICBtYXJnaW4tbGVmdDogNjNweDtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDM5LjZweDtcbiAgfVxuICAuaGVhZGVyX190aXRsZS1lYXJ0aCB7XG4gICAgbWFyZ2luLWxlZnQ6IDMwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMjRweDtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDM5LjZweDtcbiAgfVxuICAuaGVhZGVyX19kZXNjciB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IC01cHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICBmb250LXNpemU6IDE4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDIzLjRweDtcbiAgfVxuICAuaGVhZGVyX19kZXNjci10ZXh0IHtcbiAgICBkaXNwbGF5OiBpbmxpbmU7XG4gIH1cbiAgLmhlYWRlcl9fYnRucyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBtYXJnaW4tYm90dG9tOiAyNjVweDtcbiAgfVxuICAuaGVhZGVyX19idG5zIC5ibGFjay1idG4ge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICBtYXJnaW4tYm90dG9tOiAxM3B4O1xuICAgIHBhZGRpbmc6IDE0cHggMjBweDtcbiAgfVxuICAuaGVhZGVyX19idG5zIC50cmFuc3AtYnRuIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nOiAxNHB4IDIwcHg7XG4gIH1cbiAgLmxpbmUge1xuICAgIG1pbi1oZWlnaHQ6IDM4cHg7XG4gICAgcGFkZGluZzogMTBweCAxMnB4O1xuICB9XG4gIC5saW5lX19zdHJva2Uge1xuICAgIHdpZHRoOiA1NDUlO1xuICB9XG4gIC5saW5lX19zdHJva2Ugc3ZnIHtcbiAgICBtYXJnaW46IDNweCAxMnB4O1xuICB9XG4gIC5saW5lX19zdHJva2UtdGV4dCB7XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxNy42cHg7XG4gIH1cbiAgLmhlbHAgLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogNDhweCAyMHB4O1xuICB9XG4gIC5oZWxwX19sZWN0aW9uIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1pbi1oZWlnaHQ6IDUzNnB4O1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvdHVybmlyMzc1eDIucG5nXCIpIGNlbnRlciA1MCUvMTAwJSAzOCUgbm8tcmVwZWF0O1xuICB9XG4gIC5oZWxwIC5ldmVudC1kZXNjcjpudGgtY2hpbGQoMikge1xuICAgIG1hcmdpbi1ib3R0b206IDI2MHB4O1xuICB9XG4gIC5oZWxwIC5ldmVudC1kZXNjciB7XG4gICAgZm9udC1zaXplOiAyOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzNy44cHg7XG4gIH1cbiAgLmhlbHAgLmV2ZW50LW5hbWUge1xuICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICBsaW5lLWhlaWdodDogMzcuOHB4O1xuICB9XG4gIC5oZWxwIC5ldmVudC1jb250YWN0IHtcbiAgICBmb250LXNpemU6IDE4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDIxLjZweDtcbiAgfVxuICAuaGVscF9fcGxheSB7XG4gICAgcGFkZGluZzogMCAyMHB4O1xuICAgIHBhZGRpbmctdG9wOiA0NjBweDtcbiAgICBtYXJnaW46IC0yMHB4O1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL29uZVBsYXllckdhbWUzNzV4Mi5wbmdcIikgY2VudGVyIDUlLzEwMCUgMzglIG5vLXJlcGVhdDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyM3B4O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbSB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW06bm90KDpmaXJzdC1jaGlsZCkge1xuICAgIHBhZGRpbmctdG9wOiAxM3B4O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbTpudGgtY2hpbGQoNCkge1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtOm50aC1jaGlsZCg0KSAuaW5mby1kZXNjciB7XG4gICAgd2lkdGg6IDQ3JTtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW06bnRoLWNoaWxkKDQpIC5pbmZvLWluZm8ge1xuICAgIHdpZHRoOiA0NyU7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAuaW5mby1kZXNjciB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy10b3A6IDA7XG4gICAgYm9yZGVyOiB0cmFuc3BhcmVudDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5pbmZvLWluZm8ge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctdG9wOiAwO1xuICAgIHBhZGRpbmctbGVmdDogMDtcbiAgfVxuICAudG91cm5hbWVudCAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiA5NXB4IDIwcHg7XG4gICAgcGFkZGluZy1ib3R0b206IDgwcHg7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLnZhc2l1a3ktc3RlcHMge1xuICAgIG1hcmdpbi1ib3R0b206IDE1MHB4O1xuICB9XG4gIC50b3VybmFtZW50IC52YXNpdWt5LXN0ZXBzLWhlYWRlciB7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzOS42cHg7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLnZhc2l1a2ktc3RlcHMtdGV4dCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAyMS42cHg7XG4gIH1cbiAgLnN0YWdlcyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMTE1cHg7XG4gIH1cbiAgLnN0YWdlczo6YWZ0ZXIge1xuICAgIHJpZ2h0OiAwJTtcbiAgICB0b3A6IC0zNSU7XG4gICAgd2lkdGg6IDMyN3B4O1xuICAgIGhlaWdodDogMTgycHg7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvcGxhbmUzNzV4Mi5wbmdcIikgY2VudGVyL2NvbnRhaW4gbm8tcmVwZWF0O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIge1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDUsIDFmcik7XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBtaW5tYXgoMTUwcHgsIGF1dG8pIG1pbm1heCgxNTBweCwgYXV0byk7XG4gICAgZ2FwOiAwO1xuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIHtcbiAgICB3aWR0aDogMzM1cHggIWltcG9ydGFudDtcbiAgICBwYWRkaW5nOiAwIDIwcHg7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIC5zbGlkZS1jb250ZW50IHtcbiAgICBmb250LXNpemU6IDE4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDIycHg7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGUxIHtcbiAgICBwYWRkaW5nLXRvcDogNjJweDtcbiAgICBncmlkLXJvdzogMS8yO1xuICAgIGdyaWQtY29sdW1uOiAxLzI7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGUyIHtcbiAgICBwYWRkaW5nLXRvcDogMjdweDtcbiAgICBncmlkLXJvdzogMi8zO1xuICAgIGdyaWQtY29sdW1uOiAxLzI7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGUzIHtcbiAgICBwYWRkaW5nLXRvcDogNjJweDtcbiAgICBncmlkLXJvdzogMS8zO1xuICAgIGdyaWQtY29sdW1uOiAyLzM7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU0IHtcbiAgICBwYWRkaW5nLXRvcDogNjJweDtcbiAgICBncmlkLXJvdzogMS8yO1xuICAgIGdyaWQtY29sdW1uOiAzLzQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU1IHtcbiAgICBwYWRkaW5nLXRvcDogMjdweDtcbiAgICBncmlkLXJvdzogMi8zO1xuICAgIGdyaWQtY29sdW1uOiAzLzQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU2IHtcbiAgICBwYWRkaW5nLXRvcDogNjJweDtcbiAgICBncmlkLXJvdzogMS8zO1xuICAgIGdyaWQtY29sdW1uOiA0LzU7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU3IHtcbiAgICBwYWRkaW5nLXRvcDogNjJweDtcbiAgICBncmlkLXJvdzogMS8zO1xuICAgIGdyaWQtY29sdW1uOiA1LzY7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU3IC5zbGlkZS1jb250ZW50IHtcbiAgICBwYWRkaW5nLXJpZ2h0OiAwO1xuICB9XG4gIC5zdGFnZXNfX3N3aXBlci1uYXZpIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHdpZHRoOiAxODVweDtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgfVxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tcHJldiBzdmcsXG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1uZXh0IHN2ZyB7XG4gICAgd2lkdGg6IDM2cHg7XG4gICAgaGVpZ2h0OiAzNnB4O1xuICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UtaW4tb3V0O1xuICB9XG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1wcmV2IHN2ZyBjaXJjbGUsXG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1uZXh0IHN2ZyBjaXJjbGUge1xuICAgIGZpbGw6ICMzMTMxMzE7XG4gIH1cbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLXByZXYgLnN3aXBlci1idXR0b24tZGlzYWJsZWQgc3ZnIGNpcmNsZSxcbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLW5leHQgLnN3aXBlci1idXR0b24tZGlzYWJsZWQgc3ZnIGNpcmNsZSB7XG4gICAgZmlsbDogI0Q2RDZENjtcbiAgfVxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tcHJldjpob3ZlciBzdmcgY2lyY2xlLFxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tbmV4dDpob3ZlciBzdmcgY2lyY2xlIHtcbiAgICBmaWxsOiAjRkJDRTUxO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIge1xuICAgIG1pbi1oZWlnaHQ6IDQzNXB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIge1xuICAgIG1pbi1oZWlnaHQ6IDQzNXB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSB7XG4gICAgbWluLWhlaWdodDogNDA5cHg7XG4gICAgcGFkZGluZzogMjYwcHggMTBweCAwO1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL2Nhcm91c2VsMzc1eDIucG5nXCIpIDUwJSAxMCUvNzQlIDYwJSBuby1yZXBlYXQ7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLW5hdmkge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3R0b206IC05JTtcbiAgICBsZWZ0OiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1idG5zIHtcbiAgICB3aWR0aDogMTMwcHg7XG4gICAgbWFyZ2luOiAwIGF1dG87XG4gIH1cbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLXByZXYgc3ZnLFxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tbmV4dCBzdmcge1xuICAgIHdpZHRoOiAzNnB4O1xuICAgIGhlaWdodDogMzZweDtcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1wYWdpbmF0aW9uIHtcbiAgICBwYWRkaW5nOiAwIDglO1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1oZWFkIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyM3B4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1oZWFkIC5zd2lwZXItdGl0bGUge1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICBsaW5lLWhlaWdodDogMzkuNnB4O1xuICB9XG4gIC5mb290ZXIge1xuICAgIHBhZGRpbmc6IDQwcHggMThweCA2MHB4O1xuICB9XG59LyojIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVzLmNzcy5tYXAgKi8iLCIuaGVhZGVyIHtcbiAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvY2l0eTE5MjB4Mi5wbmdcIiksIGxpbmVhci1ncmFkaWVudChyZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCksIHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSksIHVybChcIi4vaW1hZ2VzL2hlYWRlcl9iYWNrMTkyMHgyLnBuZ1wiKTtcbiAgYmFja2dyb3VuZC1zaXplOiAxMDAlIDEwMCUsIGNvdmVyLCBjb3ZlcjtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogNTUlIDAsIGNlbnRlciwgY2VudGVyO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0LCBuby1yZXBlYXQsIG5vLXJlcGVhdDtcbn1cbi5oZWFkZXJfX2NvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBzdGFydDtcbiAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgcGFkZGluZzogMjdweCAzMDRweDtcbn1cbi5oZWFkZXJfX2xvZ28ge1xuICBtYXJnaW4tbGVmdDogNDVweDtcbiAgbWFyZ2luLWJvdHRvbTogNjBweDtcbn1cbi5oZWFkZXJfX2xvZ28gc3ZnIHtcbiAgd2lkdGg6IDI0NXB4O1xuICBoZWlnaHQ6IDM2cHg7XG59XG4uaGVhZGVyX190aXRsZSB7XG4gIG1hcmdpbi1sZWZ0OiA0NXB4O1xuICBjb2xvcjogIzA2MDYwNjtcbiAgZm9udC1zaXplOiA2MHB4O1xuICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgbGluZS1oZWlnaHQ6IDY2cHg7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbn1cbi5oZWFkZXJfX3RpdGxlLWNhcCB7XG4gIG1hcmdpbi1sZWZ0OiAxMzVweDtcbiAgY29sb3I6ICMwNjA2MDY7XG4gIGZvbnQtc2l6ZTogNjBweDtcbiAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGxpbmUtaGVpZ2h0OiA2NnB4O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG59XG4uaGVhZGVyX190aXRsZS1lYXJ0aCB7XG4gIG1hcmdpbi1sZWZ0OiA3NnB4O1xuICBtYXJnaW4tYm90dG9tOiAyNHB4O1xuICBjb2xvcjogIzA2MDYwNjtcbiAgZm9udC1zaXplOiA2MHB4O1xuICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgbGluZS1oZWlnaHQ6IDY2cHg7XG59XG4uaGVhZGVyX19kZXNjciB7XG4gIG1hcmdpbi1sZWZ0OiA1NXB4O1xuICBjb2xvcjogIzE1MTUxNTtcbiAgZm9udC1zaXplOiAxOHB4O1xuICBmb250LWZhbWlseTogXCJNb250c2VycmF0XCI7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGxpbmUtaGVpZ2h0OiAyMy40cHg7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuLmhlYWRlcl9fZGVzY3ItdGV4dDpsYXN0LWNoaWxkIHtcbiAgbWFyZ2luLWJvdHRvbTogMzVweDtcbn1cbi5oZWFkZXJfX2J0bnMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4gIG1hcmdpbi1ib3R0b206IDEwMHB4O1xuICBtYXJnaW4tbGVmdDogNDVweDtcbn1cbi5oZWFkZXJfX2J0bnMgLmJsYWNrLWJ0biB7XG4gIHdpZHRoOiA0MiU7XG4gIG1hcmdpbi1yaWdodDogMTBweDtcbiAgY29sb3I6ICNmZmY7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgYm9yZGVyLWNvbG9yOiAjMDYwNjA2O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDYwNjA2O1xufVxuLmhlYWRlcl9fYnRucyAuYmxhY2stYnRuOmhvdmVyIHtcbiAgY29sb3I6ICMxRjFGMUY7XG4gIGJvcmRlci1jb2xvcjogI0ZCQ0U1MTtcbiAgYmFja2dyb3VuZC1jb2xvcjogI0ZCQ0U1MTtcbn1cbi5oZWFkZXJfX2J0bnMgLnRyYW5zcC1idG4ge1xuICB3aWR0aDogNDMlO1xuICBwYWRkaW5nLXJpZ2h0OiA1MHB4O1xuICBwYWRkaW5nLWxlZnQ6IDUwcHg7XG4gIGNvbG9yOiAjMzAzMDMwO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGJvcmRlci1jb2xvcjogIzMwMzAzMDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cbi5oZWFkZXJfX2J0bnMgLnRyYW5zcC1idG46aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMUYxRjFGO1xuICBjb2xvcjogI2ZmZjtcbn1cblxuKixcbio6OmJlZm9yZSxcbio6OmFmdGVyIHtcbiAgYm94LXNpemluZzogaW5oZXJpdDtcbn1cblxuKjpmb2N1cy12aXNpYmxlIHtcbiAgb3V0bGluZTogMDtcbn1cblxuKiB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9Hb2xvc1RleHQtUmVndWxhclwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LVJlZ3VsYXIud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1SZWd1bGFyLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvR29sb3NUZXh0LU1lZGl1bVwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LU1lZGl1bS53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LU1lZGl1bS53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL0dvbG9zVGV4dC1EZW1pQm9sZFwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LURlbWlCb2xkLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtRGVtaUJvbGQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogNjAwO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9Hb2xvc1RleHQtQm9sZFwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LUJvbGQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1Cb2xkLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9NZXJyaXdlYXRoZXIgUmVndWxhclwiKSwgbG9jYWwoXCJmb250cy9NZXJyaXdlYXRoZXItUmVndWxhclwiKSwgdXJsKFwiZm9udHMvTWVycml3ZWF0aGVyLVJlZ3VsYXIud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL01lcnJpd2VhdGhlci1SZWd1bGFyLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9NZXJyaXdlYXRoZXIgQm9sZFwiKSwgbG9jYWwoXCJmb250cy9NZXJyaXdlYXRoZXItQm9sZFwiKSwgdXJsKFwiZm9udHMvTWVycml3ZWF0aGVyLUJvbGQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL01lcnJpd2VhdGhlci1Cb2xkLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIk1vbnRzZXJyYXRcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL01vbnRzZXJyYXQgTWVkaXVtXCIpLCBsb2NhbChcImZvbnRzL01vbnRzZXJyYXQtTWVkaXVtXCIpLCB1cmwoXCJmb250cy9Nb250c2VycmF0LU1lZGl1bS53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvTW9udHNlcnJhdC1NZWRpdW0ud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogNTAwO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJNb250c2VycmF0XCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9Nb250c2VycmF0IFNlbWlCb2xkXCIpLCBsb2NhbChcImZvbnRzL01vbnRzZXJyYXQtU2VtaUJvbGRcIiksIHVybChcImZvbnRzL01vbnRzZXJyYXQtU2VtaUJvbGQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL01vbnRzZXJyYXQtU2VtaUJvbGQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogNjAwO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbmJvZHkge1xuICBtaW4td2lkdGg6IDMyMHB4O1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDA7XG4gIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIiwgXCJNZXJyaXdlYXRoZXJcIiwgXCJNb250c2VycmF0XCIsIHNhbnMtc2VyaWY7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcbn1cblxuLmNvbnRhaW5lciB7XG4gIG1heC13aWR0aDogMTkyMHB4O1xuICBtYXJnaW46IDAgYXV0bztcbn1cblxuc2VjdGlvbiB7XG4gIHBhZGRpbmc6IDI3cHggMzQ5cHg7XG59XG5cbnVsIHtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xufVxuXG5hIHtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGNvbG9yOiBpbmhlcml0O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59XG5cbnAsXG5oMSxcbmgyLFxuaDMge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG59XG5cbmJ1dHRvbiB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiBpbmhlcml0O1xuICBvdXRsaW5lOiBpbmhlcml0O1xuICBiYWNrZ3JvdW5kOiBpbmhlcml0O1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbmltZyB7XG4gIG1heC13aWR0aDogMTAwJTtcbn1cblxuLnZpc3VhbGx5LWhpZGRlbiB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG9wYWNpdHk6IDA7XG59XG5cbi5oaWRkZW4tYmlnLWRldiB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi5idG4ge1xuICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LXdlaWdodDogNTAwO1xuICBsaW5lLWhlaWdodDogMTlweDtcbiAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZS1pbi1vdXQ7XG59XG5cbi5idG4tYmlnIHtcbiAgcGFkZGluZzogMTZweCA0NXB4O1xuICBib3JkZXI6IDJweCBzb2xpZDtcbiAgYm9yZGVyLXJhZGl1czogNjZweDtcbn1cblxuLmJ0bi1zbWFsbCB7XG4gIHBhZGRpbmc6IDhweCAxMHB4O1xuICBib3JkZXI6IDFweCBzb2xpZDtcbiAgYm9yZGVyLXJhZGl1czogNjJweDtcbn1cblxuLmxpbmUge1xuICBtaW4taGVpZ2h0OiA2MHB4O1xuICBwYWRkaW5nOiAxOHB4IDEycHg7XG4gIGJhY2tncm91bmQ6ICNGNTQ5MzI7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi5saW5lX19zdHJva2Uge1xuICB3aWR0aDogMTkwJTtcbiAgYW5pbWF0aW9uOiBtYXJxdWVlIDE1cyBsaW5lYXIgaW5maW5pdGU7XG59XG5cbi5saW5lX19zdHJva2Ugc3ZnIHtcbiAgd2lkdGg6IDZweDtcbiAgaGVpZ2h0OiA2cHg7XG4gIG1hcmdpbjogN3B4IDEycHg7XG59XG5cbi5saW5lX19zdHJva2UtdGV4dCB7XG4gIGZvbnQtc2l6ZTogMjJweDtcbiAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGxpbmUtaGVpZ2h0OiAyNC4ycHg7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgY29sb3I6ICNmZmY7XG59XG5cbkBrZXlmcmFtZXMgbWFycXVlZSB7XG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMTAwJSk7XG4gIH1cbiAgMTAwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTtcbiAgfVxufVxuQG1lZGlhIChtYXgtd2lkdGg6IDEzNjZweCkge1xuICAuaGlkZGVuLWJpZy1kZXYge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICB9XG4gIHNlY3Rpb24ge1xuICAgIHBhZGRpbmc6IDA7XG4gIH1cbiAgLmNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogc3RhcnQ7XG4gICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIHBhZGRpbmc6IDI2cHggMzBweDtcbiAgfVxuICAuaGVhZGVyIHtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9jaXR5MTM2NngyLnBuZ1wiKSwgbGluZWFyLWdyYWRpZW50KHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSwgcmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpKSwgdXJsKFwiLi9pbWFnZXMvaGVhZGVyX2JhY2sxOTIweDIucG5nXCIpO1xuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXIsIGNvdmVyLCBjb3ZlcjtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiByaWdodCwgY2VudGVyLCBjZW50ZXI7XG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdCwgbm8tcmVwZWF0LCBuby1yZXBlYXQ7XG4gIH1cbiAgLmhlYWRlcl9fdGl0bGUtZWFydGgge1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIH1cbiAgLmhlYWRlcl9fZGVzY3Ige1xuICAgIHdpZHRoOiA0MCU7XG4gICAgbWFyZ2luLWxlZnQ6IDU1cHg7XG4gICAgbWFyZ2luLWJvdHRvbTogNDBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gIH1cbiAgLmhlYWRlcl9fZGVzY3ItdGV4dDpsYXN0LWNoaWxkIHtcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xuICB9XG4gIC5oZWFkZXJfX2J0bnMge1xuICAgIG1hcmdpbi1ib3R0b206IDEwNXB4O1xuICB9XG4gIC5oZWFkZXIgLmJ0bi1iaWcge1xuICAgIHBhZGRpbmc6IDE1cHggNDVweDtcbiAgfVxuICAubGluZV9fc3Ryb2tlIHtcbiAgICB3aWR0aDogMzE1JTtcbiAgfVxuICAuaGVscCB7XG4gICAgYmFja2dyb3VuZDogI2ZmZjtcbiAgfVxuICAuaGVscCAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiAxMDVweCA3MHB4IDE0MHB4O1xuICB9XG4gIC5oZWxwX19sZWN0aW9uIHtcbiAgICBtYXJnaW46IC0yOHB4IDAgNzBweDtcbiAgICBwYWRkaW5nLXRvcDogMjhweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMjhweDtcbiAgICBwYWRkaW5nLXJpZ2h0OiAyNnZ3O1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL3R1cm5pcjEzNjZ4Mi5wbmdcIikgcmlnaHQgMCUvMzIlIDEwMCUgbm8tcmVwZWF0O1xuICB9XG4gIC5oZWxwX19wbGF5IHtcbiAgICBwYWRkaW5nOiAzMHB4IDA7XG4gICAgcGFkZGluZy1sZWZ0OiA0MC41dnc7XG4gICAgbWFyZ2luOiAtMzBweCAwO1xuICAgIG1hcmdpbi1sZWZ0OiAtMzVweDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9vbmVQbGF5ZXJHYW1lMTM2NngyLnBuZ1wiKSBsZWZ0IDUlLzQzJSAxMTIlIG5vLXJlcGVhdDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgcGFkZGluZy10b3A6IDQ1cHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogc3RhcnQ7XG4gICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIG1hcmdpbi1ib3R0b206IDM1cHg7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBzdGFydDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjRDBEMEQwO1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbTpmaXJzdC1jaGlsZCB7XG4gICAgcGFkZGluZy10b3A6IDA7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtOmxhc3QtY2hpbGQge1xuICAgIGJvcmRlci1ib3R0b206IHRyYW5zcGFyZW50O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLmluZm8tZGVzY3Ige1xuICAgIHdpZHRoOiAyMi41dnc7XG4gICAgcGFkZGluZzogMTVweDtcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZCAjRDBEMEQwO1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLmluZm8taW5mbyB7XG4gICAgd2lkdGg6IDI1dnc7XG4gICAgcGFkZGluZzogMTVweDtcbiAgICBwYWRkaW5nLXJpZ2h0OiAwO1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAuY3Jvc3NlZCB7XG4gICAgLXdlYmtpdC10ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaCAjRjU0OTMyO1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2ggI0Y1NDkzMjtcbiAgICBtYXJnaW4tcmlnaHQ6IDE1cHg7XG4gIH1cbiAgLmhlbHAgLmV2ZW50LWRlc2NyIHtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gICAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGxpbmUtaGVpZ2h0OiA0OC42cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC5oZWxwIC5ldmVudC1uYW1lIHtcbiAgICBjb2xvcjogI0Y1NDkzMjtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gICAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICB9XG4gIC5oZWxwIC5ldmVudC1jb250YWN0IHtcbiAgICBjb2xvcjogIzMwNTdBMjtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC50b3VybmFtZW50IHtcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICB9XG4gIC50b3VybmFtZW50IC5jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDU2cHggNzJweDtcbiAgfVxuICAudG91cm5hbWVudCAudmFzaXVreS1zdGVwcyB7XG4gICAgbWFyZ2luLWJvdHRvbTogNTRweDtcbiAgfVxuICAudG91cm5hbWVudCAudmFzaXVreS1zdGVwcy1oZWFkZXIge1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogNTRweDtcbiAgICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgbGluZS1oZWlnaHQ6IDY0LjhweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLnZhc2l1a2ktc3RlcHMtdGV4dCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiA0Mi41JTtcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XG4gICAgY29sb3I6ICMzMDU3QTI7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgfVxuICAuc3RhZ2VzIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWJvdHRvbTogMTU3cHg7XG4gIH1cbiAgLnN0YWdlczo6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiAtOCU7XG4gICAgYm90dG9tOiA3JTtcbiAgICB3aWR0aDogNDgwcHg7XG4gICAgaGVpZ2h0OiAyNDBweDtcbiAgICB6LWluZGV4OiAxMDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9wbGFuZTEzNjZ4Mi5wbmdcIikgY2VudGVyL2NvbnRhaW4gbm8tcmVwZWF0O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywgMWZyKTtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IG1pbm1heCgxMTRweCwgYXV0bykgbWlubWF4KDExNHB4LCBhdXRvKSBtaW5tYXgoMTM4cHgsIGF1dG8pO1xuICAgIGdhcDogMTlweDtcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSB7XG4gICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcbiAgICBwYWRkaW5nOiAyMnB4IDIwcHggNXB4IDIwcHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogc3RhcnQ7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSwgcmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpKSwgdXJsKFwiLi9pbWFnZXMvc2xpZGViYWNrMTM2Ni5wbmdcIik7XG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlciwgY292ZXI7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyLCBjZW50ZXI7XG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdCwgbm8tcmVwZWF0O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSAuc2xpZGUtbnVtYmVyIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDE1cHg7XG4gICAgcGFkZGluZzogN3B4IDEycHg7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNjAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnNsaWRlLWNvbnRlbnQge1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGUzIHtcbiAgICBncmlkLXJvdzogMS8zO1xuICAgIGdyaWQtY29sdW1uOiAzO1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlNyB7XG4gICAgZ3JpZC1yb3c6IDM7XG4gICAgZ3JpZC1jb2x1bW46IDIvNDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTcgLnNsaWRlLWNvbnRlbnQge1xuICAgIHBhZGRpbmctcmlnaHQ6IDIwdnc7XG4gICAgcGFkZGluZy1sZWZ0OiA3cHg7XG4gIH1cbiAgLnN0YWdlc19fc3dpcGVyLW5hdmkge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWJvdHRvbTogNjVweDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1pbi1oZWlnaHQ6IDQ4MnB4O1xuICAgIG92ZXJmbG93LXg6IGhpZGRlbiAhaW1wb3J0YW50O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIge1xuICAgIG1pbi1oZWlnaHQ6IDQ4MnB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICBtaW4taGVpZ2h0OiA0NjJweDtcbiAgICBwYWRkaW5nOiAzNDhweCAxMHB4IDA7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvY2Fyb3VzZWwxMzY2eDIucG5nXCIpIHRvcCBjZW50ZXIvODAlIDcwJSBuby1yZXBlYXQ7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIC5wYXJ0aWNpcGFudC1uYW1lIHtcbiAgICBtYXJnaW4tYm90dG9tOiA2cHg7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAyNHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNjAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyOC44cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSAucGFydGljaXBhbnQtc3RhdHVzIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIC5wYXJ0aWNpcGFudC1saW5rIHtcbiAgICBjb2xvcjogIzMwNTdBMjtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgbGluZS1oZWlnaHQ6IDE5LjJweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyLWNvbG9yOiAjMzA1N0EyO1xuICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UtaW4tb3V0O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSAucGFydGljaXBhbnQtbGluazpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzMwNTdBMjtcbiAgICBjb2xvcjogI2ZmZjtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItaGVhZCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBtYXJnaW4tYm90dG9tOiA2MnB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1oZWFkIC5zd2lwZXItdGl0bGUge1xuICAgIGZsZXgtZ3JvdzogMjtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDU0cHg7XG4gICAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGxpbmUtaGVpZ2h0OiA2NC44cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1uYXZpIHtcbiAgICB3aWR0aDogMTUycHg7XG4gICAgcGFkZGluZy10b3A6IDNweDtcbiAgICBwYWRkaW5nLWxlZnQ6IDNweDtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItYnRucyB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB3aWR0aDogMTUycHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLXByZXYgc3ZnLFxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tbmV4dCBzdmcge1xuICAgIHdpZHRoOiA0NHB4O1xuICAgIGhlaWdodDogNDRweDtcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tcHJldiBzdmcgY2lyY2xlLFxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tbmV4dCBzdmcgY2lyY2xlIHtcbiAgICBmaWxsOiAjMzEzMTMxO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1wcmV2OmhvdmVyIHN2ZyBjaXJjbGUsXG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1uZXh0OmhvdmVyIHN2ZyBjaXJjbGUge1xuICAgIGZpbGw6ICNGQkNFNTE7XG4gIH1cbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLXByZXYgLnN3aXBlci1uYXZpZ2F0aW9uLWRpc2FibGVkIHN2ZyBjaXJjbGUsXG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1uZXh0IC5zd2lwZXItbmF2aWdhdGlvbi1kaXNhYmxlZCBzdmcgY2lyY2xlIHtcbiAgICBmaWxsOiAjRDZENkQ2O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLXBhZ2luYXRpb24ge1xuICAgIHBhZGRpbmc6IDAgOSU7XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICB9XG4gIC5mb290ZXIge1xuICAgIHBhZGRpbmc6IDQwcHggNzJweCA3MnB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNFOURFRDQ7XG4gIH1cbiAgLmZvb3RlciAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiAwO1xuICB9XG4gIC5mb290ZXIgLmNvbnRhaW5lciAuZm9vdGVyLXRleHQge1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBsaW5lLWhlaWdodDogMTkuMnB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxufVxuQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gIC5jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDIwcHg7XG4gIH1cbiAgLmhlYWRlciB7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvY2l0eTM3NXgyLnBuZ1wiKSwgbGluZWFyLWdyYWRpZW50KHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSwgcmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpKSwgdXJsKFwiLi9pbWFnZXMvaGVhZGVyX2JhY2szNzV4Mi5wbmdcIik7XG4gICAgYmFja2dyb3VuZC1zaXplOiAxMDAlIDUwJSwgY292ZXIsIGNvdmVyO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGJvdHRvbSwgY2VudGVyLCBjZW50ZXI7XG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdCwgbm8tcmVwZWF0LCBuby1yZXBlYXQ7XG4gIH1cbiAgLmhlYWRlcl9fbG9nbyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICBtYXJnaW4tbGVmdDogMDtcbiAgfVxuICAuaGVhZGVyX19sb2dvIHN2ZyB7XG4gICAgd2lkdGg6IDIxM3B4O1xuICB9XG4gIC5oZWFkZXJfX3RpdGxlIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogMDtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDM5LjZweDtcbiAgfVxuICAuaGVhZGVyX190aXRsZS1jYXAge1xuICAgIG1hcmdpbi1sZWZ0OiA2M3B4O1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICBsaW5lLWhlaWdodDogMzkuNnB4O1xuICB9XG4gIC5oZWFkZXJfX3RpdGxlLWVhcnRoIHtcbiAgICBtYXJnaW4tbGVmdDogMzBweDtcbiAgICBtYXJnaW4tYm90dG9tOiAyNHB4O1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICBsaW5lLWhlaWdodDogMzkuNnB4O1xuICB9XG4gIC5oZWFkZXJfX2Rlc2NyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogLTVweDtcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICBsaW5lLWhlaWdodDogMjMuNHB4O1xuICB9XG4gIC5oZWFkZXJfX2Rlc2NyLXRleHQge1xuICAgIGRpc3BsYXk6IGlubGluZTtcbiAgfVxuICAuaGVhZGVyX19idG5zIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogMDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIG1hcmdpbi1ib3R0b206IDI2NXB4O1xuICB9XG4gIC5oZWFkZXJfX2J0bnMgLmJsYWNrLWJ0biB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgIG1hcmdpbi1ib3R0b206IDEzcHg7XG4gICAgcGFkZGluZzogMTRweCAyMHB4O1xuICB9XG4gIC5oZWFkZXJfX2J0bnMgLnRyYW5zcC1idG4ge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmc6IDE0cHggMjBweDtcbiAgfVxuICAubGluZSB7XG4gICAgbWluLWhlaWdodDogMzhweDtcbiAgICBwYWRkaW5nOiAxMHB4IDEycHg7XG4gIH1cbiAgLmxpbmVfX3N0cm9rZSB7XG4gICAgd2lkdGg6IDU0NSU7XG4gIH1cbiAgLmxpbmVfX3N0cm9rZSBzdmcge1xuICAgIG1hcmdpbjogM3B4IDEycHg7XG4gIH1cbiAgLmxpbmVfX3N0cm9rZS10ZXh0IHtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDE3LjZweDtcbiAgfVxuICAuaGVscCAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiA0OHB4IDIwcHg7XG4gIH1cbiAgLmhlbHBfX2xlY3Rpb24ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgbWluLWhlaWdodDogNTM2cHg7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy90dXJuaXIzNzV4Mi5wbmdcIikgY2VudGVyIDUwJS8xMDAlIDM4JSBuby1yZXBlYXQ7XG4gIH1cbiAgLmhlbHAgLmV2ZW50LWRlc2NyOm50aC1jaGlsZCgyKSB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjYwcHg7XG4gIH1cbiAgLmhlbHAgLmV2ZW50LWRlc2NyIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDM3LjhweDtcbiAgfVxuICAuaGVscCAuZXZlbnQtbmFtZSB7XG4gICAgZm9udC1zaXplOiAyOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzNy44cHg7XG4gIH1cbiAgLmhlbHAgLmV2ZW50LWNvbnRhY3Qge1xuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICBsaW5lLWhlaWdodDogMjEuNnB4O1xuICB9XG4gIC5oZWxwX19wbGF5IHtcbiAgICBwYWRkaW5nOiAwIDIwcHg7XG4gICAgcGFkZGluZy10b3A6IDQ2MHB4O1xuICAgIG1hcmdpbjogLTIwcHg7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvb25lUGxheWVyR2FtZTM3NXgyLnBuZ1wiKSBjZW50ZXIgNSUvMTAwJSAzOCUgbm8tcmVwZWF0O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8ge1xuICAgIG1hcmdpbi1ib3R0b206IDIzcHg7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtIHtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbTpub3QoOmZpcnN0LWNoaWxkKSB7XG4gICAgcGFkZGluZy10b3A6IDEzcHg7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtOm50aC1jaGlsZCg0KSB7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW06bnRoLWNoaWxkKDQpIC5pbmZvLWRlc2NyIHtcbiAgICB3aWR0aDogNDclO1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbTpudGgtY2hpbGQoNCkgLmluZm8taW5mbyB7XG4gICAgd2lkdGg6IDQ3JTtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5pbmZvLWRlc2NyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLXRvcDogMDtcbiAgICBib3JkZXI6IHRyYW5zcGFyZW50O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLmluZm8taW5mbyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy10b3A6IDA7XG4gICAgcGFkZGluZy1sZWZ0OiAwO1xuICB9XG4gIC50b3VybmFtZW50IC5jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDk1cHggMjBweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogODBweDtcbiAgfVxuICAudG91cm5hbWVudCAudmFzaXVreS1zdGVwcyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMTUwcHg7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLnZhc2l1a3ktc3RlcHMtaGVhZGVyIHtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDM5LjZweDtcbiAgfVxuICAudG91cm5hbWVudCAudmFzaXVraS1zdGVwcy10ZXh0IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICBmb250LXNpemU6IDE4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDIxLjZweDtcbiAgfVxuICAuc3RhZ2VzIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxMTVweDtcbiAgfVxuICAuc3RhZ2VzOjphZnRlciB7XG4gICAgcmlnaHQ6IDAlO1xuICAgIHRvcDogLTM1JTtcbiAgICB3aWR0aDogMzI3cHg7XG4gICAgaGVpZ2h0OiAxODJweDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9wbGFuZTM3NXgyLnBuZ1wiKSBjZW50ZXIvY29udGFpbiBuby1yZXBlYXQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciB7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNSwgMWZyKTtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IG1pbm1heCgxNTBweCwgYXV0bykgbWlubWF4KDE1MHB4LCBhdXRvKTtcbiAgICBnYXA6IDA7XG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUge1xuICAgIHdpZHRoOiAzMzVweCAhaW1wb3J0YW50O1xuICAgIHBhZGRpbmc6IDAgMjBweDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnNsaWRlLWNvbnRlbnQge1xuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICBsaW5lLWhlaWdodDogMjJweDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTEge1xuICAgIHBhZGRpbmctdG9wOiA2MnB4O1xuICAgIGdyaWQtcm93OiAxLzI7XG4gICAgZ3JpZC1jb2x1bW46IDEvMjtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTIge1xuICAgIHBhZGRpbmctdG9wOiAyN3B4O1xuICAgIGdyaWQtcm93OiAyLzM7XG4gICAgZ3JpZC1jb2x1bW46IDEvMjtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTMge1xuICAgIHBhZGRpbmctdG9wOiA2MnB4O1xuICAgIGdyaWQtcm93OiAxLzM7XG4gICAgZ3JpZC1jb2x1bW46IDIvMztcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTQge1xuICAgIHBhZGRpbmctdG9wOiA2MnB4O1xuICAgIGdyaWQtcm93OiAxLzI7XG4gICAgZ3JpZC1jb2x1bW46IDMvNDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTUge1xuICAgIHBhZGRpbmctdG9wOiAyN3B4O1xuICAgIGdyaWQtcm93OiAyLzM7XG4gICAgZ3JpZC1jb2x1bW46IDMvNDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTYge1xuICAgIHBhZGRpbmctdG9wOiA2MnB4O1xuICAgIGdyaWQtcm93OiAxLzM7XG4gICAgZ3JpZC1jb2x1bW46IDQvNTtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTcge1xuICAgIHBhZGRpbmctdG9wOiA2MnB4O1xuICAgIGdyaWQtcm93OiAxLzM7XG4gICAgZ3JpZC1jb2x1bW46IDUvNjtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTcgLnNsaWRlLWNvbnRlbnQge1xuICAgIHBhZGRpbmctcmlnaHQ6IDA7XG4gIH1cbiAgLnN0YWdlc19fc3dpcGVyLW5hdmkge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgd2lkdGg6IDE4NXB4O1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICB9XG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1wcmV2IHN2ZyxcbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLW5leHQgc3ZnIHtcbiAgICB3aWR0aDogMzZweDtcbiAgICBoZWlnaHQ6IDM2cHg7XG4gICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZS1pbi1vdXQ7XG4gIH1cbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLXByZXYgc3ZnIGNpcmNsZSxcbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLW5leHQgc3ZnIGNpcmNsZSB7XG4gICAgZmlsbDogIzMxMzEzMTtcbiAgfVxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tcHJldiAuc3dpcGVyLWJ1dHRvbi1kaXNhYmxlZCBzdmcgY2lyY2xlLFxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tbmV4dCAuc3dpcGVyLWJ1dHRvbi1kaXNhYmxlZCBzdmcgY2lyY2xlIHtcbiAgICBmaWxsOiAjRDZENkQ2O1xuICB9XG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1wcmV2OmhvdmVyIHN2ZyBjaXJjbGUsXG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1uZXh0OmhvdmVyIHN2ZyBjaXJjbGUge1xuICAgIGZpbGw6ICNGQkNFNTE7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciB7XG4gICAgbWluLWhlaWdodDogNDM1cHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciB7XG4gICAgbWluLWhlaWdodDogNDM1cHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIHtcbiAgICBtaW4taGVpZ2h0OiA0MDlweDtcbiAgICBwYWRkaW5nOiAyNjBweCAxMHB4IDA7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvY2Fyb3VzZWwzNzV4Mi5wbmdcIikgNTAlIDEwJS83NCUgNjAlIG5vLXJlcGVhdDtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItbmF2aSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogLTklO1xuICAgIGxlZnQ6IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLWJ0bnMge1xuICAgIHdpZHRoOiAxMzBweDtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tcHJldiBzdmcsXG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1uZXh0IHN2ZyB7XG4gICAgd2lkdGg6IDM2cHg7XG4gICAgaGVpZ2h0OiAzNnB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLXBhZ2luYXRpb24ge1xuICAgIHBhZGRpbmc6IDAgOCU7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLWhlYWQge1xuICAgIG1hcmdpbi1ib3R0b206IDIzcHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLWhlYWQgLnN3aXBlci10aXRsZSB7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzOS42cHg7XG4gIH1cbiAgLmZvb3RlciB7XG4gICAgcGFkZGluZzogNDBweCAxOHB4IDYwcHg7XG4gIH1cbn0vKiMgc291cmNlTWFwcGluZ1VSTD1zdHlsZXMuY3NzLm1hcCAqLyIsIi5oZWFkZXIge1xuICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9jaXR5MTkyMHgyLnBuZ1wiKSwgbGluZWFyLWdyYWRpZW50KHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSwgcmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpKSwgdXJsKFwiLi9pbWFnZXMvaGVhZGVyX2JhY2sxOTIweDIucG5nXCIpO1xuICBiYWNrZ3JvdW5kLXNpemU6IDEwMCUgMTAwJSwgY292ZXIsIGNvdmVyO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiA1NSUgMCwgY2VudGVyLCBjZW50ZXI7XG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQsIG5vLXJlcGVhdCwgbm8tcmVwZWF0O1xufVxuLmhlYWRlcl9fY29udGFpbmVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IHN0YXJ0O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwYWRkaW5nOiAyN3B4IDMwNHB4O1xufVxuLmhlYWRlcl9fbG9nbyB7XG4gIG1hcmdpbi1sZWZ0OiA0NXB4O1xuICBtYXJnaW4tYm90dG9tOiA2MHB4O1xufVxuLmhlYWRlcl9fbG9nbyBzdmcge1xuICB3aWR0aDogMjQ1cHg7XG4gIGhlaWdodDogMzZweDtcbn1cbi5oZWFkZXJfX3RpdGxlIHtcbiAgbWFyZ2luLWxlZnQ6IDQ1cHg7XG4gIGNvbG9yOiAjMDYwNjA2O1xuICBmb250LXNpemU6IDYwcHg7XG4gIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICBmb250LXdlaWdodDogNDAwO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsaW5lLWhlaWdodDogNjZweDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xufVxuLmhlYWRlcl9fdGl0bGUtY2FwIHtcbiAgbWFyZ2luLWxlZnQ6IDEzNXB4O1xuICBjb2xvcjogIzA2MDYwNjtcbiAgZm9udC1zaXplOiA2MHB4O1xuICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgbGluZS1oZWlnaHQ6IDY2cHg7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbn1cbi5oZWFkZXJfX3RpdGxlLWVhcnRoIHtcbiAgbWFyZ2luLWxlZnQ6IDc2cHg7XG4gIG1hcmdpbi1ib3R0b206IDI0cHg7XG4gIGNvbG9yOiAjMDYwNjA2O1xuICBmb250LXNpemU6IDYwcHg7XG4gIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICBmb250LXdlaWdodDogNDAwO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsaW5lLWhlaWdodDogNjZweDtcbn1cbi5oZWFkZXJfX2Rlc2NyIHtcbiAgbWFyZ2luLWxlZnQ6IDU1cHg7XG4gIGNvbG9yOiAjMTUxNTE1O1xuICBmb250LXNpemU6IDE4cHg7XG4gIGZvbnQtZmFtaWx5OiBcIk1vbnRzZXJyYXRcIjtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgbGluZS1oZWlnaHQ6IDIzLjRweDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4uaGVhZGVyX19kZXNjci10ZXh0Omxhc3QtY2hpbGQge1xuICBtYXJnaW4tYm90dG9tOiAzNXB4O1xufVxuLmhlYWRlcl9fYnRucyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgbWFyZ2luLWJvdHRvbTogMTAwcHg7XG4gIG1hcmdpbi1sZWZ0OiA0NXB4O1xufVxuLmhlYWRlcl9fYnRucyAuYmxhY2stYnRuIHtcbiAgd2lkdGg6IDQyJTtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICBjb2xvcjogI2ZmZjtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBib3JkZXItY29sb3I6ICMwNjA2MDY7XG4gIGJhY2tncm91bmQtY29sb3I6ICMwNjA2MDY7XG59XG4uaGVhZGVyX19idG5zIC5ibGFjay1idG46aG92ZXIge1xuICBjb2xvcjogIzFGMUYxRjtcbiAgYm9yZGVyLWNvbG9yOiAjRkJDRTUxO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkJDRTUxO1xufVxuLmhlYWRlcl9fYnRucyAudHJhbnNwLWJ0biB7XG4gIHdpZHRoOiA0MyU7XG4gIHBhZGRpbmctcmlnaHQ6IDUwcHg7XG4gIHBhZGRpbmctbGVmdDogNTBweDtcbiAgY29sb3I6ICMzMDMwMzA7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgYm9yZGVyLWNvbG9yOiAjMzAzMDMwO1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xufVxuLmhlYWRlcl9fYnRucyAudHJhbnNwLWJ0bjpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMxRjFGMUY7XG4gIGNvbG9yOiAjZmZmO1xufVxuXG4qLFxuKjo6YmVmb3JlLFxuKjo6YWZ0ZXIge1xuICBib3gtc2l6aW5nOiBpbmhlcml0O1xufVxuXG4qOmZvY3VzLXZpc2libGUge1xuICBvdXRsaW5lOiAwO1xufVxuXG4qIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL0dvbG9zVGV4dC1SZWd1bGFyXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtUmVndWxhci53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LVJlZ3VsYXIud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogNDAwO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9Hb2xvc1RleHQtTWVkaXVtXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtTWVkaXVtLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtTWVkaXVtLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvR29sb3NUZXh0LURlbWlCb2xkXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtRGVtaUJvbGQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1EZW1pQm9sZC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL0dvbG9zVGV4dC1Cb2xkXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtQm9sZC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LUJvbGQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogNzAwO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL01lcnJpd2VhdGhlciBSZWd1bGFyXCIpLCBsb2NhbChcImZvbnRzL01lcnJpd2VhdGhlci1SZWd1bGFyXCIpLCB1cmwoXCJmb250cy9NZXJyaXdlYXRoZXItUmVndWxhci53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvTWVycml3ZWF0aGVyLVJlZ3VsYXIud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL01lcnJpd2VhdGhlciBCb2xkXCIpLCBsb2NhbChcImZvbnRzL01lcnJpd2VhdGhlci1Cb2xkXCIpLCB1cmwoXCJmb250cy9NZXJyaXdlYXRoZXItQm9sZC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvTWVycml3ZWF0aGVyLUJvbGQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiTW9udHNlcnJhdFwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvTW9udHNlcnJhdCBNZWRpdW1cIiksIGxvY2FsKFwiZm9udHMvTW9udHNlcnJhdC1NZWRpdW1cIiksIHVybChcImZvbnRzL01vbnRzZXJyYXQtTWVkaXVtLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9Nb250c2VycmF0LU1lZGl1bS53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIk1vbnRzZXJyYXRcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL01vbnRzZXJyYXQgU2VtaUJvbGRcIiksIGxvY2FsKFwiZm9udHMvTW9udHNlcnJhdC1TZW1pQm9sZFwiKSwgdXJsKFwiZm9udHMvTW9udHNlcnJhdC1TZW1pQm9sZC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvTW9udHNlcnJhdC1TZW1pQm9sZC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuYm9keSB7XG4gIG1pbi13aWR0aDogMzIwcHg7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDtcbiAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiLCBcIk1lcnJpd2VhdGhlclwiLCBcIk1vbnRzZXJyYXRcIiwgc2Fucy1zZXJpZjtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xufVxuXG4uY29udGFpbmVyIHtcbiAgbWF4LXdpZHRoOiAxOTIwcHg7XG4gIG1hcmdpbjogMCBhdXRvO1xufVxuXG5zZWN0aW9uIHtcbiAgcGFkZGluZzogMjdweCAzNDlweDtcbn1cblxudWwge1xuICBsaXN0LXN0eWxlOiBub25lO1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG59XG5cbmEge1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDA7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgY29sb3I6IGluaGVyaXQ7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cblxucCxcbmgxLFxuaDIsXG5oMyB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuYnV0dG9uIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBib3JkZXI6IGluaGVyaXQ7XG4gIG91dGxpbmU6IGluaGVyaXQ7XG4gIGJhY2tncm91bmQ6IGluaGVyaXQ7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuaW1nIHtcbiAgbWF4LXdpZHRoOiAxMDAlO1xufVxuXG4udmlzdWFsbHktaGlkZGVuIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgb3BhY2l0eTogMDtcbn1cblxuLmhpZGRlbi1iaWctZGV2IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLmJ0biB7XG4gIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGxpbmUtaGVpZ2h0OiAxOXB4O1xuICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLWluLW91dDtcbn1cblxuLmJ0bi1iaWcge1xuICBwYWRkaW5nOiAxNnB4IDQ1cHg7XG4gIGJvcmRlcjogMnB4IHNvbGlkO1xuICBib3JkZXItcmFkaXVzOiA2NnB4O1xufVxuXG4uYnRuLXNtYWxsIHtcbiAgcGFkZGluZzogOHB4IDEwcHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkO1xuICBib3JkZXItcmFkaXVzOiA2MnB4O1xufVxuXG4ubGluZSB7XG4gIG1pbi1oZWlnaHQ6IDYwcHg7XG4gIHBhZGRpbmc6IDE4cHggMTJweDtcbiAgYmFja2dyb3VuZDogI0Y1NDkzMjtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLmxpbmVfX3N0cm9rZSB7XG4gIHdpZHRoOiAxOTAlO1xuICBhbmltYXRpb246IG1hcnF1ZWUgMTVzIGxpbmVhciBpbmZpbml0ZTtcbn1cblxuLmxpbmVfX3N0cm9rZSBzdmcge1xuICB3aWR0aDogNnB4O1xuICBoZWlnaHQ6IDZweDtcbiAgbWFyZ2luOiA3cHggMTJweDtcbn1cblxuLmxpbmVfX3N0cm9rZS10ZXh0IHtcbiAgZm9udC1zaXplOiAyMnB4O1xuICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgbGluZS1oZWlnaHQ6IDI0LjJweDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICBjb2xvcjogI2ZmZjtcbn1cblxuQGtleWZyYW1lcyBtYXJxdWVlIHtcbiAgMCUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKTtcbiAgfVxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpO1xuICB9XG59XG5AbWVkaWEgKG1heC13aWR0aDogMTM2NnB4KSB7XG4gIC5oaWRkZW4tYmlnLWRldiB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbiAgc2VjdGlvbiB7XG4gICAgcGFkZGluZzogMDtcbiAgfVxuICAuY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBzdGFydDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgcGFkZGluZzogMjZweCAzMHB4O1xuICB9XG4gIC5oZWFkZXIge1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL2NpdHkxMzY2eDIucG5nXCIpLCBsaW5lYXItZ3JhZGllbnQocmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpLCByZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCkpLCB1cmwoXCIuL2ltYWdlcy9oZWFkZXJfYmFjazE5MjB4Mi5wbmdcIik7XG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlciwgY292ZXIsIGNvdmVyO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IHJpZ2h0LCBjZW50ZXIsIGNlbnRlcjtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0LCBuby1yZXBlYXQsIG5vLXJlcGVhdDtcbiAgfVxuICAuaGVhZGVyX190aXRsZS1lYXJ0aCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgfVxuICAuaGVhZGVyX19kZXNjciB7XG4gICAgd2lkdGg6IDQwJTtcbiAgICBtYXJnaW4tbGVmdDogNTVweDtcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgfVxuICAuaGVhZGVyX19kZXNjci10ZXh0Omxhc3QtY2hpbGQge1xuICAgIG1hcmdpbi1ib3R0b206IDA7XG4gIH1cbiAgLmhlYWRlcl9fYnRucyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMTA1cHg7XG4gIH1cbiAgLmhlYWRlciAuYnRuLWJpZyB7XG4gICAgcGFkZGluZzogMTVweCA0NXB4O1xuICB9XG4gIC5saW5lX19zdHJva2Uge1xuICAgIHdpZHRoOiAzMTUlO1xuICB9XG4gIC5oZWxwIHtcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICB9XG4gIC5oZWxwIC5jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDEwNXB4IDcwcHggMTQwcHg7XG4gIH1cbiAgLmhlbHBfX2xlY3Rpb24ge1xuICAgIG1hcmdpbjogLTI4cHggMCA3MHB4O1xuICAgIHBhZGRpbmctdG9wOiAyOHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAyOHB4O1xuICAgIHBhZGRpbmctcmlnaHQ6IDI2dnc7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvdHVybmlyMTM2NngyLnBuZ1wiKSByaWdodCAwJS8zMiUgMTAwJSBuby1yZXBlYXQ7XG4gIH1cbiAgLmhlbHBfX3BsYXkge1xuICAgIHBhZGRpbmc6IDMwcHggMDtcbiAgICBwYWRkaW5nLWxlZnQ6IDQwLjV2dztcbiAgICBtYXJnaW46IC0zMHB4IDA7XG4gICAgbWFyZ2luLWxlZnQ6IC0zNXB4O1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL29uZVBsYXllckdhbWUxMzY2eDIucG5nXCIpIGxlZnQgNSUvNDMlIDExMiUgbm8tcmVwZWF0O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8ge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBwYWRkaW5nLXRvcDogNDVweDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBzdGFydDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgbWFyZ2luLWJvdHRvbTogMzVweDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW0ge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IHN0YXJ0O1xuICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNEMEQwRDA7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtOmZpcnN0LWNoaWxkIHtcbiAgICBwYWRkaW5nLXRvcDogMDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW06bGFzdC1jaGlsZCB7XG4gICAgYm9yZGVyLWJvdHRvbTogdHJhbnNwYXJlbnQ7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAuaW5mby1kZXNjciB7XG4gICAgd2lkdGg6IDIyLjV2dztcbiAgICBwYWRkaW5nOiAxNXB4O1xuICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICAgIGJvcmRlci1yaWdodDogMnB4IHNvbGlkICNEMEQwRDA7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAuaW5mby1pbmZvIHtcbiAgICB3aWR0aDogMjV2dztcbiAgICBwYWRkaW5nOiAxNXB4O1xuICAgIHBhZGRpbmctcmlnaHQ6IDA7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNjAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5jcm9zc2VkIHtcbiAgICAtd2Via2l0LXRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoICNGNTQ5MzI7XG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaCAjRjU0OTMyO1xuICAgIG1hcmdpbi1yaWdodDogMTVweDtcbiAgfVxuICAuaGVscCAuZXZlbnQtZGVzY3Ige1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgbGluZS1oZWlnaHQ6IDQ4LjZweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLmhlbHAgLmV2ZW50LW5hbWUge1xuICAgIGNvbG9yOiAjRjU0OTMyO1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgICBmb250LXdlaWdodDogNzAwO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIH1cbiAgLmhlbHAgLmV2ZW50LWNvbnRhY3Qge1xuICAgIGNvbG9yOiAjMzA1N0EyO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLnRvdXJuYW1lbnQge1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogNTZweCA3MnB4O1xuICB9XG4gIC50b3VybmFtZW50IC52YXNpdWt5LXN0ZXBzIHtcbiAgICBtYXJnaW4tYm90dG9tOiA1NHB4O1xuICB9XG4gIC50b3VybmFtZW50IC52YXNpdWt5LXN0ZXBzLWhlYWRlciB7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiA1NHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBsaW5lLWhlaWdodDogNjQuOHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAudG91cm5hbWVudCAudmFzaXVraS1zdGVwcy10ZXh0IHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6IDQyLjUlO1xuICAgIHBhZGRpbmctbGVmdDogMjBweDtcbiAgICBjb2xvcjogIzMwNTdBMjtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICB9XG4gIC5zdGFnZXMge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tYm90dG9tOiAxNTdweDtcbiAgfVxuICAuc3RhZ2VzOjphZnRlciB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcmlnaHQ6IC04JTtcbiAgICBib3R0b206IDclO1xuICAgIHdpZHRoOiA0ODBweDtcbiAgICBoZWlnaHQ6IDI0MHB4O1xuICAgIHotaW5kZXg6IDEwO1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL3BsYW5lMTM2NngyLnBuZ1wiKSBjZW50ZXIvY29udGFpbiBuby1yZXBlYXQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgzLCAxZnIpO1xuICAgIGdyaWQtdGVtcGxhdGUtcm93czogbWlubWF4KDExNHB4LCBhdXRvKSBtaW5tYXgoMTE0cHgsIGF1dG8pIG1pbm1heCgxMzhweCwgYXV0byk7XG4gICAgZ2FwOiAxOXB4O1xuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIHtcbiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xuICAgIHBhZGRpbmc6IDIycHggMjBweCA1cHggMjBweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBzdGFydDtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQocmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpLCByZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCkpLCB1cmwoXCIuL2ltYWdlcy9zbGlkZWJhY2sxMzY2LnBuZ1wiKTtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyLCBjb3ZlcjtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIsIGNlbnRlcjtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0LCBuby1yZXBlYXQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIC5zbGlkZS1udW1iZXIge1xuICAgIG1hcmdpbi1yaWdodDogMTVweDtcbiAgICBwYWRkaW5nOiA3cHggMTJweDtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSAuc2xpZGUtY29udGVudCB7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTMge1xuICAgIGdyaWQtcm93OiAxLzM7XG4gICAgZ3JpZC1jb2x1bW46IDM7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU3IHtcbiAgICBncmlkLXJvdzogMztcbiAgICBncmlkLWNvbHVtbjogMi80O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlNyAuc2xpZGUtY29udGVudCB7XG4gICAgcGFkZGluZy1yaWdodDogMjB2dztcbiAgICBwYWRkaW5nLWxlZnQ6IDdweDtcbiAgfVxuICAuc3RhZ2VzX19zd2lwZXItbmF2aSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuICAucGFydGljaXBhbnRzIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tYm90dG9tOiA2NXB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWluLWhlaWdodDogNDgycHg7XG4gICAgb3ZlcmZsb3cteDogaGlkZGVuICFpbXBvcnRhbnQ7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciB7XG4gICAgbWluLWhlaWdodDogNDgycHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgIG1pbi1oZWlnaHQ6IDQ2MnB4O1xuICAgIHBhZGRpbmc6IDM0OHB4IDEwcHggMDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9jYXJvdXNlbDEzNjZ4Mi5wbmdcIikgdG9wIGNlbnRlci84MCUgNzAlIG5vLXJlcGVhdDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnBhcnRpY2lwYW50LW5hbWUge1xuICAgIG1hcmdpbi1ib3R0b206IDZweDtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDI0cHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI4LjhweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIC5wYXJ0aWNpcGFudC1zdGF0dXMge1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnBhcnRpY2lwYW50LWxpbmsge1xuICAgIGNvbG9yOiAjMzA1N0EyO1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICBsaW5lLWhlaWdodDogMTkuMnB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBib3JkZXItY29sb3I6ICMzMDU3QTI7XG4gICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZS1pbi1vdXQ7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIC5wYXJ0aWNpcGFudC1saW5rOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzA1N0EyO1xuICAgIGNvbG9yOiAjZmZmO1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1oZWFkIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDYycHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLWhlYWQgLnN3aXBlci10aXRsZSB7XG4gICAgZmxleC1ncm93OiAyO1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogNTRweDtcbiAgICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgbGluZS1oZWlnaHQ6IDY0LjhweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLW5hdmkge1xuICAgIHdpZHRoOiAxNTJweDtcbiAgICBwYWRkaW5nLXRvcDogM3B4O1xuICAgIHBhZGRpbmctbGVmdDogM3B4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1idG5zIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHdpZHRoOiAxNTJweDtcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tcHJldiBzdmcsXG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1uZXh0IHN2ZyB7XG4gICAgd2lkdGg6IDQ0cHg7XG4gICAgaGVpZ2h0OiA0NHB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1wcmV2IHN2ZyBjaXJjbGUsXG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1uZXh0IHN2ZyBjaXJjbGUge1xuICAgIGZpbGw6ICMzMTMxMzE7XG4gIH1cbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLXByZXY6aG92ZXIgc3ZnIGNpcmNsZSxcbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLW5leHQ6aG92ZXIgc3ZnIGNpcmNsZSB7XG4gICAgZmlsbDogI0ZCQ0U1MTtcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tcHJldiAuc3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWQgc3ZnIGNpcmNsZSxcbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLW5leHQgLnN3aXBlci1uYXZpZ2F0aW9uLWRpc2FibGVkIHN2ZyBjaXJjbGUge1xuICAgIGZpbGw6ICNENkQ2RDY7XG4gIH1cbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItcGFnaW5hdGlvbiB7XG4gICAgcGFkZGluZzogMCA5JTtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gIH1cbiAgLmZvb3RlciB7XG4gICAgcGFkZGluZzogNDBweCA3MnB4IDcycHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0U5REVENDtcbiAgfVxuICAuZm9vdGVyIC5jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDA7XG4gIH1cbiAgLmZvb3RlciAuY29udGFpbmVyIC5mb290ZXItdGV4dCB7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxOS4ycHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG59XG5AbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogMjBweDtcbiAgfVxuICAuaGVhZGVyIHtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9jaXR5Mzc1eDIucG5nXCIpLCBsaW5lYXItZ3JhZGllbnQocmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpLCByZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCkpLCB1cmwoXCIuL2ltYWdlcy9oZWFkZXJfYmFjazM3NXgyLnBuZ1wiKTtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDEwMCUgNTAlLCBjb3ZlciwgY292ZXI7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogYm90dG9tLCBjZW50ZXIsIGNlbnRlcjtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0LCBuby1yZXBlYXQsIG5vLXJlcGVhdDtcbiAgfVxuICAuaGVhZGVyX19sb2dvIHtcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICB9XG4gIC5oZWFkZXJfX2xvZ28gc3ZnIHtcbiAgICB3aWR0aDogMjEzcHg7XG4gIH1cbiAgLmhlYWRlcl9fdGl0bGUge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICBsaW5lLWhlaWdodDogMzkuNnB4O1xuICB9XG4gIC5oZWFkZXJfX3RpdGxlLWNhcCB7XG4gICAgbWFyZ2luLWxlZnQ6IDYzcHg7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzOS42cHg7XG4gIH1cbiAgLmhlYWRlcl9fdGl0bGUtZWFydGgge1xuICAgIG1hcmdpbi1sZWZ0OiAzMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDI0cHg7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzOS42cHg7XG4gIH1cbiAgLmhlYWRlcl9fZGVzY3Ige1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1sZWZ0OiAtNXB4O1xuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAyMy40cHg7XG4gIH1cbiAgLmhlYWRlcl9fZGVzY3ItdGV4dCB7XG4gICAgZGlzcGxheTogaW5saW5lO1xuICB9XG4gIC5oZWFkZXJfX2J0bnMge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgbWFyZ2luLWJvdHRvbTogMjY1cHg7XG4gIH1cbiAgLmhlYWRlcl9fYnRucyAuYmxhY2stYnRuIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgbWFyZ2luLWJvdHRvbTogMTNweDtcbiAgICBwYWRkaW5nOiAxNHB4IDIwcHg7XG4gIH1cbiAgLmhlYWRlcl9fYnRucyAudHJhbnNwLWJ0biB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZzogMTRweCAyMHB4O1xuICB9XG4gIC5saW5lIHtcbiAgICBtaW4taGVpZ2h0OiAzOHB4O1xuICAgIHBhZGRpbmc6IDEwcHggMTJweDtcbiAgfVxuICAubGluZV9fc3Ryb2tlIHtcbiAgICB3aWR0aDogNTQ1JTtcbiAgfVxuICAubGluZV9fc3Ryb2tlIHN2ZyB7XG4gICAgbWFyZ2luOiAzcHggMTJweDtcbiAgfVxuICAubGluZV9fc3Ryb2tlLXRleHQge1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICBsaW5lLWhlaWdodDogMTcuNnB4O1xuICB9XG4gIC5oZWxwIC5jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDQ4cHggMjBweDtcbiAgfVxuICAuaGVscF9fbGVjdGlvbiB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtaW4taGVpZ2h0OiA1MzZweDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL3R1cm5pcjM3NXgyLnBuZ1wiKSBjZW50ZXIgNTAlLzEwMCUgMzglIG5vLXJlcGVhdDtcbiAgfVxuICAuaGVscCAuZXZlbnQtZGVzY3I6bnRoLWNoaWxkKDIpIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyNjBweDtcbiAgfVxuICAuaGVscCAuZXZlbnQtZGVzY3Ige1xuICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICBsaW5lLWhlaWdodDogMzcuOHB4O1xuICB9XG4gIC5oZWxwIC5ldmVudC1uYW1lIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDM3LjhweDtcbiAgfVxuICAuaGVscCAuZXZlbnQtY29udGFjdCB7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAyMS42cHg7XG4gIH1cbiAgLmhlbHBfX3BsYXkge1xuICAgIHBhZGRpbmc6IDAgMjBweDtcbiAgICBwYWRkaW5nLXRvcDogNDYwcHg7XG4gICAgbWFyZ2luOiAtMjBweDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9vbmVQbGF5ZXJHYW1lMzc1eDIucG5nXCIpIGNlbnRlciA1JS8xMDAlIDM4JSBuby1yZXBlYXQ7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjNweDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW0ge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtOm5vdCg6Zmlyc3QtY2hpbGQpIHtcbiAgICBwYWRkaW5nLXRvcDogMTNweDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW06bnRoLWNoaWxkKDQpIHtcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbTpudGgtY2hpbGQoNCkgLmluZm8tZGVzY3Ige1xuICAgIHdpZHRoOiA0NyU7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtOm50aC1jaGlsZCg0KSAuaW5mby1pbmZvIHtcbiAgICB3aWR0aDogNDclO1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLmluZm8tZGVzY3Ige1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctdG9wOiAwO1xuICAgIGJvcmRlcjogdHJhbnNwYXJlbnQ7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAuaW5mby1pbmZvIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLXRvcDogMDtcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogOTVweCAyMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiA4MHB4O1xuICB9XG4gIC50b3VybmFtZW50IC52YXNpdWt5LXN0ZXBzIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxNTBweDtcbiAgfVxuICAudG91cm5hbWVudCAudmFzaXVreS1zdGVwcy1oZWFkZXIge1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICBsaW5lLWhlaWdodDogMzkuNnB4O1xuICB9XG4gIC50b3VybmFtZW50IC52YXNpdWtpLXN0ZXBzLXRleHQge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgcGFkZGluZy1sZWZ0OiAwO1xuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICBsaW5lLWhlaWdodDogMjEuNnB4O1xuICB9XG4gIC5zdGFnZXMge1xuICAgIG1hcmdpbi1ib3R0b206IDExNXB4O1xuICB9XG4gIC5zdGFnZXM6OmFmdGVyIHtcbiAgICByaWdodDogMCU7XG4gICAgdG9wOiAtMzUlO1xuICAgIHdpZHRoOiAzMjdweDtcbiAgICBoZWlnaHQ6IDE4MnB4O1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL3BsYW5lMzc1eDIucG5nXCIpIGNlbnRlci9jb250YWluIG5vLXJlcGVhdDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIHtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCg1LCAxZnIpO1xuICAgIGdyaWQtdGVtcGxhdGUtcm93czogbWlubWF4KDE1MHB4LCBhdXRvKSBtaW5tYXgoMTUwcHgsIGF1dG8pO1xuICAgIGdhcDogMDtcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSB7XG4gICAgd2lkdGg6IDMzNXB4ICFpbXBvcnRhbnQ7XG4gICAgcGFkZGluZzogMCAyMHB4O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSAuc2xpZGUtY29udGVudCB7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAyMnB4O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlMSB7XG4gICAgcGFkZGluZy10b3A6IDYycHg7XG4gICAgZ3JpZC1yb3c6IDEvMjtcbiAgICBncmlkLWNvbHVtbjogMS8yO1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlMiB7XG4gICAgcGFkZGluZy10b3A6IDI3cHg7XG4gICAgZ3JpZC1yb3c6IDIvMztcbiAgICBncmlkLWNvbHVtbjogMS8yO1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlMyB7XG4gICAgcGFkZGluZy10b3A6IDYycHg7XG4gICAgZ3JpZC1yb3c6IDEvMztcbiAgICBncmlkLWNvbHVtbjogMi8zO1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlNCB7XG4gICAgcGFkZGluZy10b3A6IDYycHg7XG4gICAgZ3JpZC1yb3c6IDEvMjtcbiAgICBncmlkLWNvbHVtbjogMy80O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlNSB7XG4gICAgcGFkZGluZy10b3A6IDI3cHg7XG4gICAgZ3JpZC1yb3c6IDIvMztcbiAgICBncmlkLWNvbHVtbjogMy80O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlNiB7XG4gICAgcGFkZGluZy10b3A6IDYycHg7XG4gICAgZ3JpZC1yb3c6IDEvMztcbiAgICBncmlkLWNvbHVtbjogNC81O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlNyB7XG4gICAgcGFkZGluZy10b3A6IDYycHg7XG4gICAgZ3JpZC1yb3c6IDEvMztcbiAgICBncmlkLWNvbHVtbjogNS82O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlNyAuc2xpZGUtY29udGVudCB7XG4gICAgcGFkZGluZy1yaWdodDogMDtcbiAgfVxuICAuc3RhZ2VzX19zd2lwZXItbmF2aSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB3aWR0aDogMTg1cHg7XG4gICAgbWFyZ2luOiAwIGF1dG87XG4gIH1cbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLXByZXYgc3ZnLFxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tbmV4dCBzdmcge1xuICAgIHdpZHRoOiAzNnB4O1xuICAgIGhlaWdodDogMzZweDtcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLWluLW91dDtcbiAgfVxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tcHJldiBzdmcgY2lyY2xlLFxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tbmV4dCBzdmcgY2lyY2xlIHtcbiAgICBmaWxsOiAjMzEzMTMxO1xuICB9XG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1wcmV2IC5zd2lwZXItYnV0dG9uLWRpc2FibGVkIHN2ZyBjaXJjbGUsXG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1uZXh0IC5zd2lwZXItYnV0dG9uLWRpc2FibGVkIHN2ZyBjaXJjbGUge1xuICAgIGZpbGw6ICNENkQ2RDY7XG4gIH1cbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLXByZXY6aG92ZXIgc3ZnIGNpcmNsZSxcbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLW5leHQ6aG92ZXIgc3ZnIGNpcmNsZSB7XG4gICAgZmlsbDogI0ZCQ0U1MTtcbiAgfVxuICAucGFydGljaXBhbnRzIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIHtcbiAgICBtaW4taGVpZ2h0OiA0MzVweDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIHtcbiAgICBtaW4taGVpZ2h0OiA0MzVweDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUge1xuICAgIG1pbi1oZWlnaHQ6IDQwOXB4O1xuICAgIHBhZGRpbmc6IDI2MHB4IDEwcHggMDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9jYXJvdXNlbDM3NXgyLnBuZ1wiKSA1MCUgMTAlLzc0JSA2MCUgbm8tcmVwZWF0O1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1uYXZpIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYm90dG9tOiAtOSU7XG4gICAgbGVmdDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItYnRucyB7XG4gICAgd2lkdGg6IDEzMHB4O1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1wcmV2IHN2ZyxcbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLW5leHQgc3ZnIHtcbiAgICB3aWR0aDogMzZweDtcbiAgICBoZWlnaHQ6IDM2cHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItcGFnaW5hdGlvbiB7XG4gICAgcGFkZGluZzogMCA4JTtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItaGVhZCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjNweDtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItaGVhZCAuc3dpcGVyLXRpdGxlIHtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDM5LjZweDtcbiAgfVxuICAuZm9vdGVyIHtcbiAgICBwYWRkaW5nOiA0MHB4IDE4cHggNjBweDtcbiAgfVxufS8qIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlcy5jc3MubWFwICovIiwiLmhlYWRlciB7XG4gIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL2NpdHkxOTIweDIucG5nXCIpLCBsaW5lYXItZ3JhZGllbnQocmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpLCByZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCkpLCB1cmwoXCIuL2ltYWdlcy9oZWFkZXJfYmFjazE5MjB4Mi5wbmdcIik7XG4gIGJhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlLCBjb3ZlciwgY292ZXI7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IDU1JSAwLCBjZW50ZXIsIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdCwgbm8tcmVwZWF0LCBuby1yZXBlYXQ7XG59XG4uaGVhZGVyX19jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogc3RhcnQ7XG4gIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBhZGRpbmc6IDI3cHggMzA0cHg7XG59XG4uaGVhZGVyX19sb2dvIHtcbiAgbWFyZ2luLWxlZnQ6IDQ1cHg7XG4gIG1hcmdpbi1ib3R0b206IDYwcHg7XG59XG4uaGVhZGVyX19sb2dvIHN2ZyB7XG4gIHdpZHRoOiAyNDVweDtcbiAgaGVpZ2h0OiAzNnB4O1xufVxuLmhlYWRlcl9fdGl0bGUge1xuICBtYXJnaW4tbGVmdDogNDVweDtcbiAgY29sb3I6ICMwNjA2MDY7XG4gIGZvbnQtc2l6ZTogNjBweDtcbiAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGxpbmUtaGVpZ2h0OiA2NnB4O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG59XG4uaGVhZGVyX190aXRsZS1jYXAge1xuICBtYXJnaW4tbGVmdDogMTM1cHg7XG4gIGNvbG9yOiAjMDYwNjA2O1xuICBmb250LXNpemU6IDYwcHg7XG4gIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICBmb250LXdlaWdodDogNDAwO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsaW5lLWhlaWdodDogNjZweDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xufVxuLmhlYWRlcl9fdGl0bGUtZWFydGgge1xuICBtYXJnaW4tbGVmdDogNzZweDtcbiAgbWFyZ2luLWJvdHRvbTogMjRweDtcbiAgY29sb3I6ICMwNjA2MDY7XG4gIGZvbnQtc2l6ZTogNjBweDtcbiAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGxpbmUtaGVpZ2h0OiA2NnB4O1xufVxuLmhlYWRlcl9fZGVzY3Ige1xuICBtYXJnaW4tbGVmdDogNTVweDtcbiAgY29sb3I6ICMxNTE1MTU7XG4gIGZvbnQtc2l6ZTogMThweDtcbiAgZm9udC1mYW1pbHk6IFwiTW9udHNlcnJhdFwiO1xuICBmb250LXdlaWdodDogNTAwO1xuICBsaW5lLWhlaWdodDogMjMuNHB4O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbi5oZWFkZXJfX2Rlc2NyLXRleHQ6bGFzdC1jaGlsZCB7XG4gIG1hcmdpbi1ib3R0b206IDM1cHg7XG59XG4uaGVhZGVyX19idG5zIHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xuICBtYXJnaW4tYm90dG9tOiAxMDBweDtcbiAgbWFyZ2luLWxlZnQ6IDQ1cHg7XG59XG4uaGVhZGVyX19idG5zIC5ibGFjay1idG4ge1xuICB3aWR0aDogNDIlO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGNvbG9yOiAjZmZmO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGJvcmRlci1jb2xvcjogIzA2MDYwNjtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzA2MDYwNjtcbn1cbi5oZWFkZXJfX2J0bnMgLmJsYWNrLWJ0bjpob3ZlciB7XG4gIGNvbG9yOiAjMUYxRjFGO1xuICBib3JkZXItY29sb3I6ICNGQkNFNTE7XG4gIGJhY2tncm91bmQtY29sb3I6ICNGQkNFNTE7XG59XG4uaGVhZGVyX19idG5zIC50cmFuc3AtYnRuIHtcbiAgd2lkdGg6IDQzJTtcbiAgcGFkZGluZy1yaWdodDogNTBweDtcbiAgcGFkZGluZy1sZWZ0OiA1MHB4O1xuICBjb2xvcjogIzMwMzAzMDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBib3JkZXItY29sb3I6ICMzMDMwMzA7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG4uaGVhZGVyX19idG5zIC50cmFuc3AtYnRuOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFGMUYxRjtcbiAgY29sb3I6ICNmZmY7XG59XG5cbiosXG4qOjpiZWZvcmUsXG4qOjphZnRlciB7XG4gIGJveC1zaXppbmc6IGluaGVyaXQ7XG59XG5cbio6Zm9jdXMtdmlzaWJsZSB7XG4gIG91dGxpbmU6IDA7XG59XG5cbioge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvR29sb3NUZXh0LVJlZ3VsYXJcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1SZWd1bGFyLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtUmVndWxhci53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL0dvbG9zVGV4dC1NZWRpdW1cIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1NZWRpdW0ud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1NZWRpdW0ud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogNTAwO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9Hb2xvc1RleHQtRGVtaUJvbGRcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1EZW1pQm9sZC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LURlbWlCb2xkLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvR29sb3NUZXh0LUJvbGRcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1Cb2xkLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtQm9sZC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvTWVycml3ZWF0aGVyIFJlZ3VsYXJcIiksIGxvY2FsKFwiZm9udHMvTWVycml3ZWF0aGVyLVJlZ3VsYXJcIiksIHVybChcImZvbnRzL01lcnJpd2VhdGhlci1SZWd1bGFyLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9NZXJyaXdlYXRoZXItUmVndWxhci53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvTWVycml3ZWF0aGVyIEJvbGRcIiksIGxvY2FsKFwiZm9udHMvTWVycml3ZWF0aGVyLUJvbGRcIiksIHVybChcImZvbnRzL01lcnJpd2VhdGhlci1Cb2xkLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9NZXJyaXdlYXRoZXItQm9sZC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJNb250c2VycmF0XCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9Nb250c2VycmF0IE1lZGl1bVwiKSwgbG9jYWwoXCJmb250cy9Nb250c2VycmF0LU1lZGl1bVwiKSwgdXJsKFwiZm9udHMvTW9udHNlcnJhdC1NZWRpdW0ud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL01vbnRzZXJyYXQtTWVkaXVtLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiTW9udHNlcnJhdFwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvTW9udHNlcnJhdCBTZW1pQm9sZFwiKSwgbG9jYWwoXCJmb250cy9Nb250c2VycmF0LVNlbWlCb2xkXCIpLCB1cmwoXCJmb250cy9Nb250c2VycmF0LVNlbWlCb2xkLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9Nb250c2VycmF0LVNlbWlCb2xkLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5ib2R5IHtcbiAgbWluLXdpZHRoOiAzMjBweDtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCIsIFwiTWVycml3ZWF0aGVyXCIsIFwiTW9udHNlcnJhdFwiLCBzYW5zLXNlcmlmO1xuICBmb250LXdlaWdodDogNDAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG59XG5cbi5jb250YWluZXIge1xuICBtYXgtd2lkdGg6IDE5MjBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG59XG5cbnNlY3Rpb24ge1xuICBwYWRkaW5nOiAyN3B4IDM0OXB4O1xufVxuXG51bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuYSB7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogaW5oZXJpdDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuXG5wLFxuaDEsXG5oMixcbmgzIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xufVxuXG5idXR0b24ge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlcjogaW5oZXJpdDtcbiAgb3V0bGluZTogaW5oZXJpdDtcbiAgYmFja2dyb3VuZDogaW5oZXJpdDtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG5pbWcge1xuICBtYXgtd2lkdGg6IDEwMCU7XG59XG5cbi52aXN1YWxseS1oaWRkZW4ge1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBvcGFjaXR5OiAwO1xufVxuXG4uaGlkZGVuLWJpZy1kZXYge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4uYnRuIHtcbiAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgbGluZS1oZWlnaHQ6IDE5cHg7XG4gIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UtaW4tb3V0O1xufVxuXG4uYnRuLWJpZyB7XG4gIHBhZGRpbmc6IDE2cHggNDVweDtcbiAgYm9yZGVyOiAycHggc29saWQ7XG4gIGJvcmRlci1yYWRpdXM6IDY2cHg7XG59XG5cbi5idG4tc21hbGwge1xuICBwYWRkaW5nOiA4cHggMTBweDtcbiAgYm9yZGVyOiAxcHggc29saWQ7XG4gIGJvcmRlci1yYWRpdXM6IDYycHg7XG59XG5cbi5saW5lIHtcbiAgbWluLWhlaWdodDogNjBweDtcbiAgcGFkZGluZzogMThweCAxMnB4O1xuICBiYWNrZ3JvdW5kOiAjRjU0OTMyO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4ubGluZV9fc3Ryb2tlIHtcbiAgd2lkdGg6IDE5MCU7XG4gIGFuaW1hdGlvbjogbWFycXVlZSAxNXMgbGluZWFyIGluZmluaXRlO1xufVxuXG4ubGluZV9fc3Ryb2tlIHN2ZyB7XG4gIHdpZHRoOiA2cHg7XG4gIGhlaWdodDogNnB4O1xuICBtYXJnaW46IDdweCAxMnB4O1xufVxuXG4ubGluZV9fc3Ryb2tlLXRleHQge1xuICBmb250LXNpemU6IDIycHg7XG4gIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICBmb250LXdlaWdodDogNDAwO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsaW5lLWhlaWdodDogMjQuMnB4O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIGNvbG9yOiAjZmZmO1xufVxuXG5Aa2V5ZnJhbWVzIG1hcnF1ZWUge1xuICAwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpO1xuICB9XG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSk7XG4gIH1cbn1cbkBtZWRpYSAobWF4LXdpZHRoOiAxMzY2cHgpIHtcbiAgLmhpZGRlbi1iaWctZGV2IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxuICBzZWN0aW9uIHtcbiAgICBwYWRkaW5nOiAwO1xuICB9XG4gIC5jb250YWluZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IHN0YXJ0O1xuICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBwYWRkaW5nOiAyNnB4IDMwcHg7XG4gIH1cbiAgLmhlYWRlciB7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvY2l0eTEzNjZ4Mi5wbmdcIiksIGxpbmVhci1ncmFkaWVudChyZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCksIHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSksIHVybChcIi4vaW1hZ2VzL2hlYWRlcl9iYWNrMTkyMHgyLnBuZ1wiKTtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyLCBjb3ZlciwgY292ZXI7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogcmlnaHQsIGNlbnRlciwgY2VudGVyO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQsIG5vLXJlcGVhdCwgbm8tcmVwZWF0O1xuICB9XG4gIC5oZWFkZXJfX3RpdGxlLWVhcnRoIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICB9XG4gIC5oZWFkZXJfX2Rlc2NyIHtcbiAgICB3aWR0aDogNDAlO1xuICAgIG1hcmdpbi1sZWZ0OiA1NXB4O1xuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICB9XG4gIC5oZWFkZXJfX2Rlc2NyLXRleHQ6bGFzdC1jaGlsZCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgfVxuICAuaGVhZGVyX19idG5zIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxMDVweDtcbiAgfVxuICAuaGVhZGVyIC5idG4tYmlnIHtcbiAgICBwYWRkaW5nOiAxNXB4IDQ1cHg7XG4gIH1cbiAgLmxpbmVfX3N0cm9rZSB7XG4gICAgd2lkdGg6IDMxNSU7XG4gIH1cbiAgLmhlbHAge1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gIH1cbiAgLmhlbHAgLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogMTA1cHggNzBweCAxNDBweDtcbiAgfVxuICAuaGVscF9fbGVjdGlvbiB7XG4gICAgbWFyZ2luOiAtMjhweCAwIDcwcHg7XG4gICAgcGFkZGluZy10b3A6IDI4cHg7XG4gICAgcGFkZGluZy1ib3R0b206IDI4cHg7XG4gICAgcGFkZGluZy1yaWdodDogMjZ2dztcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy90dXJuaXIxMzY2eDIucG5nXCIpIHJpZ2h0IDAlLzMyJSAxMDAlIG5vLXJlcGVhdDtcbiAgfVxuICAuaGVscF9fcGxheSB7XG4gICAgcGFkZGluZzogMzBweCAwO1xuICAgIHBhZGRpbmctbGVmdDogNDAuNXZ3O1xuICAgIG1hcmdpbjogLTMwcHggMDtcbiAgICBtYXJnaW4tbGVmdDogLTM1cHg7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvb25lUGxheWVyR2FtZTEzNjZ4Mi5wbmdcIikgbGVmdCA1JS80MyUgMTEyJSBuby1yZXBlYXQ7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHBhZGRpbmctdG9wOiA0NXB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IHN0YXJ0O1xuICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBtYXJnaW4tYm90dG9tOiAzNXB4O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogc3RhcnQ7XG4gICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgI0QwRDBEMDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW06Zmlyc3QtY2hpbGQge1xuICAgIHBhZGRpbmctdG9wOiAwO1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbTpsYXN0LWNoaWxkIHtcbiAgICBib3JkZXItYm90dG9tOiB0cmFuc3BhcmVudDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5pbmZvLWRlc2NyIHtcbiAgICB3aWR0aDogMjIuNXZ3O1xuICAgIHBhZGRpbmc6IDE1cHg7XG4gICAgcGFkZGluZy1sZWZ0OiAwO1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gICAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgI0QwRDBEMDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5pbmZvLWluZm8ge1xuICAgIHdpZHRoOiAyNXZ3O1xuICAgIHBhZGRpbmc6IDE1cHg7XG4gICAgcGFkZGluZy1yaWdodDogMDtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLmNyb3NzZWQge1xuICAgIC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2ggI0Y1NDkzMjtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoICNGNTQ5MzI7XG4gICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xuICB9XG4gIC5oZWxwIC5ldmVudC1kZXNjciB7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBsaW5lLWhlaWdodDogNDguNnB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAuaGVscCAuZXZlbnQtbmFtZSB7XG4gICAgY29sb3I6ICNGNTQ5MzI7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgfVxuICAuaGVscCAuZXZlbnQtY29udGFjdCB7XG4gICAgY29sb3I6ICMzMDU3QTI7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAudG91cm5hbWVudCB7XG4gICAgYmFja2dyb3VuZDogI2ZmZjtcbiAgfVxuICAudG91cm5hbWVudCAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiA1NnB4IDcycHg7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLnZhc2l1a3ktc3RlcHMge1xuICAgIG1hcmdpbi1ib3R0b206IDU0cHg7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLnZhc2l1a3ktc3RlcHMtaGVhZGVyIHtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDU0cHg7XG4gICAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGxpbmUtaGVpZ2h0OiA2NC44cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC50b3VybmFtZW50IC52YXNpdWtpLXN0ZXBzLXRleHQge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB3aWR0aDogNDIuNSU7XG4gICAgcGFkZGluZy1sZWZ0OiAyMHB4O1xuICAgIGNvbG9yOiAjMzA1N0EyO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gIH1cbiAgLnN0YWdlcyB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1ib3R0b206IDE1N3B4O1xuICB9XG4gIC5zdGFnZXM6OmFmdGVyIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogLTglO1xuICAgIGJvdHRvbTogNyU7XG4gICAgd2lkdGg6IDQ4MHB4O1xuICAgIGhlaWdodDogMjQwcHg7XG4gICAgei1pbmRleDogMTA7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvcGxhbmUxMzY2eDIucG5nXCIpIGNlbnRlci9jb250YWluIG5vLXJlcGVhdDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDMsIDFmcik7XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBtaW5tYXgoMTE0cHgsIGF1dG8pIG1pbm1heCgxMTRweCwgYXV0bykgbWlubWF4KDEzOHB4LCBhdXRvKTtcbiAgICBnYXA6IDE5cHg7XG4gICAgbWFyZ2luLWJvdHRvbTogNDBweDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUge1xuICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG4gICAgcGFkZGluZzogMjJweCAyMHB4IDVweCAyMHB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IHN0YXJ0O1xuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChyZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCksIHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSksIHVybChcIi4vaW1hZ2VzL3NsaWRlYmFjazEzNjYucG5nXCIpO1xuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXIsIGNvdmVyO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciwgY2VudGVyO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQsIG5vLXJlcGVhdDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnNsaWRlLW51bWJlciB7XG4gICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xuICAgIHBhZGRpbmc6IDdweCAxMnB4O1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIC5zbGlkZS1jb250ZW50IHtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlMyB7XG4gICAgZ3JpZC1yb3c6IDEvMztcbiAgICBncmlkLWNvbHVtbjogMztcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTcge1xuICAgIGdyaWQtcm93OiAzO1xuICAgIGdyaWQtY29sdW1uOiAyLzQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU3IC5zbGlkZS1jb250ZW50IHtcbiAgICBwYWRkaW5nLXJpZ2h0OiAyMHZ3O1xuICAgIHBhZGRpbmctbGVmdDogN3B4O1xuICB9XG4gIC5zdGFnZXNfX3N3aXBlci1uYXZpIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1ib3R0b206IDY1cHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtaW4taGVpZ2h0OiA0ODJweDtcbiAgICBvdmVyZmxvdy14OiBoaWRkZW4gIWltcG9ydGFudDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIHtcbiAgICBtaW4taGVpZ2h0OiA0ODJweDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgbWluLWhlaWdodDogNDYycHg7XG4gICAgcGFkZGluZzogMzQ4cHggMTBweCAwO1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL2Nhcm91c2VsMTM2NngyLnBuZ1wiKSB0b3AgY2VudGVyLzgwJSA3MCUgbm8tcmVwZWF0O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSAucGFydGljaXBhbnQtbmFtZSB7XG4gICAgbWFyZ2luLWJvdHRvbTogNnB4O1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICBsaW5lLWhlaWdodDogMjguOHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnBhcnRpY2lwYW50LXN0YXR1cyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSAucGFydGljaXBhbnQtbGluayB7XG4gICAgY29sb3I6ICMzMDU3QTI7XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxOS4ycHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlci1jb2xvcjogIzMwNTdBMjtcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLWluLW91dDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnBhcnRpY2lwYW50LWxpbms6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMzMDU3QTI7XG4gICAgY29sb3I6ICNmZmY7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLWhlYWQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgbWFyZ2luLWJvdHRvbTogNjJweDtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItaGVhZCAuc3dpcGVyLXRpdGxlIHtcbiAgICBmbGV4LWdyb3c6IDI7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiA1NHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBsaW5lLWhlaWdodDogNjQuOHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItbmF2aSB7XG4gICAgd2lkdGg6IDE1MnB4O1xuICAgIHBhZGRpbmctdG9wOiAzcHg7XG4gICAgcGFkZGluZy1sZWZ0OiAzcHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLWJ0bnMge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgd2lkdGg6IDE1MnB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1wcmV2IHN2ZyxcbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLW5leHQgc3ZnIHtcbiAgICB3aWR0aDogNDRweDtcbiAgICBoZWlnaHQ6IDQ0cHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLXByZXYgc3ZnIGNpcmNsZSxcbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLW5leHQgc3ZnIGNpcmNsZSB7XG4gICAgZmlsbDogIzMxMzEzMTtcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tcHJldjpob3ZlciBzdmcgY2lyY2xlLFxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tbmV4dDpob3ZlciBzdmcgY2lyY2xlIHtcbiAgICBmaWxsOiAjRkJDRTUxO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1wcmV2IC5zd2lwZXItbmF2aWdhdGlvbi1kaXNhYmxlZCBzdmcgY2lyY2xlLFxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tbmV4dCAuc3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWQgc3ZnIGNpcmNsZSB7XG4gICAgZmlsbDogI0Q2RDZENjtcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1wYWdpbmF0aW9uIHtcbiAgICBwYWRkaW5nOiAwIDklO1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgfVxuICAuZm9vdGVyIHtcbiAgICBwYWRkaW5nOiA0MHB4IDcycHggNzJweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTlERUQ0O1xuICB9XG4gIC5mb290ZXIgLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogMDtcbiAgfVxuICAuZm9vdGVyIC5jb250YWluZXIgLmZvb3Rlci10ZXh0IHtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGluZS1oZWlnaHQ6IDE5LjJweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbn1cbkBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiAyMHB4O1xuICB9XG4gIC5oZWFkZXIge1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL2NpdHkzNzV4Mi5wbmdcIiksIGxpbmVhci1ncmFkaWVudChyZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCksIHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSksIHVybChcIi4vaW1hZ2VzL2hlYWRlcl9iYWNrMzc1eDIucG5nXCIpO1xuICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJSA1MCUsIGNvdmVyLCBjb3ZlcjtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBib3R0b20sIGNlbnRlciwgY2VudGVyO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQsIG5vLXJlcGVhdCwgbm8tcmVwZWF0O1xuICB9XG4gIC5oZWFkZXJfX2xvZ28ge1xuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gIH1cbiAgLmhlYWRlcl9fbG9nbyBzdmcge1xuICAgIHdpZHRoOiAyMTNweDtcbiAgfVxuICAuaGVhZGVyX190aXRsZSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzOS42cHg7XG4gIH1cbiAgLmhlYWRlcl9fdGl0bGUtY2FwIHtcbiAgICBtYXJnaW4tbGVmdDogNjNweDtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDM5LjZweDtcbiAgfVxuICAuaGVhZGVyX190aXRsZS1lYXJ0aCB7XG4gICAgbWFyZ2luLWxlZnQ6IDMwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMjRweDtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDM5LjZweDtcbiAgfVxuICAuaGVhZGVyX19kZXNjciB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IC01cHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICBmb250LXNpemU6IDE4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDIzLjRweDtcbiAgfVxuICAuaGVhZGVyX19kZXNjci10ZXh0IHtcbiAgICBkaXNwbGF5OiBpbmxpbmU7XG4gIH1cbiAgLmhlYWRlcl9fYnRucyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBtYXJnaW4tYm90dG9tOiAyNjVweDtcbiAgfVxuICAuaGVhZGVyX19idG5zIC5ibGFjay1idG4ge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICBtYXJnaW4tYm90dG9tOiAxM3B4O1xuICAgIHBhZGRpbmc6IDE0cHggMjBweDtcbiAgfVxuICAuaGVhZGVyX19idG5zIC50cmFuc3AtYnRuIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nOiAxNHB4IDIwcHg7XG4gIH1cbiAgLmxpbmUge1xuICAgIG1pbi1oZWlnaHQ6IDM4cHg7XG4gICAgcGFkZGluZzogMTBweCAxMnB4O1xuICB9XG4gIC5saW5lX19zdHJva2Uge1xuICAgIHdpZHRoOiA1NDUlO1xuICB9XG4gIC5saW5lX19zdHJva2Ugc3ZnIHtcbiAgICBtYXJnaW46IDNweCAxMnB4O1xuICB9XG4gIC5saW5lX19zdHJva2UtdGV4dCB7XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxNy42cHg7XG4gIH1cbiAgLmhlbHAgLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogNDhweCAyMHB4O1xuICB9XG4gIC5oZWxwX19sZWN0aW9uIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1pbi1oZWlnaHQ6IDUzNnB4O1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvdHVybmlyMzc1eDIucG5nXCIpIGNlbnRlciA1MCUvMTAwJSAzOCUgbm8tcmVwZWF0O1xuICB9XG4gIC5oZWxwIC5ldmVudC1kZXNjcjpudGgtY2hpbGQoMikge1xuICAgIG1hcmdpbi1ib3R0b206IDI2MHB4O1xuICB9XG4gIC5oZWxwIC5ldmVudC1kZXNjciB7XG4gICAgZm9udC1zaXplOiAyOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzNy44cHg7XG4gIH1cbiAgLmhlbHAgLmV2ZW50LW5hbWUge1xuICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICBsaW5lLWhlaWdodDogMzcuOHB4O1xuICB9XG4gIC5oZWxwIC5ldmVudC1jb250YWN0IHtcbiAgICBmb250LXNpemU6IDE4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDIxLjZweDtcbiAgfVxuICAuaGVscF9fcGxheSB7XG4gICAgcGFkZGluZzogMCAyMHB4O1xuICAgIHBhZGRpbmctdG9wOiA0NjBweDtcbiAgICBtYXJnaW46IC0yMHB4O1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL29uZVBsYXllckdhbWUzNzV4Mi5wbmdcIikgY2VudGVyIDUlLzEwMCUgMzglIG5vLXJlcGVhdDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyM3B4O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbSB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW06bm90KDpmaXJzdC1jaGlsZCkge1xuICAgIHBhZGRpbmctdG9wOiAxM3B4O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbTpudGgtY2hpbGQoNCkge1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtOm50aC1jaGlsZCg0KSAuaW5mby1kZXNjciB7XG4gICAgd2lkdGg6IDQ3JTtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW06bnRoLWNoaWxkKDQpIC5pbmZvLWluZm8ge1xuICAgIHdpZHRoOiA0NyU7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAuaW5mby1kZXNjciB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy10b3A6IDA7XG4gICAgYm9yZGVyOiB0cmFuc3BhcmVudDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5pbmZvLWluZm8ge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctdG9wOiAwO1xuICAgIHBhZGRpbmctbGVmdDogMDtcbiAgfVxuICAudG91cm5hbWVudCAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiA5NXB4IDIwcHg7XG4gICAgcGFkZGluZy1ib3R0b206IDgwcHg7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLnZhc2l1a3ktc3RlcHMge1xuICAgIG1hcmdpbi1ib3R0b206IDE1MHB4O1xuICB9XG4gIC50b3VybmFtZW50IC52YXNpdWt5LXN0ZXBzLWhlYWRlciB7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzOS42cHg7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLnZhc2l1a2ktc3RlcHMtdGV4dCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAyMS42cHg7XG4gIH1cbiAgLnN0YWdlcyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMTE1cHg7XG4gIH1cbiAgLnN0YWdlczo6YWZ0ZXIge1xuICAgIHJpZ2h0OiAwJTtcbiAgICB0b3A6IC0zNSU7XG4gICAgd2lkdGg6IDMyN3B4O1xuICAgIGhlaWdodDogMTgycHg7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvcGxhbmUzNzV4Mi5wbmdcIikgY2VudGVyL2NvbnRhaW4gbm8tcmVwZWF0O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIge1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDUsIDFmcik7XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBtaW5tYXgoMTUwcHgsIGF1dG8pIG1pbm1heCgxNTBweCwgYXV0byk7XG4gICAgZ2FwOiAwO1xuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIHtcbiAgICB3aWR0aDogMzM1cHggIWltcG9ydGFudDtcbiAgICBwYWRkaW5nOiAwIDIwcHg7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIC5zbGlkZS1jb250ZW50IHtcbiAgICBmb250LXNpemU6IDE4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDIycHg7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGUxIHtcbiAgICBwYWRkaW5nLXRvcDogNjJweDtcbiAgICBncmlkLXJvdzogMS8yO1xuICAgIGdyaWQtY29sdW1uOiAxLzI7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGUyIHtcbiAgICBwYWRkaW5nLXRvcDogMjdweDtcbiAgICBncmlkLXJvdzogMi8zO1xuICAgIGdyaWQtY29sdW1uOiAxLzI7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGUzIHtcbiAgICBwYWRkaW5nLXRvcDogNjJweDtcbiAgICBncmlkLXJvdzogMS8zO1xuICAgIGdyaWQtY29sdW1uOiAyLzM7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU0IHtcbiAgICBwYWRkaW5nLXRvcDogNjJweDtcbiAgICBncmlkLXJvdzogMS8yO1xuICAgIGdyaWQtY29sdW1uOiAzLzQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU1IHtcbiAgICBwYWRkaW5nLXRvcDogMjdweDtcbiAgICBncmlkLXJvdzogMi8zO1xuICAgIGdyaWQtY29sdW1uOiAzLzQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU2IHtcbiAgICBwYWRkaW5nLXRvcDogNjJweDtcbiAgICBncmlkLXJvdzogMS8zO1xuICAgIGdyaWQtY29sdW1uOiA0LzU7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU3IHtcbiAgICBwYWRkaW5nLXRvcDogNjJweDtcbiAgICBncmlkLXJvdzogMS8zO1xuICAgIGdyaWQtY29sdW1uOiA1LzY7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU3IC5zbGlkZS1jb250ZW50IHtcbiAgICBwYWRkaW5nLXJpZ2h0OiAwO1xuICB9XG4gIC5zdGFnZXNfX3N3aXBlci1uYXZpIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHdpZHRoOiAxODVweDtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgfVxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tcHJldiBzdmcsXG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1uZXh0IHN2ZyB7XG4gICAgd2lkdGg6IDM2cHg7XG4gICAgaGVpZ2h0OiAzNnB4O1xuICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UtaW4tb3V0O1xuICB9XG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1wcmV2IHN2ZyBjaXJjbGUsXG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1uZXh0IHN2ZyBjaXJjbGUge1xuICAgIGZpbGw6ICMzMTMxMzE7XG4gIH1cbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLXByZXYgLnN3aXBlci1idXR0b24tZGlzYWJsZWQgc3ZnIGNpcmNsZSxcbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLW5leHQgLnN3aXBlci1idXR0b24tZGlzYWJsZWQgc3ZnIGNpcmNsZSB7XG4gICAgZmlsbDogI0Q2RDZENjtcbiAgfVxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tcHJldjpob3ZlciBzdmcgY2lyY2xlLFxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tbmV4dDpob3ZlciBzdmcgY2lyY2xlIHtcbiAgICBmaWxsOiAjRkJDRTUxO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIge1xuICAgIG1pbi1oZWlnaHQ6IDQzNXB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIge1xuICAgIG1pbi1oZWlnaHQ6IDQzNXB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSB7XG4gICAgbWluLWhlaWdodDogNDA5cHg7XG4gICAgcGFkZGluZzogMjYwcHggMTBweCAwO1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL2Nhcm91c2VsMzc1eDIucG5nXCIpIDUwJSAxMCUvNzQlIDYwJSBuby1yZXBlYXQ7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLW5hdmkge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3R0b206IC05JTtcbiAgICBsZWZ0OiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1idG5zIHtcbiAgICB3aWR0aDogMTMwcHg7XG4gICAgbWFyZ2luOiAwIGF1dG87XG4gIH1cbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLXByZXYgc3ZnLFxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tbmV4dCBzdmcge1xuICAgIHdpZHRoOiAzNnB4O1xuICAgIGhlaWdodDogMzZweDtcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1wYWdpbmF0aW9uIHtcbiAgICBwYWRkaW5nOiAwIDglO1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1oZWFkIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyM3B4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1oZWFkIC5zd2lwZXItdGl0bGUge1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICBsaW5lLWhlaWdodDogMzkuNnB4O1xuICB9XG4gIC5mb290ZXIge1xuICAgIHBhZGRpbmc6IDQwcHggMThweCA2MHB4O1xuICB9XG59LyojIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVzLmNzcy5tYXAgKi8iLCIuaGVhZGVyIHtcbiAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvY2l0eTE5MjB4Mi5wbmdcIiksIGxpbmVhci1ncmFkaWVudChyZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCksIHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSksIHVybChcIi4vaW1hZ2VzL2hlYWRlcl9iYWNrMTkyMHgyLnBuZ1wiKTtcbiAgYmFja2dyb3VuZC1zaXplOiAxMDAlIDEwMCUsIGNvdmVyLCBjb3ZlcjtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogNTUlIDAsIGNlbnRlciwgY2VudGVyO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0LCBuby1yZXBlYXQsIG5vLXJlcGVhdDtcbn1cbi5oZWFkZXJfX2NvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBzdGFydDtcbiAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgcGFkZGluZzogMjdweCAzMDRweDtcbn1cbi5oZWFkZXJfX2xvZ28ge1xuICBtYXJnaW4tbGVmdDogNDVweDtcbiAgbWFyZ2luLWJvdHRvbTogNjBweDtcbn1cbi5oZWFkZXJfX2xvZ28gc3ZnIHtcbiAgd2lkdGg6IDI0NXB4O1xuICBoZWlnaHQ6IDM2cHg7XG59XG4uaGVhZGVyX190aXRsZSB7XG4gIG1hcmdpbi1sZWZ0OiA0NXB4O1xuICBjb2xvcjogIzA2MDYwNjtcbiAgZm9udC1zaXplOiA2MHB4O1xuICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgbGluZS1oZWlnaHQ6IDY2cHg7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbn1cbi5oZWFkZXJfX3RpdGxlLWNhcCB7XG4gIG1hcmdpbi1sZWZ0OiAxMzVweDtcbiAgY29sb3I6ICMwNjA2MDY7XG4gIGZvbnQtc2l6ZTogNjBweDtcbiAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGxpbmUtaGVpZ2h0OiA2NnB4O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG59XG4uaGVhZGVyX190aXRsZS1lYXJ0aCB7XG4gIG1hcmdpbi1sZWZ0OiA3NnB4O1xuICBtYXJnaW4tYm90dG9tOiAyNHB4O1xuICBjb2xvcjogIzA2MDYwNjtcbiAgZm9udC1zaXplOiA2MHB4O1xuICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgbGluZS1oZWlnaHQ6IDY2cHg7XG59XG4uaGVhZGVyX19kZXNjciB7XG4gIG1hcmdpbi1sZWZ0OiA1NXB4O1xuICBjb2xvcjogIzE1MTUxNTtcbiAgZm9udC1zaXplOiAxOHB4O1xuICBmb250LWZhbWlseTogXCJNb250c2VycmF0XCI7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGxpbmUtaGVpZ2h0OiAyMy40cHg7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuLmhlYWRlcl9fZGVzY3ItdGV4dDpsYXN0LWNoaWxkIHtcbiAgbWFyZ2luLWJvdHRvbTogMzVweDtcbn1cbi5oZWFkZXJfX2J0bnMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4gIG1hcmdpbi1ib3R0b206IDEwMHB4O1xuICBtYXJnaW4tbGVmdDogNDVweDtcbn1cbi5oZWFkZXJfX2J0bnMgLmJsYWNrLWJ0biB7XG4gIHdpZHRoOiA0MiU7XG4gIG1hcmdpbi1yaWdodDogMTBweDtcbiAgY29sb3I6ICNmZmY7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgYm9yZGVyLWNvbG9yOiAjMDYwNjA2O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDYwNjA2O1xufVxuLmhlYWRlcl9fYnRucyAuYmxhY2stYnRuOmhvdmVyIHtcbiAgY29sb3I6ICMxRjFGMUY7XG4gIGJvcmRlci1jb2xvcjogI0ZCQ0U1MTtcbiAgYmFja2dyb3VuZC1jb2xvcjogI0ZCQ0U1MTtcbn1cbi5oZWFkZXJfX2J0bnMgLnRyYW5zcC1idG4ge1xuICB3aWR0aDogNDMlO1xuICBwYWRkaW5nLXJpZ2h0OiA1MHB4O1xuICBwYWRkaW5nLWxlZnQ6IDUwcHg7XG4gIGNvbG9yOiAjMzAzMDMwO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGJvcmRlci1jb2xvcjogIzMwMzAzMDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cbi5oZWFkZXJfX2J0bnMgLnRyYW5zcC1idG46aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMUYxRjFGO1xuICBjb2xvcjogI2ZmZjtcbn1cblxuKixcbio6OmJlZm9yZSxcbio6OmFmdGVyIHtcbiAgYm94LXNpemluZzogaW5oZXJpdDtcbn1cblxuKjpmb2N1cy12aXNpYmxlIHtcbiAgb3V0bGluZTogMDtcbn1cblxuKiB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9Hb2xvc1RleHQtUmVndWxhclwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LVJlZ3VsYXIud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1SZWd1bGFyLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvR29sb3NUZXh0LU1lZGl1bVwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LU1lZGl1bS53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LU1lZGl1bS53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL0dvbG9zVGV4dC1EZW1pQm9sZFwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LURlbWlCb2xkLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtRGVtaUJvbGQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogNjAwO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9Hb2xvc1RleHQtQm9sZFwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LUJvbGQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1Cb2xkLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9NZXJyaXdlYXRoZXIgUmVndWxhclwiKSwgbG9jYWwoXCJmb250cy9NZXJyaXdlYXRoZXItUmVndWxhclwiKSwgdXJsKFwiZm9udHMvTWVycml3ZWF0aGVyLVJlZ3VsYXIud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL01lcnJpd2VhdGhlci1SZWd1bGFyLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9NZXJyaXdlYXRoZXIgQm9sZFwiKSwgbG9jYWwoXCJmb250cy9NZXJyaXdlYXRoZXItQm9sZFwiKSwgdXJsKFwiZm9udHMvTWVycml3ZWF0aGVyLUJvbGQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL01lcnJpd2VhdGhlci1Cb2xkLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIk1vbnRzZXJyYXRcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL01vbnRzZXJyYXQgTWVkaXVtXCIpLCBsb2NhbChcImZvbnRzL01vbnRzZXJyYXQtTWVkaXVtXCIpLCB1cmwoXCJmb250cy9Nb250c2VycmF0LU1lZGl1bS53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvTW9udHNlcnJhdC1NZWRpdW0ud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogNTAwO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJNb250c2VycmF0XCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9Nb250c2VycmF0IFNlbWlCb2xkXCIpLCBsb2NhbChcImZvbnRzL01vbnRzZXJyYXQtU2VtaUJvbGRcIiksIHVybChcImZvbnRzL01vbnRzZXJyYXQtU2VtaUJvbGQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL01vbnRzZXJyYXQtU2VtaUJvbGQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogNjAwO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbmJvZHkge1xuICBtaW4td2lkdGg6IDMyMHB4O1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDA7XG4gIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIiwgXCJNZXJyaXdlYXRoZXJcIiwgXCJNb250c2VycmF0XCIsIHNhbnMtc2VyaWY7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcbn1cblxuLmNvbnRhaW5lciB7XG4gIG1heC13aWR0aDogMTkyMHB4O1xuICBtYXJnaW46IDAgYXV0bztcbn1cblxuc2VjdGlvbiB7XG4gIHBhZGRpbmc6IDI3cHggMzQ5cHg7XG59XG5cbnVsIHtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xufVxuXG5hIHtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGNvbG9yOiBpbmhlcml0O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59XG5cbnAsXG5oMSxcbmgyLFxuaDMge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG59XG5cbmJ1dHRvbiB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiBpbmhlcml0O1xuICBvdXRsaW5lOiBpbmhlcml0O1xuICBiYWNrZ3JvdW5kOiBpbmhlcml0O1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbmltZyB7XG4gIG1heC13aWR0aDogMTAwJTtcbn1cblxuLnZpc3VhbGx5LWhpZGRlbiB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG9wYWNpdHk6IDA7XG59XG5cbi5oaWRkZW4tYmlnLWRldiB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi5idG4ge1xuICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LXdlaWdodDogNTAwO1xuICBsaW5lLWhlaWdodDogMTlweDtcbiAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZS1pbi1vdXQ7XG59XG5cbi5idG4tYmlnIHtcbiAgcGFkZGluZzogMTZweCA0NXB4O1xuICBib3JkZXI6IDJweCBzb2xpZDtcbiAgYm9yZGVyLXJhZGl1czogNjZweDtcbn1cblxuLmJ0bi1zbWFsbCB7XG4gIHBhZGRpbmc6IDhweCAxMHB4O1xuICBib3JkZXI6IDFweCBzb2xpZDtcbiAgYm9yZGVyLXJhZGl1czogNjJweDtcbn1cblxuLmxpbmUge1xuICBtaW4taGVpZ2h0OiA2MHB4O1xuICBwYWRkaW5nOiAxOHB4IDEycHg7XG4gIGJhY2tncm91bmQ6ICNGNTQ5MzI7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi5saW5lX19zdHJva2Uge1xuICB3aWR0aDogMTkwJTtcbiAgYW5pbWF0aW9uOiBtYXJxdWVlIDE1cyBsaW5lYXIgaW5maW5pdGU7XG59XG5cbi5saW5lX19zdHJva2Ugc3ZnIHtcbiAgd2lkdGg6IDZweDtcbiAgaGVpZ2h0OiA2cHg7XG4gIG1hcmdpbjogN3B4IDEycHg7XG59XG5cbi5saW5lX19zdHJva2UtdGV4dCB7XG4gIGZvbnQtc2l6ZTogMjJweDtcbiAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGxpbmUtaGVpZ2h0OiAyNC4ycHg7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgY29sb3I6ICNmZmY7XG59XG5cbkBrZXlmcmFtZXMgbWFycXVlZSB7XG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMTAwJSk7XG4gIH1cbiAgMTAwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTtcbiAgfVxufVxuQG1lZGlhIChtYXgtd2lkdGg6IDEzNjZweCkge1xuICAuaGlkZGVuLWJpZy1kZXYge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICB9XG4gIHNlY3Rpb24ge1xuICAgIHBhZGRpbmc6IDA7XG4gIH1cbiAgLmNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogc3RhcnQ7XG4gICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIHBhZGRpbmc6IDI2cHggMzBweDtcbiAgfVxuICAuaGVhZGVyIHtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9jaXR5MTM2NngyLnBuZ1wiKSwgbGluZWFyLWdyYWRpZW50KHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSwgcmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpKSwgdXJsKFwiLi9pbWFnZXMvaGVhZGVyX2JhY2sxOTIweDIucG5nXCIpO1xuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXIsIGNvdmVyLCBjb3ZlcjtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiByaWdodCwgY2VudGVyLCBjZW50ZXI7XG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdCwgbm8tcmVwZWF0LCBuby1yZXBlYXQ7XG4gIH1cbiAgLmhlYWRlcl9fdGl0bGUtZWFydGgge1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIH1cbiAgLmhlYWRlcl9fZGVzY3Ige1xuICAgIHdpZHRoOiA0MCU7XG4gICAgbWFyZ2luLWxlZnQ6IDU1cHg7XG4gICAgbWFyZ2luLWJvdHRvbTogNDBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gIH1cbiAgLmhlYWRlcl9fZGVzY3ItdGV4dDpsYXN0LWNoaWxkIHtcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xuICB9XG4gIC5oZWFkZXJfX2J0bnMge1xuICAgIG1hcmdpbi1ib3R0b206IDEwNXB4O1xuICB9XG4gIC5oZWFkZXIgLmJ0bi1iaWcge1xuICAgIHBhZGRpbmc6IDE1cHggNDVweDtcbiAgfVxuICAubGluZV9fc3Ryb2tlIHtcbiAgICB3aWR0aDogMzE1JTtcbiAgfVxuICAuaGVscCB7XG4gICAgYmFja2dyb3VuZDogI2ZmZjtcbiAgfVxuICAuaGVscCAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiAxMDVweCA3MHB4IDE0MHB4O1xuICB9XG4gIC5oZWxwX19sZWN0aW9uIHtcbiAgICBtYXJnaW46IC0yOHB4IDAgNzBweDtcbiAgICBwYWRkaW5nLXRvcDogMjhweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogMjhweDtcbiAgICBwYWRkaW5nLXJpZ2h0OiAyNnZ3O1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL3R1cm5pcjEzNjZ4Mi5wbmdcIikgcmlnaHQgMCUvMzIlIDEwMCUgbm8tcmVwZWF0O1xuICB9XG4gIC5oZWxwX19wbGF5IHtcbiAgICBwYWRkaW5nOiAzMHB4IDA7XG4gICAgcGFkZGluZy1sZWZ0OiA0MC41dnc7XG4gICAgbWFyZ2luOiAtMzBweCAwO1xuICAgIG1hcmdpbi1sZWZ0OiAtMzVweDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9vbmVQbGF5ZXJHYW1lMTM2NngyLnBuZ1wiKSBsZWZ0IDUlLzQzJSAxMTIlIG5vLXJlcGVhdDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgcGFkZGluZy10b3A6IDQ1cHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogc3RhcnQ7XG4gICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIG1hcmdpbi1ib3R0b206IDM1cHg7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBzdGFydDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjRDBEMEQwO1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbTpmaXJzdC1jaGlsZCB7XG4gICAgcGFkZGluZy10b3A6IDA7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtOmxhc3QtY2hpbGQge1xuICAgIGJvcmRlci1ib3R0b206IHRyYW5zcGFyZW50O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLmluZm8tZGVzY3Ige1xuICAgIHdpZHRoOiAyMi41dnc7XG4gICAgcGFkZGluZzogMTVweDtcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICBib3JkZXItcmlnaHQ6IDJweCBzb2xpZCAjRDBEMEQwO1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLmluZm8taW5mbyB7XG4gICAgd2lkdGg6IDI1dnc7XG4gICAgcGFkZGluZzogMTVweDtcbiAgICBwYWRkaW5nLXJpZ2h0OiAwO1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAuY3Jvc3NlZCB7XG4gICAgLXdlYmtpdC10ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaCAjRjU0OTMyO1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2ggI0Y1NDkzMjtcbiAgICBtYXJnaW4tcmlnaHQ6IDE1cHg7XG4gIH1cbiAgLmhlbHAgLmV2ZW50LWRlc2NyIHtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gICAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGxpbmUtaGVpZ2h0OiA0OC42cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC5oZWxwIC5ldmVudC1uYW1lIHtcbiAgICBjb2xvcjogI0Y1NDkzMjtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gICAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICB9XG4gIC5oZWxwIC5ldmVudC1jb250YWN0IHtcbiAgICBjb2xvcjogIzMwNTdBMjtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC50b3VybmFtZW50IHtcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICB9XG4gIC50b3VybmFtZW50IC5jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDU2cHggNzJweDtcbiAgfVxuICAudG91cm5hbWVudCAudmFzaXVreS1zdGVwcyB7XG4gICAgbWFyZ2luLWJvdHRvbTogNTRweDtcbiAgfVxuICAudG91cm5hbWVudCAudmFzaXVreS1zdGVwcy1oZWFkZXIge1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogNTRweDtcbiAgICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgbGluZS1oZWlnaHQ6IDY0LjhweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLnZhc2l1a2ktc3RlcHMtdGV4dCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHdpZHRoOiA0Mi41JTtcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XG4gICAgY29sb3I6ICMzMDU3QTI7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgfVxuICAuc3RhZ2VzIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWJvdHRvbTogMTU3cHg7XG4gIH1cbiAgLnN0YWdlczo6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiAtOCU7XG4gICAgYm90dG9tOiA3JTtcbiAgICB3aWR0aDogNDgwcHg7XG4gICAgaGVpZ2h0OiAyNDBweDtcbiAgICB6LWluZGV4OiAxMDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9wbGFuZTEzNjZ4Mi5wbmdcIikgY2VudGVyL2NvbnRhaW4gbm8tcmVwZWF0O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywgMWZyKTtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IG1pbm1heCgxMTRweCwgYXV0bykgbWlubWF4KDExNHB4LCBhdXRvKSBtaW5tYXgoMTM4cHgsIGF1dG8pO1xuICAgIGdhcDogMTlweDtcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSB7XG4gICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcbiAgICBwYWRkaW5nOiAyMnB4IDIwcHggNXB4IDIwcHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogc3RhcnQ7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSwgcmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpKSwgdXJsKFwiLi9pbWFnZXMvc2xpZGViYWNrMTM2Ni5wbmdcIik7XG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlciwgY292ZXI7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyLCBjZW50ZXI7XG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdCwgbm8tcmVwZWF0O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSAuc2xpZGUtbnVtYmVyIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDE1cHg7XG4gICAgcGFkZGluZzogN3B4IDEycHg7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNjAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnNsaWRlLWNvbnRlbnQge1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGUzIHtcbiAgICBncmlkLXJvdzogMS8zO1xuICAgIGdyaWQtY29sdW1uOiAzO1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlNyB7XG4gICAgZ3JpZC1yb3c6IDM7XG4gICAgZ3JpZC1jb2x1bW46IDIvNDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTcgLnNsaWRlLWNvbnRlbnQge1xuICAgIHBhZGRpbmctcmlnaHQ6IDIwdnc7XG4gICAgcGFkZGluZy1sZWZ0OiA3cHg7XG4gIH1cbiAgLnN0YWdlc19fc3dpcGVyLW5hdmkge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWJvdHRvbTogNjVweDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1pbi1oZWlnaHQ6IDQ4MnB4O1xuICAgIG92ZXJmbG93LXg6IGhpZGRlbiAhaW1wb3J0YW50O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIge1xuICAgIG1pbi1oZWlnaHQ6IDQ4MnB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICBtaW4taGVpZ2h0OiA0NjJweDtcbiAgICBwYWRkaW5nOiAzNDhweCAxMHB4IDA7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvY2Fyb3VzZWwxMzY2eDIucG5nXCIpIHRvcCBjZW50ZXIvODAlIDcwJSBuby1yZXBlYXQ7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIC5wYXJ0aWNpcGFudC1uYW1lIHtcbiAgICBtYXJnaW4tYm90dG9tOiA2cHg7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAyNHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNjAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyOC44cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSAucGFydGljaXBhbnQtc3RhdHVzIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIC5wYXJ0aWNpcGFudC1saW5rIHtcbiAgICBjb2xvcjogIzMwNTdBMjtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgbGluZS1oZWlnaHQ6IDE5LjJweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyLWNvbG9yOiAjMzA1N0EyO1xuICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UtaW4tb3V0O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSAucGFydGljaXBhbnQtbGluazpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzMwNTdBMjtcbiAgICBjb2xvcjogI2ZmZjtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItaGVhZCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBtYXJnaW4tYm90dG9tOiA2MnB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1oZWFkIC5zd2lwZXItdGl0bGUge1xuICAgIGZsZXgtZ3JvdzogMjtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDU0cHg7XG4gICAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGxpbmUtaGVpZ2h0OiA2NC44cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1uYXZpIHtcbiAgICB3aWR0aDogMTUycHg7XG4gICAgcGFkZGluZy10b3A6IDNweDtcbiAgICBwYWRkaW5nLWxlZnQ6IDNweDtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItYnRucyB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB3aWR0aDogMTUycHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLXByZXYgc3ZnLFxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tbmV4dCBzdmcge1xuICAgIHdpZHRoOiA0NHB4O1xuICAgIGhlaWdodDogNDRweDtcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tcHJldiBzdmcgY2lyY2xlLFxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tbmV4dCBzdmcgY2lyY2xlIHtcbiAgICBmaWxsOiAjMzEzMTMxO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1wcmV2OmhvdmVyIHN2ZyBjaXJjbGUsXG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1uZXh0OmhvdmVyIHN2ZyBjaXJjbGUge1xuICAgIGZpbGw6ICNGQkNFNTE7XG4gIH1cbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLXByZXYgLnN3aXBlci1uYXZpZ2F0aW9uLWRpc2FibGVkIHN2ZyBjaXJjbGUsXG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1uZXh0IC5zd2lwZXItbmF2aWdhdGlvbi1kaXNhYmxlZCBzdmcgY2lyY2xlIHtcbiAgICBmaWxsOiAjRDZENkQ2O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLXBhZ2luYXRpb24ge1xuICAgIHBhZGRpbmc6IDAgOSU7XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICB9XG4gIC5mb290ZXIge1xuICAgIHBhZGRpbmc6IDQwcHggNzJweCA3MnB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNFOURFRDQ7XG4gIH1cbiAgLmZvb3RlciAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiAwO1xuICB9XG4gIC5mb290ZXIgLmNvbnRhaW5lciAuZm9vdGVyLXRleHQge1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBsaW5lLWhlaWdodDogMTkuMnB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxufVxuQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gIC5jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDIwcHg7XG4gIH1cbiAgLmhlYWRlciB7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvY2l0eTM3NXgyLnBuZ1wiKSwgbGluZWFyLWdyYWRpZW50KHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSwgcmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpKSwgdXJsKFwiLi9pbWFnZXMvaGVhZGVyX2JhY2szNzV4Mi5wbmdcIik7XG4gICAgYmFja2dyb3VuZC1zaXplOiAxMDAlIDUwJSwgY292ZXIsIGNvdmVyO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGJvdHRvbSwgY2VudGVyLCBjZW50ZXI7XG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdCwgbm8tcmVwZWF0LCBuby1yZXBlYXQ7XG4gIH1cbiAgLmhlYWRlcl9fbG9nbyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICBtYXJnaW4tbGVmdDogMDtcbiAgfVxuICAuaGVhZGVyX19sb2dvIHN2ZyB7XG4gICAgd2lkdGg6IDIxM3B4O1xuICB9XG4gIC5oZWFkZXJfX3RpdGxlIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogMDtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDM5LjZweDtcbiAgfVxuICAuaGVhZGVyX190aXRsZS1jYXAge1xuICAgIG1hcmdpbi1sZWZ0OiA2M3B4O1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICBsaW5lLWhlaWdodDogMzkuNnB4O1xuICB9XG4gIC5oZWFkZXJfX3RpdGxlLWVhcnRoIHtcbiAgICBtYXJnaW4tbGVmdDogMzBweDtcbiAgICBtYXJnaW4tYm90dG9tOiAyNHB4O1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICBsaW5lLWhlaWdodDogMzkuNnB4O1xuICB9XG4gIC5oZWFkZXJfX2Rlc2NyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogLTVweDtcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICBsaW5lLWhlaWdodDogMjMuNHB4O1xuICB9XG4gIC5oZWFkZXJfX2Rlc2NyLXRleHQge1xuICAgIGRpc3BsYXk6IGlubGluZTtcbiAgfVxuICAuaGVhZGVyX19idG5zIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tbGVmdDogMDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIG1hcmdpbi1ib3R0b206IDI2NXB4O1xuICB9XG4gIC5oZWFkZXJfX2J0bnMgLmJsYWNrLWJ0biB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgIG1hcmdpbi1ib3R0b206IDEzcHg7XG4gICAgcGFkZGluZzogMTRweCAyMHB4O1xuICB9XG4gIC5oZWFkZXJfX2J0bnMgLnRyYW5zcC1idG4ge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmc6IDE0cHggMjBweDtcbiAgfVxuICAubGluZSB7XG4gICAgbWluLWhlaWdodDogMzhweDtcbiAgICBwYWRkaW5nOiAxMHB4IDEycHg7XG4gIH1cbiAgLmxpbmVfX3N0cm9rZSB7XG4gICAgd2lkdGg6IDU0NSU7XG4gIH1cbiAgLmxpbmVfX3N0cm9rZSBzdmcge1xuICAgIG1hcmdpbjogM3B4IDEycHg7XG4gIH1cbiAgLmxpbmVfX3N0cm9rZS10ZXh0IHtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDE3LjZweDtcbiAgfVxuICAuaGVscCAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiA0OHB4IDIwcHg7XG4gIH1cbiAgLmhlbHBfX2xlY3Rpb24ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgbWluLWhlaWdodDogNTM2cHg7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy90dXJuaXIzNzV4Mi5wbmdcIikgY2VudGVyIDUwJS8xMDAlIDM4JSBuby1yZXBlYXQ7XG4gIH1cbiAgLmhlbHAgLmV2ZW50LWRlc2NyOm50aC1jaGlsZCgyKSB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjYwcHg7XG4gIH1cbiAgLmhlbHAgLmV2ZW50LWRlc2NyIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDM3LjhweDtcbiAgfVxuICAuaGVscCAuZXZlbnQtbmFtZSB7XG4gICAgZm9udC1zaXplOiAyOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzNy44cHg7XG4gIH1cbiAgLmhlbHAgLmV2ZW50LWNvbnRhY3Qge1xuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICBsaW5lLWhlaWdodDogMjEuNnB4O1xuICB9XG4gIC5oZWxwX19wbGF5IHtcbiAgICBwYWRkaW5nOiAwIDIwcHg7XG4gICAgcGFkZGluZy10b3A6IDQ2MHB4O1xuICAgIG1hcmdpbjogLTIwcHg7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvb25lUGxheWVyR2FtZTM3NXgyLnBuZ1wiKSBjZW50ZXIgNSUvMTAwJSAzOCUgbm8tcmVwZWF0O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8ge1xuICAgIG1hcmdpbi1ib3R0b206IDIzcHg7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtIHtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbTpub3QoOmZpcnN0LWNoaWxkKSB7XG4gICAgcGFkZGluZy10b3A6IDEzcHg7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtOm50aC1jaGlsZCg0KSB7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW06bnRoLWNoaWxkKDQpIC5pbmZvLWRlc2NyIHtcbiAgICB3aWR0aDogNDclO1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbTpudGgtY2hpbGQoNCkgLmluZm8taW5mbyB7XG4gICAgd2lkdGg6IDQ3JTtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5pbmZvLWRlc2NyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLXRvcDogMDtcbiAgICBib3JkZXI6IHRyYW5zcGFyZW50O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLmluZm8taW5mbyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy10b3A6IDA7XG4gICAgcGFkZGluZy1sZWZ0OiAwO1xuICB9XG4gIC50b3VybmFtZW50IC5jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDk1cHggMjBweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogODBweDtcbiAgfVxuICAudG91cm5hbWVudCAudmFzaXVreS1zdGVwcyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMTUwcHg7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLnZhc2l1a3ktc3RlcHMtaGVhZGVyIHtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDM5LjZweDtcbiAgfVxuICAudG91cm5hbWVudCAudmFzaXVraS1zdGVwcy10ZXh0IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICBmb250LXNpemU6IDE4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDIxLjZweDtcbiAgfVxuICAuc3RhZ2VzIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxMTVweDtcbiAgfVxuICAuc3RhZ2VzOjphZnRlciB7XG4gICAgcmlnaHQ6IDAlO1xuICAgIHRvcDogLTM1JTtcbiAgICB3aWR0aDogMzI3cHg7XG4gICAgaGVpZ2h0OiAxODJweDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9wbGFuZTM3NXgyLnBuZ1wiKSBjZW50ZXIvY29udGFpbiBuby1yZXBlYXQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciB7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNSwgMWZyKTtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IG1pbm1heCgxNTBweCwgYXV0bykgbWlubWF4KDE1MHB4LCBhdXRvKTtcbiAgICBnYXA6IDA7XG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUge1xuICAgIHdpZHRoOiAzMzVweCAhaW1wb3J0YW50O1xuICAgIHBhZGRpbmc6IDAgMjBweDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnNsaWRlLWNvbnRlbnQge1xuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICBsaW5lLWhlaWdodDogMjJweDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTEge1xuICAgIHBhZGRpbmctdG9wOiA2MnB4O1xuICAgIGdyaWQtcm93OiAxLzI7XG4gICAgZ3JpZC1jb2x1bW46IDEvMjtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTIge1xuICAgIHBhZGRpbmctdG9wOiAyN3B4O1xuICAgIGdyaWQtcm93OiAyLzM7XG4gICAgZ3JpZC1jb2x1bW46IDEvMjtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTMge1xuICAgIHBhZGRpbmctdG9wOiA2MnB4O1xuICAgIGdyaWQtcm93OiAxLzM7XG4gICAgZ3JpZC1jb2x1bW46IDIvMztcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTQge1xuICAgIHBhZGRpbmctdG9wOiA2MnB4O1xuICAgIGdyaWQtcm93OiAxLzI7XG4gICAgZ3JpZC1jb2x1bW46IDMvNDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTUge1xuICAgIHBhZGRpbmctdG9wOiAyN3B4O1xuICAgIGdyaWQtcm93OiAyLzM7XG4gICAgZ3JpZC1jb2x1bW46IDMvNDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTYge1xuICAgIHBhZGRpbmctdG9wOiA2MnB4O1xuICAgIGdyaWQtcm93OiAxLzM7XG4gICAgZ3JpZC1jb2x1bW46IDQvNTtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTcge1xuICAgIHBhZGRpbmctdG9wOiA2MnB4O1xuICAgIGdyaWQtcm93OiAxLzM7XG4gICAgZ3JpZC1jb2x1bW46IDUvNjtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTcgLnNsaWRlLWNvbnRlbnQge1xuICAgIHBhZGRpbmctcmlnaHQ6IDA7XG4gIH1cbiAgLnN0YWdlc19fc3dpcGVyLW5hdmkge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgd2lkdGg6IDE4NXB4O1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICB9XG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1wcmV2IHN2ZyxcbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLW5leHQgc3ZnIHtcbiAgICB3aWR0aDogMzZweDtcbiAgICBoZWlnaHQ6IDM2cHg7XG4gICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZS1pbi1vdXQ7XG4gIH1cbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLXByZXYgc3ZnIGNpcmNsZSxcbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLW5leHQgc3ZnIGNpcmNsZSB7XG4gICAgZmlsbDogIzMxMzEzMTtcbiAgfVxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tcHJldiAuc3dpcGVyLWJ1dHRvbi1kaXNhYmxlZCBzdmcgY2lyY2xlLFxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tbmV4dCAuc3dpcGVyLWJ1dHRvbi1kaXNhYmxlZCBzdmcgY2lyY2xlIHtcbiAgICBmaWxsOiAjRDZENkQ2O1xuICB9XG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1wcmV2OmhvdmVyIHN2ZyBjaXJjbGUsXG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1uZXh0OmhvdmVyIHN2ZyBjaXJjbGUge1xuICAgIGZpbGw6ICNGQkNFNTE7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciB7XG4gICAgbWluLWhlaWdodDogNDM1cHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciB7XG4gICAgbWluLWhlaWdodDogNDM1cHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIHtcbiAgICBtaW4taGVpZ2h0OiA0MDlweDtcbiAgICBwYWRkaW5nOiAyNjBweCAxMHB4IDA7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvY2Fyb3VzZWwzNzV4Mi5wbmdcIikgNTAlIDEwJS83NCUgNjAlIG5vLXJlcGVhdDtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItbmF2aSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogLTklO1xuICAgIGxlZnQ6IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLWJ0bnMge1xuICAgIHdpZHRoOiAxMzBweDtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tcHJldiBzdmcsXG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1uZXh0IHN2ZyB7XG4gICAgd2lkdGg6IDM2cHg7XG4gICAgaGVpZ2h0OiAzNnB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLXBhZ2luYXRpb24ge1xuICAgIHBhZGRpbmc6IDAgOCU7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLWhlYWQge1xuICAgIG1hcmdpbi1ib3R0b206IDIzcHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLWhlYWQgLnN3aXBlci10aXRsZSB7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzOS42cHg7XG4gIH1cbiAgLmZvb3RlciB7XG4gICAgcGFkZGluZzogNDBweCAxOHB4IDYwcHg7XG4gIH1cbn0vKiMgc291cmNlTWFwcGluZ1VSTD1zdHlsZXMuY3NzLm1hcCAqLyIsIi5oZWFkZXIge1xuICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9jaXR5MTkyMHgyLnBuZ1wiKSwgbGluZWFyLWdyYWRpZW50KHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSwgcmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpKSwgdXJsKFwiLi9pbWFnZXMvaGVhZGVyX2JhY2sxOTIweDIucG5nXCIpO1xuICBiYWNrZ3JvdW5kLXNpemU6IDEwMCUgMTAwJSwgY292ZXIsIGNvdmVyO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiA1NSUgMCwgY2VudGVyLCBjZW50ZXI7XG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQsIG5vLXJlcGVhdCwgbm8tcmVwZWF0O1xufVxuLmhlYWRlcl9fY29udGFpbmVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IHN0YXJ0O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwYWRkaW5nOiAyN3B4IDMwNHB4O1xufVxuLmhlYWRlcl9fbG9nbyB7XG4gIG1hcmdpbi1sZWZ0OiA0NXB4O1xuICBtYXJnaW4tYm90dG9tOiA2MHB4O1xufVxuLmhlYWRlcl9fbG9nbyBzdmcge1xuICB3aWR0aDogMjQ1cHg7XG4gIGhlaWdodDogMzZweDtcbn1cbi5oZWFkZXJfX3RpdGxlIHtcbiAgbWFyZ2luLWxlZnQ6IDQ1cHg7XG4gIGNvbG9yOiAjMDYwNjA2O1xuICBmb250LXNpemU6IDYwcHg7XG4gIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICBmb250LXdlaWdodDogNDAwO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsaW5lLWhlaWdodDogNjZweDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xufVxuLmhlYWRlcl9fdGl0bGUtY2FwIHtcbiAgbWFyZ2luLWxlZnQ6IDEzNXB4O1xuICBjb2xvcjogIzA2MDYwNjtcbiAgZm9udC1zaXplOiA2MHB4O1xuICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgbGluZS1oZWlnaHQ6IDY2cHg7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbn1cbi5oZWFkZXJfX3RpdGxlLWVhcnRoIHtcbiAgbWFyZ2luLWxlZnQ6IDc2cHg7XG4gIG1hcmdpbi1ib3R0b206IDI0cHg7XG4gIGNvbG9yOiAjMDYwNjA2O1xuICBmb250LXNpemU6IDYwcHg7XG4gIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICBmb250LXdlaWdodDogNDAwO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsaW5lLWhlaWdodDogNjZweDtcbn1cbi5oZWFkZXJfX2Rlc2NyIHtcbiAgbWFyZ2luLWxlZnQ6IDU1cHg7XG4gIGNvbG9yOiAjMTUxNTE1O1xuICBmb250LXNpemU6IDE4cHg7XG4gIGZvbnQtZmFtaWx5OiBcIk1vbnRzZXJyYXRcIjtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgbGluZS1oZWlnaHQ6IDIzLjRweDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4uaGVhZGVyX19kZXNjci10ZXh0Omxhc3QtY2hpbGQge1xuICBtYXJnaW4tYm90dG9tOiAzNXB4O1xufVxuLmhlYWRlcl9fYnRucyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgbWFyZ2luLWJvdHRvbTogMTAwcHg7XG4gIG1hcmdpbi1sZWZ0OiA0NXB4O1xufVxuLmhlYWRlcl9fYnRucyAuYmxhY2stYnRuIHtcbiAgd2lkdGg6IDQyJTtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICBjb2xvcjogI2ZmZjtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBib3JkZXItY29sb3I6ICMwNjA2MDY7XG4gIGJhY2tncm91bmQtY29sb3I6ICMwNjA2MDY7XG59XG4uaGVhZGVyX19idG5zIC5ibGFjay1idG46aG92ZXIge1xuICBjb2xvcjogIzFGMUYxRjtcbiAgYm9yZGVyLWNvbG9yOiAjRkJDRTUxO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkJDRTUxO1xufVxuLmhlYWRlcl9fYnRucyAudHJhbnNwLWJ0biB7XG4gIHdpZHRoOiA0MyU7XG4gIHBhZGRpbmctcmlnaHQ6IDUwcHg7XG4gIHBhZGRpbmctbGVmdDogNTBweDtcbiAgY29sb3I6ICMzMDMwMzA7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgYm9yZGVyLWNvbG9yOiAjMzAzMDMwO1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xufVxuLmhlYWRlcl9fYnRucyAudHJhbnNwLWJ0bjpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMxRjFGMUY7XG4gIGNvbG9yOiAjZmZmO1xufVxuXG4qLFxuKjo6YmVmb3JlLFxuKjo6YWZ0ZXIge1xuICBib3gtc2l6aW5nOiBpbmhlcml0O1xufVxuXG4qOmZvY3VzLXZpc2libGUge1xuICBvdXRsaW5lOiAwO1xufVxuXG4qIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL0dvbG9zVGV4dC1SZWd1bGFyXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtUmVndWxhci53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LVJlZ3VsYXIud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogNDAwO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9Hb2xvc1RleHQtTWVkaXVtXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtTWVkaXVtLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtTWVkaXVtLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvR29sb3NUZXh0LURlbWlCb2xkXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtRGVtaUJvbGQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1EZW1pQm9sZC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL0dvbG9zVGV4dC1Cb2xkXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtQm9sZC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LUJvbGQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogNzAwO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL01lcnJpd2VhdGhlciBSZWd1bGFyXCIpLCBsb2NhbChcImZvbnRzL01lcnJpd2VhdGhlci1SZWd1bGFyXCIpLCB1cmwoXCJmb250cy9NZXJyaXdlYXRoZXItUmVndWxhci53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvTWVycml3ZWF0aGVyLVJlZ3VsYXIud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL01lcnJpd2VhdGhlciBCb2xkXCIpLCBsb2NhbChcImZvbnRzL01lcnJpd2VhdGhlci1Cb2xkXCIpLCB1cmwoXCJmb250cy9NZXJyaXdlYXRoZXItQm9sZC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvTWVycml3ZWF0aGVyLUJvbGQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiTW9udHNlcnJhdFwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvTW9udHNlcnJhdCBNZWRpdW1cIiksIGxvY2FsKFwiZm9udHMvTW9udHNlcnJhdC1NZWRpdW1cIiksIHVybChcImZvbnRzL01vbnRzZXJyYXQtTWVkaXVtLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9Nb250c2VycmF0LU1lZGl1bS53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIk1vbnRzZXJyYXRcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL01vbnRzZXJyYXQgU2VtaUJvbGRcIiksIGxvY2FsKFwiZm9udHMvTW9udHNlcnJhdC1TZW1pQm9sZFwiKSwgdXJsKFwiZm9udHMvTW9udHNlcnJhdC1TZW1pQm9sZC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvTW9udHNlcnJhdC1TZW1pQm9sZC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuYm9keSB7XG4gIG1pbi13aWR0aDogMzIwcHg7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDtcbiAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiLCBcIk1lcnJpd2VhdGhlclwiLCBcIk1vbnRzZXJyYXRcIiwgc2Fucy1zZXJpZjtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xufVxuXG4uY29udGFpbmVyIHtcbiAgbWF4LXdpZHRoOiAxOTIwcHg7XG4gIG1hcmdpbjogMCBhdXRvO1xufVxuXG5zZWN0aW9uIHtcbiAgcGFkZGluZzogMjdweCAzNDlweDtcbn1cblxudWwge1xuICBsaXN0LXN0eWxlOiBub25lO1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG59XG5cbmEge1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDA7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgY29sb3I6IGluaGVyaXQ7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cblxucCxcbmgxLFxuaDIsXG5oMyB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuYnV0dG9uIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBib3JkZXI6IGluaGVyaXQ7XG4gIG91dGxpbmU6IGluaGVyaXQ7XG4gIGJhY2tncm91bmQ6IGluaGVyaXQ7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuaW1nIHtcbiAgbWF4LXdpZHRoOiAxMDAlO1xufVxuXG4udmlzdWFsbHktaGlkZGVuIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgb3BhY2l0eTogMDtcbn1cblxuLmhpZGRlbi1iaWctZGV2IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLmJ0biB7XG4gIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGxpbmUtaGVpZ2h0OiAxOXB4O1xuICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLWluLW91dDtcbn1cblxuLmJ0bi1iaWcge1xuICBwYWRkaW5nOiAxNnB4IDQ1cHg7XG4gIGJvcmRlcjogMnB4IHNvbGlkO1xuICBib3JkZXItcmFkaXVzOiA2NnB4O1xufVxuXG4uYnRuLXNtYWxsIHtcbiAgcGFkZGluZzogOHB4IDEwcHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkO1xuICBib3JkZXItcmFkaXVzOiA2MnB4O1xufVxuXG4ubGluZSB7XG4gIG1pbi1oZWlnaHQ6IDYwcHg7XG4gIHBhZGRpbmc6IDE4cHggMTJweDtcbiAgYmFja2dyb3VuZDogI0Y1NDkzMjtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLmxpbmVfX3N0cm9rZSB7XG4gIHdpZHRoOiAxOTAlO1xuICBhbmltYXRpb246IG1hcnF1ZWUgMTVzIGxpbmVhciBpbmZpbml0ZTtcbn1cblxuLmxpbmVfX3N0cm9rZSBzdmcge1xuICB3aWR0aDogNnB4O1xuICBoZWlnaHQ6IDZweDtcbiAgbWFyZ2luOiA3cHggMTJweDtcbn1cblxuLmxpbmVfX3N0cm9rZS10ZXh0IHtcbiAgZm9udC1zaXplOiAyMnB4O1xuICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgbGluZS1oZWlnaHQ6IDI0LjJweDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICBjb2xvcjogI2ZmZjtcbn1cblxuQGtleWZyYW1lcyBtYXJxdWVlIHtcbiAgMCUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKTtcbiAgfVxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEwMCUpO1xuICB9XG59XG5AbWVkaWEgKG1heC13aWR0aDogMTM2NnB4KSB7XG4gIC5oaWRkZW4tYmlnLWRldiB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbiAgc2VjdGlvbiB7XG4gICAgcGFkZGluZzogMDtcbiAgfVxuICAuY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBzdGFydDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgcGFkZGluZzogMjZweCAzMHB4O1xuICB9XG4gIC5oZWFkZXIge1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL2NpdHkxMzY2eDIucG5nXCIpLCBsaW5lYXItZ3JhZGllbnQocmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpLCByZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCkpLCB1cmwoXCIuL2ltYWdlcy9oZWFkZXJfYmFjazE5MjB4Mi5wbmdcIik7XG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlciwgY292ZXIsIGNvdmVyO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IHJpZ2h0LCBjZW50ZXIsIGNlbnRlcjtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0LCBuby1yZXBlYXQsIG5vLXJlcGVhdDtcbiAgfVxuICAuaGVhZGVyX190aXRsZS1lYXJ0aCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgfVxuICAuaGVhZGVyX19kZXNjciB7XG4gICAgd2lkdGg6IDQwJTtcbiAgICBtYXJnaW4tbGVmdDogNTVweDtcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgfVxuICAuaGVhZGVyX19kZXNjci10ZXh0Omxhc3QtY2hpbGQge1xuICAgIG1hcmdpbi1ib3R0b206IDA7XG4gIH1cbiAgLmhlYWRlcl9fYnRucyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMTA1cHg7XG4gIH1cbiAgLmhlYWRlciAuYnRuLWJpZyB7XG4gICAgcGFkZGluZzogMTVweCA0NXB4O1xuICB9XG4gIC5saW5lX19zdHJva2Uge1xuICAgIHdpZHRoOiAzMTUlO1xuICB9XG4gIC5oZWxwIHtcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICB9XG4gIC5oZWxwIC5jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDEwNXB4IDcwcHggMTQwcHg7XG4gIH1cbiAgLmhlbHBfX2xlY3Rpb24ge1xuICAgIG1hcmdpbjogLTI4cHggMCA3MHB4O1xuICAgIHBhZGRpbmctdG9wOiAyOHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiAyOHB4O1xuICAgIHBhZGRpbmctcmlnaHQ6IDI2dnc7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvdHVybmlyMTM2NngyLnBuZ1wiKSByaWdodCAwJS8zMiUgMTAwJSBuby1yZXBlYXQ7XG4gIH1cbiAgLmhlbHBfX3BsYXkge1xuICAgIHBhZGRpbmc6IDMwcHggMDtcbiAgICBwYWRkaW5nLWxlZnQ6IDQwLjV2dztcbiAgICBtYXJnaW46IC0zMHB4IDA7XG4gICAgbWFyZ2luLWxlZnQ6IC0zNXB4O1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL29uZVBsYXllckdhbWUxMzY2eDIucG5nXCIpIGxlZnQgNSUvNDMlIDExMiUgbm8tcmVwZWF0O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8ge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBwYWRkaW5nLXRvcDogNDVweDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBzdGFydDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgbWFyZ2luLWJvdHRvbTogMzVweDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW0ge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IHN0YXJ0O1xuICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNEMEQwRDA7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtOmZpcnN0LWNoaWxkIHtcbiAgICBwYWRkaW5nLXRvcDogMDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW06bGFzdC1jaGlsZCB7XG4gICAgYm9yZGVyLWJvdHRvbTogdHJhbnNwYXJlbnQ7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAuaW5mby1kZXNjciB7XG4gICAgd2lkdGg6IDIyLjV2dztcbiAgICBwYWRkaW5nOiAxNXB4O1xuICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICAgIGJvcmRlci1yaWdodDogMnB4IHNvbGlkICNEMEQwRDA7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAuaW5mby1pbmZvIHtcbiAgICB3aWR0aDogMjV2dztcbiAgICBwYWRkaW5nOiAxNXB4O1xuICAgIHBhZGRpbmctcmlnaHQ6IDA7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNjAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5jcm9zc2VkIHtcbiAgICAtd2Via2l0LXRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoICNGNTQ5MzI7XG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaCAjRjU0OTMyO1xuICAgIG1hcmdpbi1yaWdodDogMTVweDtcbiAgfVxuICAuaGVscCAuZXZlbnQtZGVzY3Ige1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgbGluZS1oZWlnaHQ6IDQ4LjZweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLmhlbHAgLmV2ZW50LW5hbWUge1xuICAgIGNvbG9yOiAjRjU0OTMyO1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgICBmb250LXdlaWdodDogNzAwO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIH1cbiAgLmhlbHAgLmV2ZW50LWNvbnRhY3Qge1xuICAgIGNvbG9yOiAjMzA1N0EyO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLnRvdXJuYW1lbnQge1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogNTZweCA3MnB4O1xuICB9XG4gIC50b3VybmFtZW50IC52YXNpdWt5LXN0ZXBzIHtcbiAgICBtYXJnaW4tYm90dG9tOiA1NHB4O1xuICB9XG4gIC50b3VybmFtZW50IC52YXNpdWt5LXN0ZXBzLWhlYWRlciB7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiA1NHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBsaW5lLWhlaWdodDogNjQuOHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAudG91cm5hbWVudCAudmFzaXVraS1zdGVwcy10ZXh0IHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6IDQyLjUlO1xuICAgIHBhZGRpbmctbGVmdDogMjBweDtcbiAgICBjb2xvcjogIzMwNTdBMjtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICB9XG4gIC5zdGFnZXMge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tYm90dG9tOiAxNTdweDtcbiAgfVxuICAuc3RhZ2VzOjphZnRlciB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcmlnaHQ6IC04JTtcbiAgICBib3R0b206IDclO1xuICAgIHdpZHRoOiA0ODBweDtcbiAgICBoZWlnaHQ6IDI0MHB4O1xuICAgIHotaW5kZXg6IDEwO1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL3BsYW5lMTM2NngyLnBuZ1wiKSBjZW50ZXIvY29udGFpbiBuby1yZXBlYXQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgzLCAxZnIpO1xuICAgIGdyaWQtdGVtcGxhdGUtcm93czogbWlubWF4KDExNHB4LCBhdXRvKSBtaW5tYXgoMTE0cHgsIGF1dG8pIG1pbm1heCgxMzhweCwgYXV0byk7XG4gICAgZ2FwOiAxOXB4O1xuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIHtcbiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xuICAgIHBhZGRpbmc6IDIycHggMjBweCA1cHggMjBweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBzdGFydDtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQocmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpLCByZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCkpLCB1cmwoXCIuL2ltYWdlcy9zbGlkZWJhY2sxMzY2LnBuZ1wiKTtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyLCBjb3ZlcjtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIsIGNlbnRlcjtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0LCBuby1yZXBlYXQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIC5zbGlkZS1udW1iZXIge1xuICAgIG1hcmdpbi1yaWdodDogMTVweDtcbiAgICBwYWRkaW5nOiA3cHggMTJweDtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSAuc2xpZGUtY29udGVudCB7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTMge1xuICAgIGdyaWQtcm93OiAxLzM7XG4gICAgZ3JpZC1jb2x1bW46IDM7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU3IHtcbiAgICBncmlkLXJvdzogMztcbiAgICBncmlkLWNvbHVtbjogMi80O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlNyAuc2xpZGUtY29udGVudCB7XG4gICAgcGFkZGluZy1yaWdodDogMjB2dztcbiAgICBwYWRkaW5nLWxlZnQ6IDdweDtcbiAgfVxuICAuc3RhZ2VzX19zd2lwZXItbmF2aSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuICAucGFydGljaXBhbnRzIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tYm90dG9tOiA2NXB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWluLWhlaWdodDogNDgycHg7XG4gICAgb3ZlcmZsb3cteDogaGlkZGVuICFpbXBvcnRhbnQ7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciB7XG4gICAgbWluLWhlaWdodDogNDgycHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgIG1pbi1oZWlnaHQ6IDQ2MnB4O1xuICAgIHBhZGRpbmc6IDM0OHB4IDEwcHggMDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9jYXJvdXNlbDEzNjZ4Mi5wbmdcIikgdG9wIGNlbnRlci84MCUgNzAlIG5vLXJlcGVhdDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnBhcnRpY2lwYW50LW5hbWUge1xuICAgIG1hcmdpbi1ib3R0b206IDZweDtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDI0cHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI4LjhweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIC5wYXJ0aWNpcGFudC1zdGF0dXMge1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnBhcnRpY2lwYW50LWxpbmsge1xuICAgIGNvbG9yOiAjMzA1N0EyO1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICBsaW5lLWhlaWdodDogMTkuMnB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBib3JkZXItY29sb3I6ICMzMDU3QTI7XG4gICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZS1pbi1vdXQ7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIC5wYXJ0aWNpcGFudC1saW5rOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzA1N0EyO1xuICAgIGNvbG9yOiAjZmZmO1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1oZWFkIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIG1hcmdpbi1ib3R0b206IDYycHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLWhlYWQgLnN3aXBlci10aXRsZSB7XG4gICAgZmxleC1ncm93OiAyO1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogNTRweDtcbiAgICBmb250LWZhbWlseTogXCJNZXJyaXdlYXRoZXJcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgbGluZS1oZWlnaHQ6IDY0LjhweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLW5hdmkge1xuICAgIHdpZHRoOiAxNTJweDtcbiAgICBwYWRkaW5nLXRvcDogM3B4O1xuICAgIHBhZGRpbmctbGVmdDogM3B4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1idG5zIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHdpZHRoOiAxNTJweDtcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tcHJldiBzdmcsXG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1uZXh0IHN2ZyB7XG4gICAgd2lkdGg6IDQ0cHg7XG4gICAgaGVpZ2h0OiA0NHB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1wcmV2IHN2ZyBjaXJjbGUsXG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1uZXh0IHN2ZyBjaXJjbGUge1xuICAgIGZpbGw6ICMzMTMxMzE7XG4gIH1cbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLXByZXY6aG92ZXIgc3ZnIGNpcmNsZSxcbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLW5leHQ6aG92ZXIgc3ZnIGNpcmNsZSB7XG4gICAgZmlsbDogI0ZCQ0U1MTtcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tcHJldiAuc3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWQgc3ZnIGNpcmNsZSxcbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLW5leHQgLnN3aXBlci1uYXZpZ2F0aW9uLWRpc2FibGVkIHN2ZyBjaXJjbGUge1xuICAgIGZpbGw6ICNENkQ2RDY7XG4gIH1cbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItcGFnaW5hdGlvbiB7XG4gICAgcGFkZGluZzogMCA5JTtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gIH1cbiAgLmZvb3RlciB7XG4gICAgcGFkZGluZzogNDBweCA3MnB4IDcycHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0U5REVENDtcbiAgfVxuICAuZm9vdGVyIC5jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDA7XG4gIH1cbiAgLmZvb3RlciAuY29udGFpbmVyIC5mb290ZXItdGV4dCB7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxOS4ycHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG59XG5AbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogMjBweDtcbiAgfVxuICAuaGVhZGVyIHtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9jaXR5Mzc1eDIucG5nXCIpLCBsaW5lYXItZ3JhZGllbnQocmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpLCByZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCkpLCB1cmwoXCIuL2ltYWdlcy9oZWFkZXJfYmFjazM3NXgyLnBuZ1wiKTtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDEwMCUgNTAlLCBjb3ZlciwgY292ZXI7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogYm90dG9tLCBjZW50ZXIsIGNlbnRlcjtcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0LCBuby1yZXBlYXQsIG5vLXJlcGVhdDtcbiAgfVxuICAuaGVhZGVyX19sb2dvIHtcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICB9XG4gIC5oZWFkZXJfX2xvZ28gc3ZnIHtcbiAgICB3aWR0aDogMjEzcHg7XG4gIH1cbiAgLmhlYWRlcl9fdGl0bGUge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICBsaW5lLWhlaWdodDogMzkuNnB4O1xuICB9XG4gIC5oZWFkZXJfX3RpdGxlLWNhcCB7XG4gICAgbWFyZ2luLWxlZnQ6IDYzcHg7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzOS42cHg7XG4gIH1cbiAgLmhlYWRlcl9fdGl0bGUtZWFydGgge1xuICAgIG1hcmdpbi1sZWZ0OiAzMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDI0cHg7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzOS42cHg7XG4gIH1cbiAgLmhlYWRlcl9fZGVzY3Ige1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1sZWZ0OiAtNXB4O1xuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAyMy40cHg7XG4gIH1cbiAgLmhlYWRlcl9fZGVzY3ItdGV4dCB7XG4gICAgZGlzcGxheTogaW5saW5lO1xuICB9XG4gIC5oZWFkZXJfX2J0bnMge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgbWFyZ2luLWJvdHRvbTogMjY1cHg7XG4gIH1cbiAgLmhlYWRlcl9fYnRucyAuYmxhY2stYnRuIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgbWFyZ2luLWJvdHRvbTogMTNweDtcbiAgICBwYWRkaW5nOiAxNHB4IDIwcHg7XG4gIH1cbiAgLmhlYWRlcl9fYnRucyAudHJhbnNwLWJ0biB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZzogMTRweCAyMHB4O1xuICB9XG4gIC5saW5lIHtcbiAgICBtaW4taGVpZ2h0OiAzOHB4O1xuICAgIHBhZGRpbmc6IDEwcHggMTJweDtcbiAgfVxuICAubGluZV9fc3Ryb2tlIHtcbiAgICB3aWR0aDogNTQ1JTtcbiAgfVxuICAubGluZV9fc3Ryb2tlIHN2ZyB7XG4gICAgbWFyZ2luOiAzcHggMTJweDtcbiAgfVxuICAubGluZV9fc3Ryb2tlLXRleHQge1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICBsaW5lLWhlaWdodDogMTcuNnB4O1xuICB9XG4gIC5oZWxwIC5jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDQ4cHggMjBweDtcbiAgfVxuICAuaGVscF9fbGVjdGlvbiB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBtaW4taGVpZ2h0OiA1MzZweDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL3R1cm5pcjM3NXgyLnBuZ1wiKSBjZW50ZXIgNTAlLzEwMCUgMzglIG5vLXJlcGVhdDtcbiAgfVxuICAuaGVscCAuZXZlbnQtZGVzY3I6bnRoLWNoaWxkKDIpIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyNjBweDtcbiAgfVxuICAuaGVscCAuZXZlbnQtZGVzY3Ige1xuICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICBsaW5lLWhlaWdodDogMzcuOHB4O1xuICB9XG4gIC5oZWxwIC5ldmVudC1uYW1lIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDM3LjhweDtcbiAgfVxuICAuaGVscCAuZXZlbnQtY29udGFjdCB7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAyMS42cHg7XG4gIH1cbiAgLmhlbHBfX3BsYXkge1xuICAgIHBhZGRpbmc6IDAgMjBweDtcbiAgICBwYWRkaW5nLXRvcDogNDYwcHg7XG4gICAgbWFyZ2luOiAtMjBweDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9vbmVQbGF5ZXJHYW1lMzc1eDIucG5nXCIpIGNlbnRlciA1JS8xMDAlIDM4JSBuby1yZXBlYXQ7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjNweDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW0ge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtOm5vdCg6Zmlyc3QtY2hpbGQpIHtcbiAgICBwYWRkaW5nLXRvcDogMTNweDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW06bnRoLWNoaWxkKDQpIHtcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbTpudGgtY2hpbGQoNCkgLmluZm8tZGVzY3Ige1xuICAgIHdpZHRoOiA0NyU7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtOm50aC1jaGlsZCg0KSAuaW5mby1pbmZvIHtcbiAgICB3aWR0aDogNDclO1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLmluZm8tZGVzY3Ige1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctdG9wOiAwO1xuICAgIGJvcmRlcjogdHJhbnNwYXJlbnQ7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAuaW5mby1pbmZvIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLXRvcDogMDtcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogOTVweCAyMHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiA4MHB4O1xuICB9XG4gIC50b3VybmFtZW50IC52YXNpdWt5LXN0ZXBzIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxNTBweDtcbiAgfVxuICAudG91cm5hbWVudCAudmFzaXVreS1zdGVwcy1oZWFkZXIge1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICBsaW5lLWhlaWdodDogMzkuNnB4O1xuICB9XG4gIC50b3VybmFtZW50IC52YXNpdWtpLXN0ZXBzLXRleHQge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi10b3A6IDEwcHg7XG4gICAgcGFkZGluZy1sZWZ0OiAwO1xuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICBsaW5lLWhlaWdodDogMjEuNnB4O1xuICB9XG4gIC5zdGFnZXMge1xuICAgIG1hcmdpbi1ib3R0b206IDExNXB4O1xuICB9XG4gIC5zdGFnZXM6OmFmdGVyIHtcbiAgICByaWdodDogMCU7XG4gICAgdG9wOiAtMzUlO1xuICAgIHdpZHRoOiAzMjdweDtcbiAgICBoZWlnaHQ6IDE4MnB4O1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL3BsYW5lMzc1eDIucG5nXCIpIGNlbnRlci9jb250YWluIG5vLXJlcGVhdDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIHtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCg1LCAxZnIpO1xuICAgIGdyaWQtdGVtcGxhdGUtcm93czogbWlubWF4KDE1MHB4LCBhdXRvKSBtaW5tYXgoMTUwcHgsIGF1dG8pO1xuICAgIGdhcDogMDtcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSB7XG4gICAgd2lkdGg6IDMzNXB4ICFpbXBvcnRhbnQ7XG4gICAgcGFkZGluZzogMCAyMHB4O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSAuc2xpZGUtY29udGVudCB7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAyMnB4O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlMSB7XG4gICAgcGFkZGluZy10b3A6IDYycHg7XG4gICAgZ3JpZC1yb3c6IDEvMjtcbiAgICBncmlkLWNvbHVtbjogMS8yO1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlMiB7XG4gICAgcGFkZGluZy10b3A6IDI3cHg7XG4gICAgZ3JpZC1yb3c6IDIvMztcbiAgICBncmlkLWNvbHVtbjogMS8yO1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlMyB7XG4gICAgcGFkZGluZy10b3A6IDYycHg7XG4gICAgZ3JpZC1yb3c6IDEvMztcbiAgICBncmlkLWNvbHVtbjogMi8zO1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlNCB7XG4gICAgcGFkZGluZy10b3A6IDYycHg7XG4gICAgZ3JpZC1yb3c6IDEvMjtcbiAgICBncmlkLWNvbHVtbjogMy80O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlNSB7XG4gICAgcGFkZGluZy10b3A6IDI3cHg7XG4gICAgZ3JpZC1yb3c6IDIvMztcbiAgICBncmlkLWNvbHVtbjogMy80O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlNiB7XG4gICAgcGFkZGluZy10b3A6IDYycHg7XG4gICAgZ3JpZC1yb3c6IDEvMztcbiAgICBncmlkLWNvbHVtbjogNC81O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlNyB7XG4gICAgcGFkZGluZy10b3A6IDYycHg7XG4gICAgZ3JpZC1yb3c6IDEvMztcbiAgICBncmlkLWNvbHVtbjogNS82O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlNyAuc2xpZGUtY29udGVudCB7XG4gICAgcGFkZGluZy1yaWdodDogMDtcbiAgfVxuICAuc3RhZ2VzX19zd2lwZXItbmF2aSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB3aWR0aDogMTg1cHg7XG4gICAgbWFyZ2luOiAwIGF1dG87XG4gIH1cbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLXByZXYgc3ZnLFxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tbmV4dCBzdmcge1xuICAgIHdpZHRoOiAzNnB4O1xuICAgIGhlaWdodDogMzZweDtcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLWluLW91dDtcbiAgfVxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tcHJldiBzdmcgY2lyY2xlLFxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tbmV4dCBzdmcgY2lyY2xlIHtcbiAgICBmaWxsOiAjMzEzMTMxO1xuICB9XG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1wcmV2IC5zd2lwZXItYnV0dG9uLWRpc2FibGVkIHN2ZyBjaXJjbGUsXG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1uZXh0IC5zd2lwZXItYnV0dG9uLWRpc2FibGVkIHN2ZyBjaXJjbGUge1xuICAgIGZpbGw6ICNENkQ2RDY7XG4gIH1cbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLXByZXY6aG92ZXIgc3ZnIGNpcmNsZSxcbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLW5leHQ6aG92ZXIgc3ZnIGNpcmNsZSB7XG4gICAgZmlsbDogI0ZCQ0U1MTtcbiAgfVxuICAucGFydGljaXBhbnRzIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIHtcbiAgICBtaW4taGVpZ2h0OiA0MzVweDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIHtcbiAgICBtaW4taGVpZ2h0OiA0MzVweDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUge1xuICAgIG1pbi1oZWlnaHQ6IDQwOXB4O1xuICAgIHBhZGRpbmc6IDI2MHB4IDEwcHggMDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy9jYXJvdXNlbDM3NXgyLnBuZ1wiKSA1MCUgMTAlLzc0JSA2MCUgbm8tcmVwZWF0O1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1uYXZpIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYm90dG9tOiAtOSU7XG4gICAgbGVmdDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItYnRucyB7XG4gICAgd2lkdGg6IDEzMHB4O1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1wcmV2IHN2ZyxcbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLW5leHQgc3ZnIHtcbiAgICB3aWR0aDogMzZweDtcbiAgICBoZWlnaHQ6IDM2cHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItcGFnaW5hdGlvbiB7XG4gICAgcGFkZGluZzogMCA4JTtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItaGVhZCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjNweDtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItaGVhZCAuc3dpcGVyLXRpdGxlIHtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDM5LjZweDtcbiAgfVxuICAuZm9vdGVyIHtcbiAgICBwYWRkaW5nOiA0MHB4IDE4cHggNjBweDtcbiAgfVxufS8qIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlcy5jc3MubWFwICovIiwiLmhlYWRlciB7XG4gIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL2NpdHkxOTIweDIucG5nXCIpLCBsaW5lYXItZ3JhZGllbnQocmdiYSgyMzMsIDIyMiwgMjEyLCAwLjgpLCByZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCkpLCB1cmwoXCIuL2ltYWdlcy9oZWFkZXJfYmFjazE5MjB4Mi5wbmdcIik7XG4gIGJhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlLCBjb3ZlciwgY292ZXI7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IDU1JSAwLCBjZW50ZXIsIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdCwgbm8tcmVwZWF0LCBuby1yZXBlYXQ7XG59XG4uaGVhZGVyX19jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogc3RhcnQ7XG4gIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBhZGRpbmc6IDI3cHggMzA0cHg7XG59XG4uaGVhZGVyX19sb2dvIHtcbiAgbWFyZ2luLWxlZnQ6IDQ1cHg7XG4gIG1hcmdpbi1ib3R0b206IDYwcHg7XG59XG4uaGVhZGVyX19sb2dvIHN2ZyB7XG4gIHdpZHRoOiAyNDVweDtcbiAgaGVpZ2h0OiAzNnB4O1xufVxuLmhlYWRlcl9fdGl0bGUge1xuICBtYXJnaW4tbGVmdDogNDVweDtcbiAgY29sb3I6ICMwNjA2MDY7XG4gIGZvbnQtc2l6ZTogNjBweDtcbiAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGxpbmUtaGVpZ2h0OiA2NnB4O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG59XG4uaGVhZGVyX190aXRsZS1jYXAge1xuICBtYXJnaW4tbGVmdDogMTM1cHg7XG4gIGNvbG9yOiAjMDYwNjA2O1xuICBmb250LXNpemU6IDYwcHg7XG4gIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICBmb250LXdlaWdodDogNDAwO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsaW5lLWhlaWdodDogNjZweDtcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xufVxuLmhlYWRlcl9fdGl0bGUtZWFydGgge1xuICBtYXJnaW4tbGVmdDogNzZweDtcbiAgbWFyZ2luLWJvdHRvbTogMjRweDtcbiAgY29sb3I6ICMwNjA2MDY7XG4gIGZvbnQtc2l6ZTogNjBweDtcbiAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGxpbmUtaGVpZ2h0OiA2NnB4O1xufVxuLmhlYWRlcl9fZGVzY3Ige1xuICBtYXJnaW4tbGVmdDogNTVweDtcbiAgY29sb3I6ICMxNTE1MTU7XG4gIGZvbnQtc2l6ZTogMThweDtcbiAgZm9udC1mYW1pbHk6IFwiTW9udHNlcnJhdFwiO1xuICBmb250LXdlaWdodDogNTAwO1xuICBsaW5lLWhlaWdodDogMjMuNHB4O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbi5oZWFkZXJfX2Rlc2NyLXRleHQ6bGFzdC1jaGlsZCB7XG4gIG1hcmdpbi1ib3R0b206IDM1cHg7XG59XG4uaGVhZGVyX19idG5zIHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xuICBtYXJnaW4tYm90dG9tOiAxMDBweDtcbiAgbWFyZ2luLWxlZnQ6IDQ1cHg7XG59XG4uaGVhZGVyX19idG5zIC5ibGFjay1idG4ge1xuICB3aWR0aDogNDIlO1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG4gIGNvbG9yOiAjZmZmO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGJvcmRlci1jb2xvcjogIzA2MDYwNjtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzA2MDYwNjtcbn1cbi5oZWFkZXJfX2J0bnMgLmJsYWNrLWJ0bjpob3ZlciB7XG4gIGNvbG9yOiAjMUYxRjFGO1xuICBib3JkZXItY29sb3I6ICNGQkNFNTE7XG4gIGJhY2tncm91bmQtY29sb3I6ICNGQkNFNTE7XG59XG4uaGVhZGVyX19idG5zIC50cmFuc3AtYnRuIHtcbiAgd2lkdGg6IDQzJTtcbiAgcGFkZGluZy1yaWdodDogNTBweDtcbiAgcGFkZGluZy1sZWZ0OiA1MHB4O1xuICBjb2xvcjogIzMwMzAzMDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBib3JkZXItY29sb3I6ICMzMDMwMzA7XG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG4uaGVhZGVyX19idG5zIC50cmFuc3AtYnRuOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFGMUYxRjtcbiAgY29sb3I6ICNmZmY7XG59XG5cbiosXG4qOjpiZWZvcmUsXG4qOjphZnRlciB7XG4gIGJveC1zaXppbmc6IGluaGVyaXQ7XG59XG5cbio6Zm9jdXMtdmlzaWJsZSB7XG4gIG91dGxpbmU6IDA7XG59XG5cbioge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvR29sb3NUZXh0LVJlZ3VsYXJcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1SZWd1bGFyLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtUmVndWxhci53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgc3JjOiBsb2NhbChcImZvbnRzL0dvbG9zVGV4dC1NZWRpdW1cIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1NZWRpdW0ud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1NZWRpdW0ud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpO1xuICBmb250LXdlaWdodDogNTAwO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9Hb2xvc1RleHQtRGVtaUJvbGRcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1EZW1pQm9sZC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvR29sb3NUZXh0LURlbWlCb2xkLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvR29sb3NUZXh0LUJvbGRcIiksIHVybChcImZvbnRzL0dvbG9zVGV4dC1Cb2xkLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9Hb2xvc1RleHQtQm9sZC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvTWVycml3ZWF0aGVyIFJlZ3VsYXJcIiksIGxvY2FsKFwiZm9udHMvTWVycml3ZWF0aGVyLVJlZ3VsYXJcIiksIHVybChcImZvbnRzL01lcnJpd2VhdGhlci1SZWd1bGFyLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9NZXJyaXdlYXRoZXItUmVndWxhci53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBzd2FwO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvTWVycml3ZWF0aGVyIEJvbGRcIiksIGxvY2FsKFwiZm9udHMvTWVycml3ZWF0aGVyLUJvbGRcIiksIHVybChcImZvbnRzL01lcnJpd2VhdGhlci1Cb2xkLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9NZXJyaXdlYXRoZXItQm9sZC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIik7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtZGlzcGxheTogc3dhcDtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJNb250c2VycmF0XCI7XG4gIHNyYzogbG9jYWwoXCJmb250cy9Nb250c2VycmF0IE1lZGl1bVwiKSwgbG9jYWwoXCJmb250cy9Nb250c2VycmF0LU1lZGl1bVwiKSwgdXJsKFwiZm9udHMvTW9udHNlcnJhdC1NZWRpdW0ud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL01vbnRzZXJyYXQtTWVkaXVtLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiTW9udHNlcnJhdFwiO1xuICBzcmM6IGxvY2FsKFwiZm9udHMvTW9udHNlcnJhdCBTZW1pQm9sZFwiKSwgbG9jYWwoXCJmb250cy9Nb250c2VycmF0LVNlbWlCb2xkXCIpLCB1cmwoXCJmb250cy9Nb250c2VycmF0LVNlbWlCb2xkLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9Nb250c2VycmF0LVNlbWlCb2xkLndvZmZcIikgZm9ybWF0KFwid29mZlwiKTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LWRpc3BsYXk6IHN3YXA7XG59XG5ib2R5IHtcbiAgbWluLXdpZHRoOiAzMjBweDtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCIsIFwiTWVycml3ZWF0aGVyXCIsIFwiTW9udHNlcnJhdFwiLCBzYW5zLXNlcmlmO1xuICBmb250LXdlaWdodDogNDAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG59XG5cbi5jb250YWluZXIge1xuICBtYXgtd2lkdGg6IDE5MjBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG59XG5cbnNlY3Rpb24ge1xuICBwYWRkaW5nOiAyN3B4IDM0OXB4O1xufVxuXG51bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuYSB7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogaW5oZXJpdDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuXG5wLFxuaDEsXG5oMixcbmgzIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xufVxuXG5idXR0b24ge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlcjogaW5oZXJpdDtcbiAgb3V0bGluZTogaW5oZXJpdDtcbiAgYmFja2dyb3VuZDogaW5oZXJpdDtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG5pbWcge1xuICBtYXgtd2lkdGg6IDEwMCU7XG59XG5cbi52aXN1YWxseS1oaWRkZW4ge1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBvcGFjaXR5OiAwO1xufVxuXG4uaGlkZGVuLWJpZy1kZXYge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4uYnRuIHtcbiAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgbGluZS1oZWlnaHQ6IDE5cHg7XG4gIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UtaW4tb3V0O1xufVxuXG4uYnRuLWJpZyB7XG4gIHBhZGRpbmc6IDE2cHggNDVweDtcbiAgYm9yZGVyOiAycHggc29saWQ7XG4gIGJvcmRlci1yYWRpdXM6IDY2cHg7XG59XG5cbi5idG4tc21hbGwge1xuICBwYWRkaW5nOiA4cHggMTBweDtcbiAgYm9yZGVyOiAxcHggc29saWQ7XG4gIGJvcmRlci1yYWRpdXM6IDYycHg7XG59XG5cbi5saW5lIHtcbiAgbWluLWhlaWdodDogNjBweDtcbiAgcGFkZGluZzogMThweCAxMnB4O1xuICBiYWNrZ3JvdW5kOiAjRjU0OTMyO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4ubGluZV9fc3Ryb2tlIHtcbiAgd2lkdGg6IDE5MCU7XG4gIGFuaW1hdGlvbjogbWFycXVlZSAxNXMgbGluZWFyIGluZmluaXRlO1xufVxuXG4ubGluZV9fc3Ryb2tlIHN2ZyB7XG4gIHdpZHRoOiA2cHg7XG4gIGhlaWdodDogNnB4O1xuICBtYXJnaW46IDdweCAxMnB4O1xufVxuXG4ubGluZV9fc3Ryb2tlLXRleHQge1xuICBmb250LXNpemU6IDIycHg7XG4gIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICBmb250LXdlaWdodDogNDAwO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBsaW5lLWhlaWdodDogMjQuMnB4O1xuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIGNvbG9yOiAjZmZmO1xufVxuXG5Aa2V5ZnJhbWVzIG1hcnF1ZWUge1xuICAwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpO1xuICB9XG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSk7XG4gIH1cbn1cbkBtZWRpYSAobWF4LXdpZHRoOiAxMzY2cHgpIHtcbiAgLmhpZGRlbi1iaWctZGV2IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxuICBzZWN0aW9uIHtcbiAgICBwYWRkaW5nOiAwO1xuICB9XG4gIC5jb250YWluZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IHN0YXJ0O1xuICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBwYWRkaW5nOiAyNnB4IDMwcHg7XG4gIH1cbiAgLmhlYWRlciB7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvY2l0eTEzNjZ4Mi5wbmdcIiksIGxpbmVhci1ncmFkaWVudChyZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCksIHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSksIHVybChcIi4vaW1hZ2VzL2hlYWRlcl9iYWNrMTkyMHgyLnBuZ1wiKTtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyLCBjb3ZlciwgY292ZXI7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogcmlnaHQsIGNlbnRlciwgY2VudGVyO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQsIG5vLXJlcGVhdCwgbm8tcmVwZWF0O1xuICB9XG4gIC5oZWFkZXJfX3RpdGxlLWVhcnRoIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICB9XG4gIC5oZWFkZXJfX2Rlc2NyIHtcbiAgICB3aWR0aDogNDAlO1xuICAgIG1hcmdpbi1sZWZ0OiA1NXB4O1xuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICB9XG4gIC5oZWFkZXJfX2Rlc2NyLXRleHQ6bGFzdC1jaGlsZCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgfVxuICAuaGVhZGVyX19idG5zIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxMDVweDtcbiAgfVxuICAuaGVhZGVyIC5idG4tYmlnIHtcbiAgICBwYWRkaW5nOiAxNXB4IDQ1cHg7XG4gIH1cbiAgLmxpbmVfX3N0cm9rZSB7XG4gICAgd2lkdGg6IDMxNSU7XG4gIH1cbiAgLmhlbHAge1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gIH1cbiAgLmhlbHAgLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogMTA1cHggNzBweCAxNDBweDtcbiAgfVxuICAuaGVscF9fbGVjdGlvbiB7XG4gICAgbWFyZ2luOiAtMjhweCAwIDcwcHg7XG4gICAgcGFkZGluZy10b3A6IDI4cHg7XG4gICAgcGFkZGluZy1ib3R0b206IDI4cHg7XG4gICAgcGFkZGluZy1yaWdodDogMjZ2dztcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuL2ltYWdlcy90dXJuaXIxMzY2eDIucG5nXCIpIHJpZ2h0IDAlLzMyJSAxMDAlIG5vLXJlcGVhdDtcbiAgfVxuICAuaGVscF9fcGxheSB7XG4gICAgcGFkZGluZzogMzBweCAwO1xuICAgIHBhZGRpbmctbGVmdDogNDAuNXZ3O1xuICAgIG1hcmdpbjogLTMwcHggMDtcbiAgICBtYXJnaW4tbGVmdDogLTM1cHg7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvb25lUGxheWVyR2FtZTEzNjZ4Mi5wbmdcIikgbGVmdCA1JS80MyUgMTEyJSBuby1yZXBlYXQ7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHBhZGRpbmctdG9wOiA0NXB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IHN0YXJ0O1xuICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBtYXJnaW4tYm90dG9tOiAzNXB4O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogc3RhcnQ7XG4gICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgI0QwRDBEMDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW06Zmlyc3QtY2hpbGQge1xuICAgIHBhZGRpbmctdG9wOiAwO1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbTpsYXN0LWNoaWxkIHtcbiAgICBib3JkZXItYm90dG9tOiB0cmFuc3BhcmVudDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5pbmZvLWRlc2NyIHtcbiAgICB3aWR0aDogMjIuNXZ3O1xuICAgIHBhZGRpbmc6IDE1cHg7XG4gICAgcGFkZGluZy1sZWZ0OiAwO1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gICAgYm9yZGVyLXJpZ2h0OiAycHggc29saWQgI0QwRDBEMDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5pbmZvLWluZm8ge1xuICAgIHdpZHRoOiAyNXZ3O1xuICAgIHBhZGRpbmc6IDE1cHg7XG4gICAgcGFkZGluZy1yaWdodDogMDtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLmNyb3NzZWQge1xuICAgIC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2ggI0Y1NDkzMjtcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoICNGNTQ5MzI7XG4gICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xuICB9XG4gIC5oZWxwIC5ldmVudC1kZXNjciB7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBsaW5lLWhlaWdodDogNDguNnB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAuaGVscCAuZXZlbnQtbmFtZSB7XG4gICAgY29sb3I6ICNGNTQ5MzI7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgfVxuICAuaGVscCAuZXZlbnQtY29udGFjdCB7XG4gICAgY29sb3I6ICMzMDU3QTI7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAudG91cm5hbWVudCB7XG4gICAgYmFja2dyb3VuZDogI2ZmZjtcbiAgfVxuICAudG91cm5hbWVudCAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiA1NnB4IDcycHg7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLnZhc2l1a3ktc3RlcHMge1xuICAgIG1hcmdpbi1ib3R0b206IDU0cHg7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLnZhc2l1a3ktc3RlcHMtaGVhZGVyIHtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDU0cHg7XG4gICAgZm9udC1mYW1pbHk6IFwiTWVycml3ZWF0aGVyXCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIGxpbmUtaGVpZ2h0OiA2NC44cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC50b3VybmFtZW50IC52YXNpdWtpLXN0ZXBzLXRleHQge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB3aWR0aDogNDIuNSU7XG4gICAgcGFkZGluZy1sZWZ0OiAyMHB4O1xuICAgIGNvbG9yOiAjMzA1N0EyO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gIH1cbiAgLnN0YWdlcyB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1ib3R0b206IDE1N3B4O1xuICB9XG4gIC5zdGFnZXM6OmFmdGVyIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogLTglO1xuICAgIGJvdHRvbTogNyU7XG4gICAgd2lkdGg6IDQ4MHB4O1xuICAgIGhlaWdodDogMjQwcHg7XG4gICAgei1pbmRleDogMTA7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvcGxhbmUxMzY2eDIucG5nXCIpIGNlbnRlci9jb250YWluIG5vLXJlcGVhdDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDMsIDFmcik7XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBtaW5tYXgoMTE0cHgsIGF1dG8pIG1pbm1heCgxMTRweCwgYXV0bykgbWlubWF4KDEzOHB4LCBhdXRvKTtcbiAgICBnYXA6IDE5cHg7XG4gICAgbWFyZ2luLWJvdHRvbTogNDBweDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUge1xuICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG4gICAgcGFkZGluZzogMjJweCAyMHB4IDVweCAyMHB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IHN0YXJ0O1xuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChyZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCksIHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSksIHVybChcIi4vaW1hZ2VzL3NsaWRlYmFjazEzNjYucG5nXCIpO1xuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXIsIGNvdmVyO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciwgY2VudGVyO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQsIG5vLXJlcGVhdDtcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnNsaWRlLW51bWJlciB7XG4gICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xuICAgIHBhZGRpbmc6IDdweCAxMnB4O1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIC5zbGlkZS1jb250ZW50IHtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnNsaWRlMyB7XG4gICAgZ3JpZC1yb3c6IDEvMztcbiAgICBncmlkLWNvbHVtbjogMztcbiAgfVxuICAuc3RhZ2VzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zbGlkZTcge1xuICAgIGdyaWQtcm93OiAzO1xuICAgIGdyaWQtY29sdW1uOiAyLzQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU3IC5zbGlkZS1jb250ZW50IHtcbiAgICBwYWRkaW5nLXJpZ2h0OiAyMHZ3O1xuICAgIHBhZGRpbmctbGVmdDogN3B4O1xuICB9XG4gIC5zdGFnZXNfX3N3aXBlci1uYXZpIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1ib3R0b206IDY1cHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50cyAuc3dpcGVyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtaW4taGVpZ2h0OiA0ODJweDtcbiAgICBvdmVyZmxvdy14OiBoaWRkZW4gIWltcG9ydGFudDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIHtcbiAgICBtaW4taGVpZ2h0OiA0ODJweDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgbWluLWhlaWdodDogNDYycHg7XG4gICAgcGFkZGluZzogMzQ4cHggMTBweCAwO1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL2Nhcm91c2VsMTM2NngyLnBuZ1wiKSB0b3AgY2VudGVyLzgwJSA3MCUgbm8tcmVwZWF0O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSAucGFydGljaXBhbnQtbmFtZSB7XG4gICAgbWFyZ2luLWJvdHRvbTogNnB4O1xuICAgIGNvbG9yOiAjMzEzMTMxO1xuICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICBmb250LWZhbWlseTogXCJHb2xvcyBUZXh0XCI7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICBsaW5lLWhlaWdodDogMjguOHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnBhcnRpY2lwYW50LXN0YXR1cyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSAucGFydGljaXBhbnQtbGluayB7XG4gICAgY29sb3I6ICMzMDU3QTI7XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIkdvbG9zIFRleHRcIjtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxOS4ycHg7XG4gICAgd29yZC13cmFwOiBicmVhay13b3JkO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlci1jb2xvcjogIzMwNTdBMjtcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLWluLW91dDtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIgLnN3aXBlci13cmFwcGVyIC5zd2lwZXItc2xpZGUgLnBhcnRpY2lwYW50LWxpbms6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMzMDU3QTI7XG4gICAgY29sb3I6ICNmZmY7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLWhlYWQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgbWFyZ2luLWJvdHRvbTogNjJweDtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItaGVhZCAuc3dpcGVyLXRpdGxlIHtcbiAgICBmbGV4LWdyb3c6IDI7XG4gICAgY29sb3I6ICMzMTMxMzE7XG4gICAgZm9udC1zaXplOiA1NHB4O1xuICAgIGZvbnQtZmFtaWx5OiBcIk1lcnJpd2VhdGhlclwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBsaW5lLWhlaWdodDogNjQuOHB4O1xuICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDtcbiAgfVxuICAucGFydGljaXBhbnRzX19zd2lwZXItbmF2aSB7XG4gICAgd2lkdGg6IDE1MnB4O1xuICAgIHBhZGRpbmctdG9wOiAzcHg7XG4gICAgcGFkZGluZy1sZWZ0OiAzcHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLWJ0bnMge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgd2lkdGg6IDE1MnB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1wcmV2IHN2ZyxcbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLW5leHQgc3ZnIHtcbiAgICB3aWR0aDogNDRweDtcbiAgICBoZWlnaHQ6IDQ0cHg7XG4gIH1cbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLXByZXYgc3ZnIGNpcmNsZSxcbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLW5leHQgc3ZnIGNpcmNsZSB7XG4gICAgZmlsbDogIzMxMzEzMTtcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tcHJldjpob3ZlciBzdmcgY2lyY2xlLFxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tbmV4dDpob3ZlciBzdmcgY2lyY2xlIHtcbiAgICBmaWxsOiAjRkJDRTUxO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMtc3dpcGVyLWJ1dHRvbi1wcmV2IC5zd2lwZXItbmF2aWdhdGlvbi1kaXNhYmxlZCBzdmcgY2lyY2xlLFxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tbmV4dCAuc3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWQgc3ZnIGNpcmNsZSB7XG4gICAgZmlsbDogI0Q2RDZENjtcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1wYWdpbmF0aW9uIHtcbiAgICBwYWRkaW5nOiAwIDklO1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgfVxuICAuZm9vdGVyIHtcbiAgICBwYWRkaW5nOiA0MHB4IDcycHggNzJweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTlERUQ0O1xuICB9XG4gIC5mb290ZXIgLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogMDtcbiAgfVxuICAuZm9vdGVyIC5jb250YWluZXIgLmZvb3Rlci10ZXh0IHtcbiAgICBjb2xvcjogIzMxMzEzMTtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgZm9udC1mYW1pbHk6IFwiR29sb3MgVGV4dFwiO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgbGluZS1oZWlnaHQ6IDE5LjJweDtcbiAgICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XG4gIH1cbn1cbkBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiAyMHB4O1xuICB9XG4gIC5oZWFkZXIge1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL2NpdHkzNzV4Mi5wbmdcIiksIGxpbmVhci1ncmFkaWVudChyZ2JhKDIzMywgMjIyLCAyMTIsIDAuOCksIHJnYmEoMjMzLCAyMjIsIDIxMiwgMC44KSksIHVybChcIi4vaW1hZ2VzL2hlYWRlcl9iYWNrMzc1eDIucG5nXCIpO1xuICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJSA1MCUsIGNvdmVyLCBjb3ZlcjtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBib3R0b20sIGNlbnRlciwgY2VudGVyO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQsIG5vLXJlcGVhdCwgbm8tcmVwZWF0O1xuICB9XG4gIC5oZWFkZXJfX2xvZ28ge1xuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gIH1cbiAgLmhlYWRlcl9fbG9nbyBzdmcge1xuICAgIHdpZHRoOiAyMTNweDtcbiAgfVxuICAuaGVhZGVyX190aXRsZSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzOS42cHg7XG4gIH1cbiAgLmhlYWRlcl9fdGl0bGUtY2FwIHtcbiAgICBtYXJnaW4tbGVmdDogNjNweDtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDM5LjZweDtcbiAgfVxuICAuaGVhZGVyX190aXRsZS1lYXJ0aCB7XG4gICAgbWFyZ2luLWxlZnQ6IDMwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMjRweDtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDM5LjZweDtcbiAgfVxuICAuaGVhZGVyX19kZXNjciB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IC01cHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICBmb250LXNpemU6IDE4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDIzLjRweDtcbiAgfVxuICAuaGVhZGVyX19kZXNjci10ZXh0IHtcbiAgICBkaXNwbGF5OiBpbmxpbmU7XG4gIH1cbiAgLmhlYWRlcl9fYnRucyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBtYXJnaW4tYm90dG9tOiAyNjVweDtcbiAgfVxuICAuaGVhZGVyX19idG5zIC5ibGFjay1idG4ge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICBtYXJnaW4tYm90dG9tOiAxM3B4O1xuICAgIHBhZGRpbmc6IDE0cHggMjBweDtcbiAgfVxuICAuaGVhZGVyX19idG5zIC50cmFuc3AtYnRuIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nOiAxNHB4IDIwcHg7XG4gIH1cbiAgLmxpbmUge1xuICAgIG1pbi1oZWlnaHQ6IDM4cHg7XG4gICAgcGFkZGluZzogMTBweCAxMnB4O1xuICB9XG4gIC5saW5lX19zdHJva2Uge1xuICAgIHdpZHRoOiA1NDUlO1xuICB9XG4gIC5saW5lX19zdHJva2Ugc3ZnIHtcbiAgICBtYXJnaW46IDNweCAxMnB4O1xuICB9XG4gIC5saW5lX19zdHJva2UtdGV4dCB7XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAxNy42cHg7XG4gIH1cbiAgLmhlbHAgLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogNDhweCAyMHB4O1xuICB9XG4gIC5oZWxwX19sZWN0aW9uIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIG1pbi1oZWlnaHQ6IDUzNnB4O1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvdHVybmlyMzc1eDIucG5nXCIpIGNlbnRlciA1MCUvMTAwJSAzOCUgbm8tcmVwZWF0O1xuICB9XG4gIC5oZWxwIC5ldmVudC1kZXNjcjpudGgtY2hpbGQoMikge1xuICAgIG1hcmdpbi1ib3R0b206IDI2MHB4O1xuICB9XG4gIC5oZWxwIC5ldmVudC1kZXNjciB7XG4gICAgZm9udC1zaXplOiAyOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzNy44cHg7XG4gIH1cbiAgLmhlbHAgLmV2ZW50LW5hbWUge1xuICAgIGZvbnQtc2l6ZTogMjhweDtcbiAgICBsaW5lLWhlaWdodDogMzcuOHB4O1xuICB9XG4gIC5oZWxwIC5ldmVudC1jb250YWN0IHtcbiAgICBmb250LXNpemU6IDE4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDIxLjZweDtcbiAgfVxuICAuaGVscF9fcGxheSB7XG4gICAgcGFkZGluZzogMCAyMHB4O1xuICAgIHBhZGRpbmctdG9wOiA0NjBweDtcbiAgICBtYXJnaW46IC0yMHB4O1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL29uZVBsYXllckdhbWUzNzV4Mi5wbmdcIikgY2VudGVyIDUlLzEwMCUgMzglIG5vLXJlcGVhdDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyM3B4O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbSB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW06bm90KDpmaXJzdC1jaGlsZCkge1xuICAgIHBhZGRpbmctdG9wOiAxM3B4O1xuICB9XG4gIC5oZWxwX19wbGF5IC5wbGF5LWluZm8gLnBsYXktaW5mb19faXRlbTpudGgtY2hpbGQoNCkge1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAucGxheS1pbmZvX19pdGVtOm50aC1jaGlsZCg0KSAuaW5mby1kZXNjciB7XG4gICAgd2lkdGg6IDQ3JTtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5wbGF5LWluZm9fX2l0ZW06bnRoLWNoaWxkKDQpIC5pbmZvLWluZm8ge1xuICAgIHdpZHRoOiA0NyU7XG4gIH1cbiAgLmhlbHBfX3BsYXkgLnBsYXktaW5mbyAuaW5mby1kZXNjciB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZy10b3A6IDA7XG4gICAgYm9yZGVyOiB0cmFuc3BhcmVudDtcbiAgfVxuICAuaGVscF9fcGxheSAucGxheS1pbmZvIC5pbmZvLWluZm8ge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBhZGRpbmctdG9wOiAwO1xuICAgIHBhZGRpbmctbGVmdDogMDtcbiAgfVxuICAudG91cm5hbWVudCAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiA5NXB4IDIwcHg7XG4gICAgcGFkZGluZy1ib3R0b206IDgwcHg7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLnZhc2l1a3ktc3RlcHMge1xuICAgIG1hcmdpbi1ib3R0b206IDE1MHB4O1xuICB9XG4gIC50b3VybmFtZW50IC52YXNpdWt5LXN0ZXBzLWhlYWRlciB7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICAgIGxpbmUtaGVpZ2h0OiAzOS42cHg7XG4gIH1cbiAgLnRvdXJuYW1lbnQgLnZhc2l1a2ktc3RlcHMtdGV4dCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICAgIGxpbmUtaGVpZ2h0OiAyMS42cHg7XG4gIH1cbiAgLnN0YWdlcyB7XG4gICAgbWFyZ2luLWJvdHRvbTogMTE1cHg7XG4gIH1cbiAgLnN0YWdlczo6YWZ0ZXIge1xuICAgIHJpZ2h0OiAwJTtcbiAgICB0b3A6IC0zNSU7XG4gICAgd2lkdGg6IDMyN3B4O1xuICAgIGhlaWdodDogMTgycHg7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi9pbWFnZXMvcGxhbmUzNzV4Mi5wbmdcIikgY2VudGVyL2NvbnRhaW4gbm8tcmVwZWF0O1xuICB9XG4gIC5zdGFnZXMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIge1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDUsIDFmcik7XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBtaW5tYXgoMTUwcHgsIGF1dG8pIG1pbm1heCgxNTBweCwgYXV0byk7XG4gICAgZ2FwOiAwO1xuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIHtcbiAgICB3aWR0aDogMzM1cHggIWltcG9ydGFudDtcbiAgICBwYWRkaW5nOiAwIDIwcHg7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc3dpcGVyLXNsaWRlIC5zbGlkZS1jb250ZW50IHtcbiAgICBmb250LXNpemU6IDE4cHg7XG4gICAgbGluZS1oZWlnaHQ6IDIycHg7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGUxIHtcbiAgICBwYWRkaW5nLXRvcDogNjJweDtcbiAgICBncmlkLXJvdzogMS8yO1xuICAgIGdyaWQtY29sdW1uOiAxLzI7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGUyIHtcbiAgICBwYWRkaW5nLXRvcDogMjdweDtcbiAgICBncmlkLXJvdzogMi8zO1xuICAgIGdyaWQtY29sdW1uOiAxLzI7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGUzIHtcbiAgICBwYWRkaW5nLXRvcDogNjJweDtcbiAgICBncmlkLXJvdzogMS8zO1xuICAgIGdyaWQtY29sdW1uOiAyLzM7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU0IHtcbiAgICBwYWRkaW5nLXRvcDogNjJweDtcbiAgICBncmlkLXJvdzogMS8yO1xuICAgIGdyaWQtY29sdW1uOiAzLzQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU1IHtcbiAgICBwYWRkaW5nLXRvcDogMjdweDtcbiAgICBncmlkLXJvdzogMi8zO1xuICAgIGdyaWQtY29sdW1uOiAzLzQ7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU2IHtcbiAgICBwYWRkaW5nLXRvcDogNjJweDtcbiAgICBncmlkLXJvdzogMS8zO1xuICAgIGdyaWQtY29sdW1uOiA0LzU7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU3IHtcbiAgICBwYWRkaW5nLXRvcDogNjJweDtcbiAgICBncmlkLXJvdzogMS8zO1xuICAgIGdyaWQtY29sdW1uOiA1LzY7XG4gIH1cbiAgLnN0YWdlcyAuc3dpcGVyIC5zd2lwZXItd3JhcHBlciAuc2xpZGU3IC5zbGlkZS1jb250ZW50IHtcbiAgICBwYWRkaW5nLXJpZ2h0OiAwO1xuICB9XG4gIC5zdGFnZXNfX3N3aXBlci1uYXZpIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHdpZHRoOiAxODVweDtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgfVxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tcHJldiBzdmcsXG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1uZXh0IHN2ZyB7XG4gICAgd2lkdGg6IDM2cHg7XG4gICAgaGVpZ2h0OiAzNnB4O1xuICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UtaW4tb3V0O1xuICB9XG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1wcmV2IHN2ZyBjaXJjbGUsXG4gIC5zdGFnZXMtc3dpcGVyLWJ1dHRvbi1uZXh0IHN2ZyBjaXJjbGUge1xuICAgIGZpbGw6ICMzMTMxMzE7XG4gIH1cbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLXByZXYgLnN3aXBlci1idXR0b24tZGlzYWJsZWQgc3ZnIGNpcmNsZSxcbiAgLnN0YWdlcy1zd2lwZXItYnV0dG9uLW5leHQgLnN3aXBlci1idXR0b24tZGlzYWJsZWQgc3ZnIGNpcmNsZSB7XG4gICAgZmlsbDogI0Q2RDZENjtcbiAgfVxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tcHJldjpob3ZlciBzdmcgY2lyY2xlLFxuICAuc3RhZ2VzLXN3aXBlci1idXR0b24tbmV4dDpob3ZlciBzdmcgY2lyY2xlIHtcbiAgICBmaWxsOiAjRkJDRTUxO1xuICB9XG4gIC5wYXJ0aWNpcGFudHMge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgfVxuICAucGFydGljaXBhbnRzIC5zd2lwZXIge1xuICAgIG1pbi1oZWlnaHQ6IDQzNXB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIge1xuICAgIG1pbi1oZWlnaHQ6IDQzNXB4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHMgLnN3aXBlciAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZSB7XG4gICAgbWluLWhlaWdodDogNDA5cHg7XG4gICAgcGFkZGluZzogMjYwcHggMTBweCAwO1xuICAgIGJhY2tncm91bmQ6IHVybChcIi4vaW1hZ2VzL2Nhcm91c2VsMzc1eDIucG5nXCIpIDUwJSAxMCUvNzQlIDYwJSBuby1yZXBlYXQ7XG4gIH1cbiAgLnBhcnRpY2lwYW50c19fc3dpcGVyLW5hdmkge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3R0b206IC05JTtcbiAgICBsZWZ0OiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1idG5zIHtcbiAgICB3aWR0aDogMTMwcHg7XG4gICAgbWFyZ2luOiAwIGF1dG87XG4gIH1cbiAgLnBhcnRpY2lwYW50cy1zd2lwZXItYnV0dG9uLXByZXYgc3ZnLFxuICAucGFydGljaXBhbnRzLXN3aXBlci1idXR0b24tbmV4dCBzdmcge1xuICAgIHdpZHRoOiAzNnB4O1xuICAgIGhlaWdodDogMzZweDtcbiAgfVxuICAucGFydGljaXBhbnRzLXN3aXBlci1wYWdpbmF0aW9uIHtcbiAgICBwYWRkaW5nOiAwIDglO1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1oZWFkIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyM3B4O1xuICB9XG4gIC5wYXJ0aWNpcGFudHNfX3N3aXBlci1oZWFkIC5zd2lwZXItdGl0bGUge1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICBsaW5lLWhlaWdodDogMzkuNnB4O1xuICB9XG4gIC5mb290ZXIge1xuICAgIHBhZGRpbmc6IDQwcHggMThweCA2MHB4O1xuICB9XG59LyojIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVzLmNzcy5tYXAgKi8iXX0= */
